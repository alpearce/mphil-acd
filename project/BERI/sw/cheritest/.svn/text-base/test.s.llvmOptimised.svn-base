	.section .mdebug.abi64
	.previous
	.file	"test.c"
	.text
	.globl	dlnC0
	.align	3
	.type	dlnC0,@function
	.set	nomips16                # @dlnC0
	.ent	dlnC0
dlnC0:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CSetLen $c0, $c0, $a0
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	dlnC0
$tmp3:
	.size	dlnC0, ($tmp3)-dlnC0

	.globl	ibsC0
	.align	3
	.type	ibsC0,@function
	.set	nomips16                # @ibsC0
	.ent	ibsC0
ibsC0:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CIncBase $c0, $c0, $a0
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	ibsC0
$tmp7:
	.size	ibsC0, ($tmp7)-ibsC0

	.globl	stpC0
	.align	3
	.type	stpC0,@function
	.set	nomips16                # @stpC0
	.ent	stpC0
stpC0:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CSetType $c0, $c0, $a0
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	stpC0
$tmp11:
	.size	stpC0, ($tmp11)-stpC0

	.globl	cpmC0
	.align	3
	.type	cpmC0,@function
	.set	nomips16                # @cpmC0
	.ent	cpmC0
cpmC0:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CAndPerm $c0, $c0, $a0
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	cpmC0
$tmp15:
	.size	cpmC0, ($tmp15)-cpmC0

	.globl	mvlnC0
	.align	3
	.type	mvlnC0,@function
	.set	nomips16                # @mvlnC0
	.ent	mvlnC0
mvlnC0:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CGetLen $v0, $c0
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	mvlnC0
$tmp19:
	.size	mvlnC0, ($tmp19)-mvlnC0

	.globl	mvbsC0
	.align	3
	.type	mvbsC0,@function
	.set	nomips16                # @mvbsC0
	.ent	mvbsC0
mvbsC0:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CGetBase $v0, $c0
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	mvbsC0
$tmp23:
	.size	mvbsC0, ($tmp23)-mvbsC0

	.globl	mvtpC0
	.align	3
	.type	mvtpC0,@function
	.set	nomips16                # @mvtpC0
	.ent	mvtpC0
mvtpC0:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CGetType $v0, $c0
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	mvtpC0
$tmp27:
	.size	mvtpC0, ($tmp27)-mvtpC0

	.globl	mvpmC0
	.align	3
	.type	mvpmC0,@function
	.set	nomips16                # @mvpmC0
	.ent	mvpmC0
mvpmC0:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CGetPerm $v0, $c0
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	mvpmC0
$tmp31:
	.size	mvpmC0, ($tmp31)-mvpmC0

	.globl	FBIncBase
	.align	3
	.type	FBIncBase,@function
	.set	nomips16                # @FBIncBase
	.ent	FBIncBase
FBIncBase:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CIncBase $c4, $c4, $a0
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	FBIncBase
$tmp35:
	.size	FBIncBase, ($tmp35)-FBIncBase

	.globl	FBDecLeng
	.align	3
	.type	FBDecLeng,@function
	.set	nomips16                # @FBDecLeng
	.ent	FBDecLeng
FBDecLeng:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CSetLen $c4, $c4, $a0
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	FBDecLeng
$tmp39:
	.size	FBDecLeng, ($tmp39)-FBDecLeng

	.globl	FBGetBase
	.align	3
	.type	FBGetBase,@function
	.set	nomips16                # @FBGetBase
	.ent	FBGetBase
FBGetBase:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CGetBase $v0, $c4
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	FBGetBase
$tmp43:
	.size	FBGetBase, ($tmp43)-FBGetBase

	.globl	FBGetLeng
	.align	3
	.type	FBGetLeng,@function
	.set	nomips16                # @FBGetLeng
	.ent	FBGetLeng
FBGetLeng:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CGetLen $v0, $c4
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	FBGetLeng
$tmp47:
	.size	FBGetLeng, ($tmp47)-FBGetLeng

	.globl	FBSBR
	.align	3
	.type	FBSBR,@function
	.set	nomips16                # @FBSBR
	.ent	FBSBR
FBSBR:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CSBR $a0, $a1($c4)
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	FBSBR
$tmp51:
	.size	FBSBR, ($tmp51)-FBSBR

	.globl	FBSWR
	.align	3
	.type	FBSWR,@function
	.set	nomips16                # @FBSWR
	.ent	FBSWR
FBSWR:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	FBSWR
$tmp55:
	.size	FBSWR, ($tmp55)-FBSWR

	.globl	FBSDR
	.align	3
	.type	FBSDR,@function
	.set	nomips16                # @FBSDR
	.ent	FBSDR
FBSDR:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CSDR $a0, $a1($c4)
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	FBSDR
$tmp59:
	.size	FBSDR, ($tmp59)-FBSDR

	.globl	CapRegDump
	.align	3
	.type	CapRegDump,@function
	.set	nomips16                # @CapRegDump
	.ent	CapRegDump
CapRegDump:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	MFC2 $0, $0, 4
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	CapRegDump
$tmp63:
	.size	CapRegDump, ($tmp63)-CapRegDump

	.globl	mv1kC1
	.align	3
	.type	mv1kC1,@function
	.set	nomips16                # @mv1kC1
	.ent	mv1kC1
mv1kC1:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	.word 0x46002000
	#NO_APP
	#APP
	.word 0x46012001
	#NO_APP
	#APP
	.word 0x46022002
	#NO_APP
	#APP
	.word 0x46032003
	#NO_APP
	#APP
	.word 0x46042104
	#NO_APP
	#APP
	.word 0x46052105
	#NO_APP
	#APP
	.word 0x46062106
	#NO_APP
	#APP
	.word 0x46072107
	#NO_APP
	#APP
	.word 0x46082208
	#NO_APP
	#APP
	.word 0x46092209
	#NO_APP
	#APP
	.word 0x460a220a
	#NO_APP
	#APP
	.word 0x460b220b
	#NO_APP
	#APP
	.word 0x460c230c
	#NO_APP
	#APP
	.word 0x460d230d
	#NO_APP
	#APP
	.word 0x460e230e
	#NO_APP
	#APP
	.word 0x460f230f
	#NO_APP
	#APP
	.word 0x46102410
	#NO_APP
	#APP
	.word 0x46112411
	#NO_APP
	#APP
	.word 0x46122412
	#NO_APP
	#APP
	.word 0x46132413
	#NO_APP
	#APP
	.word 0x46142514
	#NO_APP
	#APP
	.word 0x46152515
	#NO_APP
	#APP
	.word 0x46162516
	#NO_APP
	#APP
	.word 0x46172517
	#NO_APP
	#APP
	.word 0x46182618
	#NO_APP
	#APP
	.word 0x46192619
	#NO_APP
	#APP
	.word 0x461a261a
	#NO_APP
	#APP
	.word 0x461b261b
	#NO_APP
	#APP
	.word 0x461c271c
	#NO_APP
	#APP
	.word 0x461d271d
	#NO_APP
	#APP
	.word 0x461e271e
	#NO_APP
	#APP
	.word 0x461f271f
	#NO_APP
	#APP
	.word 0x46202800
	#NO_APP
	#APP
	.word 0x46202841
	#NO_APP
	#APP
	.word 0x46202882
	#NO_APP
	#APP
	.word 0x462028C3
	#NO_APP
	#APP
	.word 0x46202904
	#NO_APP
	#APP
	.word 0x46202945
	#NO_APP
	#APP
	.word 0x46202986
	#NO_APP
	#APP
	.word 0x462029C7
	#NO_APP
	#APP
	.word 0x46202A08
	#NO_APP
	#APP
	.word 0x46202A49
	#NO_APP
	#APP
	.word 0x46202A8a
	#NO_APP
	#APP
	.word 0x46202ACb
	#NO_APP
	#APP
	.word 0x46202B0c
	#NO_APP
	#APP
	.word 0x46202B4d
	#NO_APP
	#APP
	.word 0x46202B8e
	#NO_APP
	#APP
	.word 0x46202BCf
	#NO_APP
	#APP
	.word 0x46202C10
	#NO_APP
	#APP
	.word 0x46202C51
	#NO_APP
	#APP
	.word 0x46202C92
	#NO_APP
	#APP
	.word 0x46202CD3
	#NO_APP
	#APP
	.word 0x46202D14
	#NO_APP
	#APP
	.word 0x46202D55
	#NO_APP
	#APP
	.word 0x46202D96
	#NO_APP
	#APP
	.word 0x46202DD7
	#NO_APP
	#APP
	.word 0x46202E18
	#NO_APP
	#APP
	.word 0x46202E59
	#NO_APP
	#APP
	.word 0x46202E9a
	#NO_APP
	#APP
	.word 0x46202EDb
	#NO_APP
	#APP
	.word 0x46202F1c
	#NO_APP
	#APP
	.word 0x46202F5d
	#NO_APP
	#APP
	.word 0x46202F9e
	#NO_APP
	#APP
	.word 0x46202FDf
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	mv1kC1
$tmp67:
	.size	mv1kC1, ($tmp67)-mv1kC1

	.globl	writeUARTChar
	.align	3
	.type	writeUARTChar,@function
	.set	nomips16                # @writeUARTChar
	.ent	writeUARTChar
writeUARTChar:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$2, $1, 24
	j	$BB17_2
	daddiu	$3, $2, 4
$BB17_1:                                # %while.body
                                        #   in Loop: Header=BB17_2 Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB17_2:                                # %while.body
                                        # =>This Inner Loop Header: Depth=1
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB17_1
	nop
# BB#3:                                 # %while.end
	sb	$4, 0($2)
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	writeUARTChar
$tmp71:
	.size	writeUARTChar, ($tmp71)-writeUARTChar

	.globl	writeString
	.align	3
	.type	writeString,@function
	.set	nomips16                # @writeString
	.ent	writeString
writeString:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	lbu	$2, 0($4)
	beq	$2, $zero, $BB18_6
	nop
# BB#1:
	daddiu	$1, $zero, 9
	dsll	$3, $1, 36
	daddiu	$1, $3, 127
	dsll	$1, $1, 24
	daddiu	$5, $1, 4
$BB18_2:                                # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_4 Depth 2
	lw	$1, 0($5)
	j	$BB18_4
	nop
$BB18_3:                                # %while.body.i
                                        #   in Loop: Header=BB18_4 Depth=2
	daddiu	$1, $3, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB18_4:                                # %while.body.i
                                        #   Parent Loop BB18_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB18_3
	nop
# BB#5:                                 # %writeUARTChar.exit
                                        #   in Loop: Header=BB18_2 Depth=1
	daddiu	$1, $3, 127
	dsll	$1, $1, 24
	sb	$2, 0($1)
	daddiu	$1, $4, 1
	lbu	$2, 1($4)
	bne	$2, $zero, $BB18_2
	move	$4, $1
$BB18_6:                                # %while.end
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	writeString
$tmp75:
	.size	writeString, ($tmp75)-writeString

	.globl	writeUARTCharLoopback
	.align	3
	.type	writeUARTCharLoopback,@function
	.set	nomips16                # @writeUARTCharLoopback
	.ent	writeUARTCharLoopback
writeUARTCharLoopback:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	daddiu	$1, $zero, 9
	addiu	$3, $zero, -1
	lui	$4, 65535
	lui	$5, 255
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$1, $1, 24
	daddiu	$2, $1, 4128
$BB19_1:                                # %do.body
                                        # =>This Inner Loop Header: Depth=1
	ld	$1, 0($2)
	#APP
	add $v0, $v0, $0
	#NO_APP
	sll	$6, $1, 0
	beq	$6, $3, $BB19_3
	nop
# BB#2:                                 # %do.body
                                        #   in Loop: Header=BB19_1 Depth=1
	and	$1, $6, $4
	sltu	$1, $5, $1
	bne	$1, $zero, $BB19_1
	nop
$BB19_3:                                # %do.end
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4096
	sb	$zero, 0($1)
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	writeUARTCharLoopback
$tmp79:
	.size	writeUARTCharLoopback, ($tmp79)-writeUARTCharLoopback

	.globl	writeStringLoopback
	.align	3
	.type	writeStringLoopback,@function
	.set	nomips16                # @writeStringLoopback
	.ent	writeStringLoopback
writeStringLoopback:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	lbu	$1, 0($4)
	beq	$1, $zero, $BB20_6
	nop
# BB#1:
	daddiu	$1, $zero, 9
	addiu	$5, $zero, -1
	lui	$6, 65535
	lui	$7, 255
	dsll	$2, $1, 36
	daddiu	$1, $2, 127
	dsll	$1, $1, 24
	daddiu	$3, $1, 4128
$BB20_2:                                # %do.body.i.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_3 Depth 2
	move	$8, $4
$BB20_3:                                # %do.body.i
                                        #   Parent Loop BB20_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld	$1, 0($3)
	#APP
	add $v0, $v0, $0
	#NO_APP
	sll	$4, $1, 0
	beq	$4, $5, $BB20_5
	nop
# BB#4:                                 # %do.body.i
                                        #   in Loop: Header=BB20_3 Depth=2
	and	$1, $4, $6
	sltu	$1, $7, $1
	bne	$1, $zero, $BB20_3
	nop
$BB20_5:                                # %writeUARTCharLoopback.exit
                                        #   in Loop: Header=BB20_2 Depth=1
	daddiu	$1, $2, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4096
	sb	$zero, 0($1)
	lbu	$1, 1($8)
	bne	$1, $zero, $BB20_2
	daddiu	$4, $8, 1
$BB20_6:                                # %while.end
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	writeStringLoopback
$tmp83:
	.size	writeStringLoopback, ($tmp83)-writeStringLoopback

	.globl	writeHex
	.align	3
	.type	writeHex,@function
	.set	nomips16                # @writeHex
	.ent	writeHex
writeHex:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	daddiu	$1, $zero, 5
	addiu	$2, $zero, 0
	addiu	$7, $zero, 16
	dsll	$3, $1, 61
	daddiu	$1, $zero, 9
	dsll	$5, $1, 36
	daddiu	$1, $5, 127
	dsll	$1, $1, 24
	daddiu	$6, $1, 4
$BB21_1:                                # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_3 Depth 2
	lw	$1, 0($6)
	j	$BB21_3
	nop
$BB21_2:                                # %while.body.i
                                        #   in Loop: Header=BB21_3 Depth=2
	daddiu	$1, $5, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB21_3:                                # %while.body.i
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB21_2
	nop
# BB#4:                                 # %writeUARTChar.exit
                                        #   in Loop: Header=BB21_1 Depth=1
	dsrl	$9, $4, 60
	sltu	$1, $4, $3
	addiu	$2, $2, 1
	dsll	$4, $4, 4
	daddiu	$8, $9, 55
	ori	$9, $9, 48
	movn	$8, $9, $1
	sll	$1, $8, 0
	daddiu	$8, $5, 127
	dsll	$8, $8, 24
	bne	$2, $7, $BB21_1
	sb	$1, 0($8)
# BB#5:                                 # %for.end
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	writeHex
$tmp87:
	.size	writeHex, ($tmp87)-writeHex

	.globl	writeDigit
	.align	3
	.type	writeDigit,@function
	.set	nomips16                # @writeDigit
	.ent	writeDigit
writeDigit:
	.frame	$fp,96,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -96
	sd	$fp, 88($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	addiu	$2, $zero, -1
	sd	$zero, 48($fp)
	sd	$zero, 40($fp)
	sd	$zero, 32($fp)
	beq	$4, $zero, $BB22_4
	sd	$zero, 24($fp)
# BB#1:
	lui	$1, 52429
	daddiu	$5, $zero, 10
	daddiu	$6, $fp, 56
	daddiu	$7, $zero, 9
	daddiu	$1, $1, -13107
	dsll	$1, $1, 16
	daddiu	$1, $1, -13107
	dsll	$1, $1, 16
	daddiu	$3, $1, -13107
$BB22_2:                                # %while.body
                                        # =>This Inner Loop Header: Depth=1
	dmultu	$4, $3
	addiu	$2, $2, 1
	dsll	$8, $2, 32
	dsrl	$10, $8, 32
	sltu	$8, $7, $4
	daddu	$10, $6, $10
	mfhi	$1
	dsrl	$1, $1, 3
	dmult	$1, $5
	mflo	$9
	dsubu	$4, $4, $9
	ori	$4, $4, 48
	sb	$4, 0($10)
	bne	$8, $zero, $BB22_2
	move	$4, $1
# BB#3:                                 # %while.end
	beq	$2, $zero, $BB22_12
	daddiu	$3, $zero, 0
$BB22_4:                                # %while.body9.lr.ph
	daddiu	$1, $zero, 1
	daddiu	$7, $zero, 0
	dsll	$1, $1, 32
	daddiu	$6, $1, -4
	dsll	$1, $2, 32
	dsrl	$3, $1, 32
	and	$5, $3, $6
	beq	$5, $zero, $BB22_8
	nop
# BB#5:
	sll	$1, $5, 0
	daddiu	$8, $fp, 56
	daddiu	$9, $fp, 24
	subu	$4, $2, $1
$BB22_6:                                # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	sll	$1, $7, 0
	subu	$1, $2, $1
	dsll	$1, $1, 32
	dsrl	$10, $1, 32
	and	$1, $7, $6
	daddiu	$7, $7, 4
	daddu	$11, $10, $8
	daddu	$1, $9, $1
	lbu	$10, 0($11)
	lbu	$12, -1($11)
	lbu	$13, -2($11)
	lbu	$11, -3($11)
	sb	$11, 3($1)
	sb	$13, 2($1)
	sb	$12, 1($1)
	bne	$7, $5, $BB22_6
	sb	$10, 0($1)
# BB#7:                                 # %vector.body
	j	$BB22_9
	nop
$BB22_8:
	move	$4, $2
	daddiu	$5, $zero, 0
$BB22_9:                                # %middle.block
	beq	$3, $5, $BB22_12
	nop
# BB#10:                                # %while.body9.preheader
	subu	$2, $2, $4
	daddiu	$5, $fp, 24
	daddiu	$6, $fp, 56
$BB22_11:                               # %while.body9
                                        # =>This Inner Loop Header: Depth=1
	dsll	$1, $2, 32
	dsll	$7, $4, 32
	addiu	$2, $2, 1
	addiu	$4, $4, -1
	dsrl	$7, $7, 32
	dsrl	$1, $1, 32
	daddu	$7, $6, $7
	daddu	$1, $5, $1
	lbu	$7, 0($7)
	bne	$4, $zero, $BB22_11
	sb	$7, 0($1)
$BB22_12:                               # %while.end15
	daddiu	$2, $fp, 24
	daddu	$1, $2, $3
	lbu	$3, 56($fp)
	sb	$3, 0($1)
	lbu	$3, 24($fp)
	beq	$3, $zero, $BB22_18
	nop
# BB#13:
	daddiu	$1, $zero, 9
	dsll	$4, $1, 36
	daddiu	$1, $4, 127
	dsll	$1, $1, 24
	daddiu	$5, $1, 4
$BB22_14:                               # %while.body.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_16 Depth 2
	lw	$1, 0($5)
	j	$BB22_16
	nop
$BB22_15:                               # %while.body.i.i
                                        #   in Loop: Header=BB22_16 Depth=2
	daddiu	$1, $4, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB22_16:                               # %while.body.i.i
                                        #   Parent Loop BB22_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB22_15
	nop
# BB#17:                                # %writeUARTChar.exit.i
                                        #   in Loop: Header=BB22_14 Depth=1
	daddiu	$1, $4, 127
	dsll	$1, $1, 24
	sb	$3, 0($1)
	daddiu	$1, $2, 1
	lbu	$3, 1($2)
	bne	$3, $zero, $BB22_14
	move	$2, $1
$BB22_18:                               # %writeString.exit
	move	$sp, $fp
	ld	$fp, 88($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 96
	.set	at
	.set	macro
	.set	reorder
	.end	writeDigit
$tmp91:
	.size	writeDigit, ($tmp91)-writeDigit

	.globl	readUARTChar
	.align	3
	.type	readUARTChar,@function
	.set	nomips16                # @readUARTChar
	.ent	readUARTChar
readUARTChar:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	daddiu	$1, $zero, 9
	lui	$3, 128
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$2, $1, 24
$BB23_1:                                # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	lw	$4, 0($2)
	and	$1, $4, $3
	beq	$1, $zero, $BB23_1
	nop
# BB#2:                                 # %while.end
	sra	$2, $4, 24
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	readUARTChar
$tmp95:
	.size	readUARTChar, ($tmp95)-readUARTChar

	.globl	arithmaticTest
	.align	3
	.type	arithmaticTest,@function
	.set	nomips16                # @arithmaticTest
	.ent	arithmaticTest
arithmaticTest:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	arithmaticTest
$tmp99:
	.size	arithmaticTest, ($tmp99)-arithmaticTest

	.globl	in
	.align	3
	.type	in,@function
	.set	nomips16                # @in
	.ent	in
in:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	and $t0, $a0, $a0
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	in
$tmp103:
	.size	in, ($tmp103)-in

	.globl	out
	.align	3
	.type	out,@function
	.set	nomips16                # @out
	.ent	out
out:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	and $v0, $t0, $t0
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	out
$tmp107:
	.size	out, ($tmp107)-out

	.globl	CoProFPTestEval
	.align	3
	.type	CoProFPTestEval,@function
	.set	nomips16                # @CoProFPTestEval
	.ent	CoProFPTestEval
CoProFPTestEval:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	lui	$1, %hi(%neg(%gp_rel(CoProFPTestEval)))
	bne	$4, $5, $BB27_2
	daddu	$2, $1, $25
# BB#1:                                 # %if.end
	addiu	$2, $zero, -1
	j	$BB27_52
	movz	$2, $zero, $7
$BB27_2:                                # %if.then
	daddiu	$1, $zero, 5
	daddiu	$2, $2, %lo(%neg(%gp_rel(CoProFPTestEval)))
	sll	$3, $6, 0
	addiu	$6, $zero, 0
	addiu	$11, $zero, 16
	dsll	$7, $1, 61
	daddiu	$1, $zero, 9
	ld	$9, %got_page($.str)($2)
	dsll	$8, $1, 36
	daddiu	$1, $8, 127
	dsll	$1, $1, 24
	daddiu	$10, $1, 4
$BB27_3:                                # %for.body.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_5 Depth 2
	lw	$1, 0($10)
	j	$BB27_5
	nop
$BB27_4:                                # %while.body.i.i
                                        #   in Loop: Header=BB27_5 Depth=2
	daddiu	$1, $8, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB27_5:                                # %while.body.i.i
                                        #   Parent Loop BB27_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB27_4
	nop
# BB#6:                                 # %writeUARTChar.exit.i
                                        #   in Loop: Header=BB27_3 Depth=1
	dsrl	$13, $3, 60
	sltu	$1, $3, $7
	addiu	$6, $6, 1
	dsll	$3, $3, 4
	daddiu	$12, $13, 55
	ori	$13, $13, 48
	movn	$12, $13, $1
	sll	$1, $12, 0
	daddiu	$12, $8, 127
	dsll	$12, $12, 24
	bne	$6, $11, $BB27_3
	sb	$1, 0($12)
# BB#7:
	daddiu	$1, $zero, 9
	daddiu	$3, $9, %got_ofst($.str)
	addiu	$7, $zero, 32
	dsll	$6, $1, 36
	daddiu	$1, $6, 127
	dsll	$1, $1, 24
	daddiu	$8, $1, 4
$BB27_8:                                # %while.body.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_10 Depth 2
	lw	$1, 0($8)
	j	$BB27_10
	nop
$BB27_9:                                # %while.body.i.i9
                                        #   in Loop: Header=BB27_10 Depth=2
	daddiu	$1, $6, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB27_10:                               # %while.body.i.i9
                                        #   Parent Loop BB27_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB27_9
	nop
# BB#11:                                # %writeUARTChar.exit.i10
                                        #   in Loop: Header=BB27_8 Depth=1
	daddiu	$1, $6, 127
	dsll	$1, $1, 24
	sb	$7, 0($1)
	daddiu	$1, $3, 1
	lbu	$7, 1($3)
	bne	$7, $zero, $BB27_8
	move	$3, $1
# BB#12:
	daddiu	$1, $zero, 5
	ld	$2, %got_page($.str1)($2)
	addiu	$3, $zero, 0
	addiu	$9, $zero, 16
	dsll	$6, $1, 61
	daddiu	$1, $zero, 9
	dsll	$7, $1, 36
	daddiu	$1, $7, 127
	dsll	$1, $1, 24
	daddiu	$8, $1, 4
$BB27_13:                               # %for.body.i21
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_15 Depth 2
	lw	$1, 0($8)
	j	$BB27_15
	nop
$BB27_14:                               # %while.body.i.i24
                                        #   in Loop: Header=BB27_15 Depth=2
	daddiu	$1, $7, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB27_15:                               # %while.body.i.i24
                                        #   Parent Loop BB27_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB27_14
	nop
# BB#16:                                # %writeUARTChar.exit.i28
                                        #   in Loop: Header=BB27_13 Depth=1
	dsrl	$11, $4, 60
	sltu	$1, $4, $6
	addiu	$3, $3, 1
	dsll	$4, $4, 4
	daddiu	$10, $11, 55
	ori	$11, $11, 48
	movn	$10, $11, $1
	sll	$1, $10, 0
	daddiu	$10, $7, 127
	dsll	$10, $10, 24
	bne	$3, $9, $BB27_13
	sb	$1, 0($10)
# BB#17:
	daddiu	$1, $zero, 9
	daddiu	$2, $2, %got_ofst($.str1)
	addiu	$4, $zero, 32
	dsll	$3, $1, 36
	daddiu	$1, $3, 127
	dsll	$1, $1, 24
	daddiu	$6, $1, 4
$BB27_18:                               # %while.body.i33
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_20 Depth 2
	lw	$1, 0($6)
	j	$BB27_20
	nop
$BB27_19:                               # %while.body.i.i36
                                        #   in Loop: Header=BB27_20 Depth=2
	daddiu	$1, $3, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB27_20:                               # %while.body.i.i36
                                        #   Parent Loop BB27_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB27_19
	nop
# BB#21:                                # %writeUARTChar.exit.i39
                                        #   in Loop: Header=BB27_18 Depth=1
	daddiu	$1, $3, 127
	dsll	$1, $1, 24
	sb	$4, 0($1)
	daddiu	$1, $2, 1
	lbu	$4, 1($2)
	bne	$4, $zero, $BB27_18
	move	$2, $1
# BB#22:
	daddiu	$1, $zero, 5
	addiu	$2, $zero, 0
	addiu	$7, $zero, 16
	dsll	$3, $1, 61
	daddiu	$1, $zero, 9
	dsll	$4, $1, 36
	daddiu	$1, $4, 127
	dsll	$1, $1, 24
	daddiu	$6, $1, 4
$BB27_23:                               # %for.body.i51
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_25 Depth 2
	lw	$1, 0($6)
	j	$BB27_25
	nop
$BB27_24:                               # %while.body.i.i54
                                        #   in Loop: Header=BB27_25 Depth=2
	daddiu	$1, $4, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB27_25:                               # %while.body.i.i54
                                        #   Parent Loop BB27_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB27_24
	nop
# BB#26:                                # %writeUARTChar.exit.i58
                                        #   in Loop: Header=BB27_23 Depth=1
	dsrl	$9, $5, 60
	sltu	$1, $5, $3
	addiu	$2, $2, 1
	dsll	$5, $5, 4
	daddiu	$8, $9, 55
	ori	$9, $9, 48
	movn	$8, $9, $1
	sll	$1, $8, 0
	daddiu	$8, $4, 127
	dsll	$8, $8, 24
	bne	$2, $7, $BB27_23
	sb	$1, 0($8)
# BB#27:                                # %while.body.i63.preheader
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$2, $1, 24
	j	$BB27_29
	daddiu	$3, $2, 4
$BB27_28:                               # %while.body.i.i66
                                        #   in Loop: Header=BB27_29 Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB27_29:                               # %while.body.i.i66
                                        # =>This Inner Loop Header: Depth=1
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB27_28
	nop
# BB#30:                                # %writeUARTChar.exit.i69
	addiu	$1, $zero, 32
	sb	$1, 0($2)
	lw	$1, 0($3)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB27_33
	nop
# BB#31:
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$1, $1, 24
	daddiu	$2, $1, 4
$BB27_32:                               # %while.body.i.i66.1
                                        # =>This Inner Loop Header: Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
	lw	$1, 0($2)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB27_32
	nop
$BB27_33:                               # %writeUARTChar.exit.i69.1
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 60
	sb	$1, 0($2)
	j	$BB27_35
	daddiu	$3, $2, 4
$BB27_34:                               # %while.body.i.i66.2
                                        #   in Loop: Header=BB27_35 Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB27_35:                               # %while.body.i.i66.2
                                        # =>This Inner Loop Header: Depth=1
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB27_34
	nop
# BB#36:                                # %writeUARTChar.exit.i69.2
	addiu	$1, $zero, 32
	sb	$1, 0($2)
	lw	$1, 0($3)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB27_39
	nop
# BB#37:
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$1, $1, 24
	daddiu	$2, $1, 4
$BB27_38:                               # %while.body.i.i66.3
                                        # =>This Inner Loop Header: Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
	lw	$1, 0($2)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB27_38
	nop
$BB27_39:                               # %writeUARTChar.exit.i69.3
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 103
	sb	$1, 0($2)
	j	$BB27_41
	daddiu	$3, $2, 4
$BB27_40:                               # %while.body.i.i66.4
                                        #   in Loop: Header=BB27_41 Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB27_41:                               # %while.body.i.i66.4
                                        # =>This Inner Loop Header: Depth=1
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB27_40
	nop
# BB#42:                                # %writeUARTChar.exit.i69.4
	addiu	$1, $zero, 111
	sb	$1, 0($2)
	lw	$1, 0($3)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB27_45
	nop
# BB#43:
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$1, $1, 24
	daddiu	$2, $1, 4
$BB27_44:                               # %while.body.i.i66.5
                                        # =>This Inner Loop Header: Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
	lw	$1, 0($2)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB27_44
	nop
$BB27_45:                               # %writeUARTChar.exit.i69.5
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 116
	sb	$1, 0($2)
	j	$BB27_47
	daddiu	$3, $2, 4
$BB27_46:                               # %while.body.i.i66.6
                                        #   in Loop: Header=BB27_47 Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB27_47:                               # %while.body.i.i66.6
                                        # =>This Inner Loop Header: Depth=1
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB27_46
	nop
# BB#48:                                # %writeUARTChar.exit.i69.6
	addiu	$1, $zero, 32
	sb	$1, 0($2)
	lw	$1, 0($3)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB27_51
	nop
# BB#49:
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$1, $1, 24
	daddiu	$2, $1, 4
$BB27_50:                               # %while.body.i.i66.7
                                        # =>This Inner Loop Header: Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
	lw	$1, 0($2)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB27_50
	nop
$BB27_51:                               # %writeUARTChar.exit.i69.7
	daddiu	$1, $zero, 9
	addiu	$2, $zero, 10
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$1, $1, 24
	sb	$2, 0($1)
	addiu	$2, $zero, -1
$BB27_52:                               # %return
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	CoProFPTestEval
$tmp111:
	.size	CoProFPTestEval, ($tmp111)-CoProFPTestEval

	.globl	CoProFPTest
	.align	3
	.type	CoProFPTest,@function
	.set	nomips16                # @CoProFPTest
	.ent	CoProFPTest
CoProFPTest:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	CoProFPTest
$tmp115:
	.size	CoProFPTest, ($tmp115)-CoProFPTest

	.globl	ll
	.align	3
	.type	ll,@function
	.set	nomips16                # @ll
	.ent	ll
ll:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	ll $v0, 0($a0)
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	ll
$tmp119:
	.size	ll, ($tmp119)-ll

	.globl	sc
	.align	3
	.type	sc,@function
	.set	nomips16                # @sc
	.ent	sc
sc:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	sc $a1, 0($a0)
	#NO_APP
	#APP
	move $v0, $a1
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	sc
$tmp123:
	.size	sc, ($tmp123)-sc

	.globl	testNset
	.align	3
	.type	testNset,@function
	.set	nomips16                # @testNset
	.ent	testNset
testNset:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	ll $v0, 0($a0)
	#NO_APP
	#APP
	sc $a1, 0($a0)
	#NO_APP
	#APP
	move $v0, $a1
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	testNset
$tmp127:
	.size	testNset, ($tmp127)-testNset

	.globl	getCount
	.align	3
	.type	getCount,@function
	.set	nomips16                # @getCount
	.ent	getCount
getCount:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	dmfc0 $2, $9
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	getCount
$tmp131:
	.size	getCount, ($tmp131)-getCount

	.globl	debugTlb
	.align	3
	.type	debugTlb,@function
	.set	nomips16                # @debugTlb
	.ent	debugTlb
debugTlb:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	mtc0 $0, $25
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	debugTlb
$tmp135:
	.size	debugTlb, ($tmp135)-debugTlb

	.globl	debugRegs
	.align	3
	.type	debugRegs,@function
	.set	nomips16                # @debugRegs
	.ent	debugRegs
debugRegs:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	mtc0 $0, $26
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	debugRegs
$tmp139:
	.size	debugRegs, ($tmp139)-debugRegs

	.globl	cp0Regs
	.align	3
	.type	cp0Regs,@function
	.set	nomips16                # @cp0Regs
	.ent	cp0Regs
cp0Regs:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	mtc0 $0, $27
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	cp0Regs
$tmp143:
	.size	cp0Regs, ($tmp143)-cp0Regs

	.globl	causeTrap
	.align	3
	.type	causeTrap,@function
	.set	nomips16                # @causeTrap
	.ent	causeTrap
causeTrap:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	addi $v0, $0, 10
	#NO_APP
	#APP
	addi $a0, $0, 0x98
	#NO_APP
	#APP
	dsll32 $a0,$a0,24
	#NO_APP
	#APP
	tgei $v0, 5
	#NO_APP
	#APP
	sd $0, 10($a0)
	#NO_APP
	#APP
	addi $v0, $0, 20
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	causeTrap
$tmp147:
	.size	causeTrap, ($tmp147)-causeTrap

	.globl	setInterrupts
	.align	3
	.type	setInterrupts,@function
	.set	nomips16                # @setInterrupts
	.ent	setInterrupts
setInterrupts:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	daddiu	$1, $zero, 9
	addiu	$2, $zero, 1
	#APP
	mfc0 $a0, $12
	#NO_APP
	#APP
	ori $a0, $a0, 0xFF01
	#NO_APP
	#APP
	mtc0 $a0, $12
	#NO_APP
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4128
	sb	$2, 0($1)
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	setInterrupts
$tmp151:
	.size	setInterrupts, ($tmp151)-setInterrupts

	.globl	drawRect
	.align	3
	.type	drawRect,@function
	.set	nomips16                # @drawRect
	.ent	drawRect
drawRect:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	beq	$5, $zero, $BB38_8
	nop
# BB#1:                                 # %for.cond.preheader
	slti	$1, $9, 1
	bne	$1, $zero, $BB38_18
	nop
# BB#2:                                 # %for.cond.preheader
	blez	$8, $BB38_18
	nop
# BB#3:
	addiu	$2, $zero, 0
	j	$BB38_5
	move	$3, $8
$BB38_4:                                # %for.body5.lr.ph.us
                                        #   in Loop: Header=BB38_5 Depth=1
	move	$3, $8
$BB38_5:                                # %for.body5.us
                                        # =>This Inner Loop Header: Depth=1
	addiu	$3, $3, -1
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	bne	$3, $zero, $BB38_5
	nop
# BB#6:                                 # %for.inc11.us
                                        #   in Loop: Header=BB38_5 Depth=1
	addiu	$2, $2, 1
	beq	$2, $9, $BB38_18
	nop
# BB#7:                                 # %for.inc11.us
                                        #   in Loop: Header=BB38_5 Depth=1
	j	$BB38_4
	nop
$BB38_8:                                # %for.cond14.preheader
	blez	$8, $BB38_13
	nop
# BB#9:
	move	$2, $8
$BB38_10:                               # %for.body17
                                        # =>This Inner Loop Header: Depth=1
	addiu	$2, $2, -1
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	bne	$2, $zero, $BB38_10
	nop
# BB#11:                                # %for.cond25.preheader
	blez	$8, $BB38_13
	nop
$BB38_12:                               # %for.body28
                                        # =>This Inner Loop Header: Depth=1
	addiu	$8, $8, -1
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	bne	$8, $zero, $BB38_12
	nop
$BB38_13:                               # %for.cond39.preheader
	blez	$9, $BB38_18
	nop
# BB#14:
	move	$2, $9
$BB38_15:                               # %for.body42
                                        # =>This Inner Loop Header: Depth=1
	addiu	$2, $2, -1
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	bne	$2, $zero, $BB38_15
	nop
# BB#16:                                # %for.cond51.preheader
	blez	$9, $BB38_18
	nop
$BB38_17:                               # %for.body54
                                        # =>This Inner Loop Header: Depth=1
	addiu	$9, $9, -1
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	bne	$9, $zero, $BB38_17
	nop
$BB38_18:                               # %if.end
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	drawRect
$tmp155:
	.size	drawRect, ($tmp155)-drawRect

	.globl	draw3DRect
	.align	3
	.type	draw3DRect,@function
	.set	nomips16                # @draw3DRect
	.ent	draw3DRect
draw3DRect:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	addiu	$2, $7, -2
	slti	$3, $2, 1
	bne	$3, $zero, $BB39_2
	nop
$BB39_1:                                # %for.body5.us.i
                                        # =>This Inner Loop Header: Depth=1
	addiu	$2, $2, -1
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	bne	$2, $zero, $BB39_1
	nop
$BB39_2:                                # %drawRect.exit
	addiu	$2, $8, -2
	slti	$1, $2, 1
	bne	$1, $zero, $BB39_10
	nop
# BB#3:                                 # %for.body5.lr.ph.us.i40.preheader
	move	$4, $2
$BB39_4:                                # %for.body5.lr.ph.us.i40
                                        # =>This Inner Loop Header: Depth=1
	addiu	$4, $4, -1
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	bne	$4, $zero, $BB39_4
	nop
# BB#5:                                 # %drawRect.exit41
	bne	$3, $zero, $BB39_10
	nop
# BB#6:                                 # %for.body5.lr.ph.us.i52.preheader
	addiu	$3, $7, -2
	addiu	$4, $zero, 0
	j	$BB39_8
	move	$5, $3
$BB39_7:                                # %for.body5.lr.ph.us.i52
                                        #   in Loop: Header=BB39_8 Depth=1
	move	$5, $3
$BB39_8:                                # %for.body5.us.i50
                                        # =>This Inner Loop Header: Depth=1
	addiu	$5, $5, -1
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	bne	$5, $zero, $BB39_8
	nop
# BB#9:                                 # %for.inc11.us.i46
                                        #   in Loop: Header=BB39_8 Depth=1
	addiu	$4, $4, 1
	bne	$4, $2, $BB39_7
	nop
$BB39_10:                               # %drawRect.exit53
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	draw3DRect
$tmp159:
	.size	draw3DRect, ($tmp159)-draw3DRect

	.globl	malloc
	.align	3
	.type	malloc,@function
	.set	nomips16                # @malloc
	.ent	malloc
malloc:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	lui	$1, %hi(%neg(%gp_rel(malloc)))
	daddiu	$5, $zero, 19
	daddu	$1, $1, $25
	daddiu	$1, $1, %lo(%neg(%gp_rel(malloc)))
	ld	$3, %got_disp(heap)($1)
	dsll	$1, $5, 31
	daddiu	$1, $1, 1
	dsll	$1, $1, 28
	daddiu	$1, $1, -1
	ld	$2, 0($3)
	sltu	$1, $1, $2
	bne	$1, $zero, $BB40_2
	nop
# BB#1:                                 # %if.then
	j	$BB40_3
	daddu	$4, $2, $4
$BB40_2:
	dsll	$4, $5, 59
$BB40_3:                                # %if.end
	daddiu	$1, $zero, -16
	sd	$4, 0($3)
	and	$2, $2, $1
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	malloc
$tmp163:
	.size	malloc, ($tmp163)-malloc

	.globl	free
	.align	3
	.type	free,@function
	.set	nomips16                # @free
	.ent	free
free:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	free
$tmp167:
	.size	free, ($tmp167)-free

	.globl	freeChar
	.align	3
	.type	freeChar,@function
	.set	nomips16                # @freeChar
	.ent	freeChar
freeChar:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	addiu	$2, $zero, 0
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	freeChar
$tmp171:
	.size	freeChar, ($tmp171)-freeChar

	.globl	freeInt
	.align	3
	.type	freeInt,@function
	.set	nomips16                # @freeInt
	.ent	freeInt
freeInt:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	addiu	$2, $zero, 0
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	freeInt
$tmp175:
	.size	freeInt, ($tmp175)-freeInt

	.globl	randomIndexArray
	.align	3
	.type	randomIndexArray,@function
	.set	nomips16                # @randomIndexArray
	.ent	randomIndexArray
randomIndexArray:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	lui	$1, %hi(%neg(%gp_rel(randomIndexArray)))
	daddiu	$5, $zero, 19
	daddu	$1, $1, $25
	daddiu	$1, $1, %lo(%neg(%gp_rel(randomIndexArray)))
	ld	$3, %got_disp(heap)($1)
	dsll	$1, $5, 31
	daddiu	$1, $1, 1
	dsll	$1, $1, 28
	daddiu	$1, $1, -1
	ld	$2, 0($3)
	sltu	$1, $1, $2
	bne	$1, $zero, $BB44_2
	nop
# BB#1:                                 # %if.then.i
	sll	$1, $4, 0
	dsll	$1, $1, 2
	j	$BB44_3
	daddu	$5, $2, $1
$BB44_2:
	dsll	$5, $5, 59
$BB44_3:                                # %malloc.exit
	daddiu	$1, $zero, -16
	and	$2, $2, $1
	slti	$1, $4, 1
	bne	$1, $zero, $BB44_6
	sd	$5, 0($3)
# BB#4:
	addiu	$3, $zero, 0
$BB44_5:                                # %for.body
                                        # =>This Inner Loop Header: Depth=1
	#APP
	dmfc0 $1, $9
	#NO_APP
	sll	$5, $3, 0
	addiu	$3, $3, 1
	div	$zero, $1, $4
	dsll	$5, $5, 2
	daddu	$5, $2, $5
	mfhi	$1
	bne	$4, $3, $BB44_5
	sw	$1, 0($5)
$BB44_6:                                # %for.end
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	randomIndexArray
$tmp179:
	.size	randomIndexArray, ($tmp179)-randomIndexArray

	.globl	randomArray
	.align	3
	.type	randomArray,@function
	.set	nomips16                # @randomArray
	.ent	randomArray
randomArray:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	lui	$1, %hi(%neg(%gp_rel(randomArray)))
	daddiu	$5, $zero, 19
	daddu	$1, $1, $25
	daddiu	$1, $1, %lo(%neg(%gp_rel(randomArray)))
	ld	$3, %got_disp(heap)($1)
	dsll	$1, $5, 31
	daddiu	$1, $1, 1
	dsll	$1, $1, 28
	daddiu	$1, $1, -1
	ld	$2, 0($3)
	sltu	$1, $1, $2
	bne	$1, $zero, $BB45_2
	nop
# BB#1:                                 # %if.then.i
	sll	$1, $4, 0
	j	$BB45_3
	daddu	$5, $2, $1
$BB45_2:
	dsll	$5, $5, 59
$BB45_3:                                # %malloc.exit
	daddiu	$1, $zero, -16
	and	$2, $2, $1
	slti	$1, $4, 1
	bne	$1, $zero, $BB45_10
	sd	$5, 0($3)
# BB#4:                                 # %for.body.lr.ph
	addiu	$1, $zero, -4
	and	$3, $4, $1
	beq	$3, $zero, $BB45_8
	addiu	$5, $zero, 0
# BB#5:                                 # %vector.ph
	addiu	$5, $zero, 0
$BB45_6:                                # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	addiu	$1, $5, 2
	sll	$6, $5, 0
	addiu	$8, $5, 1
	xor	$7, $5, $4
	xor	$1, $1, $4
	daddu	$6, $2, $6
	xor	$8, $8, $4
	sb	$8, 1($6)
	sb	$7, 0($6)
	sb	$1, 2($6)
	addiu	$1, $5, 3
	addiu	$5, $5, 4
	xor	$1, $1, $4
	bne	$3, $5, $BB45_6
	sb	$1, 3($6)
# BB#7:
	move	$5, $3
$BB45_8:                                # %middle.block
	beq	$5, $4, $BB45_10
	nop
$BB45_9:                                # %for.body
                                        # =>This Inner Loop Header: Depth=1
	sll	$3, $5, 0
	xor	$1, $5, $4
	addiu	$5, $5, 1
	daddu	$3, $2, $3
	bne	$4, $5, $BB45_9
	sb	$1, 0($3)
$BB45_10:                               # %for.end
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	randomArray
$tmp183:
	.size	randomArray, ($tmp183)-randomArray

	.globl	raise
	.align	3
	.type	raise,@function
	.set	nomips16                # @raise
	.ent	raise
raise:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	slti	$1, $5, 1
	bne	$1, $zero, $BB46_2
	addiu	$2, $zero, 1
$BB46_1:                                # %for.body
                                        # =>This Inner Loop Header: Depth=1
	addiu	$5, $5, -1
	bne	$5, $zero, $BB46_1
	mul	$2, $2, $4
$BB46_2:                                # %for.end
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	raise
$tmp187:
	.size	raise, ($tmp187)-raise

	.globl	arrayBench
	.align	3
	.type	arrayBench,@function
	.set	nomips16                # @arrayBench
	.ent	arrayBench
arrayBench:
	.frame	$fp,128,$ra
	.mask 	0x00000000,0
	.fmask	0xc0ff0000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -128
	sd	$ra, 120($sp)           # 8-byte Folded Spill
	sd	$fp, 112($sp)           # 8-byte Folded Spill
	sd	$23, 104($sp)           # 8-byte Folded Spill
	sd	$22, 96($sp)            # 8-byte Folded Spill
	sd	$21, 88($sp)            # 8-byte Folded Spill
	sd	$20, 80($sp)            # 8-byte Folded Spill
	sd	$19, 72($sp)            # 8-byte Folded Spill
	sd	$18, 64($sp)            # 8-byte Folded Spill
	sd	$17, 56($sp)            # 8-byte Folded Spill
	sd	$16, 48($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	lui	$1, %hi(%neg(%gp_rel(arrayBench)))
	daddiu	$4, $zero, 0
	addiu	$5, $zero, 0
	addiu	$6, $zero, 1
	daddiu	$10, $zero, -16
	addiu	$13, $zero, 32
	addiu	$14, $zero, 115
	addiu	$16, $zero, 58
	addiu	$18, $zero, 16
	addiu	$21, $zero, 10
	addiu	$22, $zero, 6
	sd	$zero, 40($fp)
	sd	$zero, 32($fp)
	sd	$zero, 24($fp)
	sd	$zero, 16($fp)
	sd	$zero, 8($fp)
	sd	$zero, 0($fp)
	daddu	$1, $1, $25
	daddiu	$2, $1, %lo(%neg(%gp_rel(arrayBench)))
	daddiu	$1, $zero, 19
	dsll	$7, $1, 31
	dsll	$9, $1, 59
	daddiu	$1, $zero, 9
	dsll	$11, $1, 36
	daddiu	$3, $7, 1
	daddiu	$1, $11, 127
	dsll	$3, $3, 28
	dsll	$1, $1, 24
	daddiu	$8, $3, -1
	daddiu	$12, $1, 4
	daddiu	$1, $zero, 5
	dsll	$17, $1, 61
$BB47_1:                                # %for.body6
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_4 Depth 2
                                        #     Child Loop BB47_9 Depth 2
                                        #     Child Loop BB47_13 Depth 2
                                        #     Child Loop BB47_16 Depth 2
                                        #     Child Loop BB47_19 Depth 2
                                        #     Child Loop BB47_22 Depth 2
                                        #     Child Loop BB47_25 Depth 2
                                        #     Child Loop BB47_28 Depth 2
                                        #     Child Loop BB47_31 Depth 2
                                        #     Child Loop BB47_33 Depth 2
                                        #       Child Loop BB47_35 Depth 3
                                        #     Child Loop BB47_39 Depth 2
                                        #     Child Loop BB47_42 Depth 2
                                        #     Child Loop BB47_45 Depth 2
                                        #     Child Loop BB47_48 Depth 2
                                        #     Child Loop BB47_51 Depth 2
                                        #     Child Loop BB47_54 Depth 2
                                        #     Child Loop BB47_56 Depth 2
                                        #       Child Loop BB47_58 Depth 3
                                        #     Child Loop BB47_62 Depth 2
	ld	$1, %got_disp(heap)($2)
	ld	$3, 0($1)
	sltu	$1, $8, $3
	bne	$1, $zero, $BB47_3
	move	$15, $9
# BB#2:                                 # %if.then.i.i
                                        #   in Loop: Header=BB47_1 Depth=1
	sll	$1, $6, 0
	dsll	$1, $1, 2
	daddu	$15, $3, $1
$BB47_3:                                # %malloc.exit.i
                                        #   in Loop: Header=BB47_1 Depth=1
	ld	$1, %got_disp(heap)($2)
	slti	$25, $6, 1
	sd	$15, 0($1)
	and	$15, $3, $10
	bne	$25, $zero, $BB47_5
	addiu	$3, $zero, 0
$BB47_4:                                # %for.body.i
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#APP
	dmfc0 $1, $9
	#NO_APP
	sll	$24, $3, 0
	addiu	$3, $3, 1
	div	$zero, $1, $6
	dsll	$24, $24, 2
	daddu	$24, $15, $24
	mfhi	$1
	bne	$6, $3, $BB47_4
	sw	$1, 0($24)
$BB47_5:                                # %randomIndexArray.exit
                                        #   in Loop: Header=BB47_1 Depth=1
	#APP
	dmfc0 $24, $9
	#NO_APP
	ld	$1, %got_disp(heap)($2)
	sll	$23, $6, 0
	ld	$19, 0($1)
	daddiu	$1, $7, 1
	dsll	$1, $1, 28
	daddiu	$1, $1, -1
	sltu	$1, $1, $19
	bne	$1, $zero, $BB47_7
	move	$3, $9
# BB#6:                                 # %if.then.i
                                        #   in Loop: Header=BB47_1 Depth=1
	daddu	$3, $19, $23
$BB47_7:                                # %malloc.exit
                                        #   in Loop: Header=BB47_1 Depth=1
	ld	$1, %got_disp(heap)($2)
	sd	$3, 0($1)
	bne	$25, $zero, $BB47_11
	daddiu	$3, $zero, 0
# BB#8:                                 #   in Loop: Header=BB47_1 Depth=1
	and	$25, $19, $10
	addiu	$3, $zero, 0
	addiu	$19, $zero, 0
	
	dsll $3, $6, 2
	daddu $3, $15, $3
	daddiu $3, $3, 4
$BB47_9:                                # %for.body13
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($15)
	daddiu	$15, $15, 4
	daddu	$1, $25, $1
	lb	$1, 0($1)
	bne	$3, $15, $BB47_9
	addu	$19, $1, $19
# BB#10:                                # %for.cond10.for.end21_crit_edge
                                        #   in Loop: Header=BB47_1 Depth=1
	sll	$3, $19, 0
$BB47_11:                               # %for.end21
                                        #   in Loop: Header=BB47_1 Depth=1
	#APP
	dmfc0 $1, $9
	#NO_APP
	subu	$15, $1, $24
	slt	$24, $zero, $15
	dsll	$25, $24, 32
	lw	$1, 0($12)
	j	$BB47_13
	nop
$BB47_12:                               # %while.body.i.i104
                                        #   in Loop: Header=BB47_13 Depth=2
	daddiu	$1, $11, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB47_13:                               # %while.body.i.i104
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_12
	nop
# BB#14:                                # %writeUARTChar.exit.i107
                                        #   in Loop: Header=BB47_1 Depth=1
	daddiu	$1, $11, 127
	dsll	$19, $1, 24
	sb	$13, 0($19)
	j	$BB47_16
	daddiu	$ra, $19, 4
$BB47_15:                               # %while.body.i.i104.1
                                        #   in Loop: Header=BB47_16 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB47_16:                               # %while.body.i.i104.1
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($ra)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_15
	nop
# BB#17:                                # %writeUARTChar.exit.i107.1
                                        #   in Loop: Header=BB47_1 Depth=1
	sb	$14, 0($19)
	lw	$1, 0($ra)
	j	$BB47_19
	nop
$BB47_18:                               # %while.body.i.i104.2
                                        #   in Loop: Header=BB47_19 Depth=2
	daddiu	$1, $11, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB47_19:                               # %while.body.i.i104.2
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_18
	nop
# BB#20:                                # %writeUARTChar.exit.i107.2
                                        #   in Loop: Header=BB47_1 Depth=1
	daddiu	$1, $11, 127
	dsll	$19, $1, 24
	addiu	$1, $zero, 105
	sb	$1, 0($19)
	j	$BB47_22
	daddiu	$ra, $19, 4
$BB47_21:                               # %while.body.i.i104.3
                                        #   in Loop: Header=BB47_22 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB47_22:                               # %while.body.i.i104.3
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($ra)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_21
	nop
# BB#23:                                # %writeUARTChar.exit.i107.3
                                        #   in Loop: Header=BB47_1 Depth=1
	addiu	$1, $zero, 122
	sb	$1, 0($19)
	lw	$1, 0($ra)
	j	$BB47_25
	nop
$BB47_24:                               # %while.body.i.i104.4
                                        #   in Loop: Header=BB47_25 Depth=2
	daddiu	$1, $11, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB47_25:                               # %while.body.i.i104.4
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_24
	nop
# BB#26:                                # %writeUARTChar.exit.i107.4
                                        #   in Loop: Header=BB47_1 Depth=1
	daddiu	$1, $11, 127
	dsll	$19, $1, 24
	addiu	$1, $zero, 101
	sb	$1, 0($19)
	j	$BB47_28
	daddiu	$ra, $19, 4
$BB47_27:                               # %while.body.i.i104.5
                                        #   in Loop: Header=BB47_28 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB47_28:                               # %while.body.i.i104.5
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($ra)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_27
	nop
# BB#29:                                # %writeUARTChar.exit.i107.5
                                        #   in Loop: Header=BB47_1 Depth=1
	sb	$16, 0($19)
	lw	$1, 0($ra)
	j	$BB47_31
	nop
$BB47_30:                               # %while.body.i.i104.6
                                        #   in Loop: Header=BB47_31 Depth=2
	daddiu	$1, $11, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB47_31:                               # %while.body.i.i104.6
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_30
	nop
# BB#32:                                # %writeUARTChar.exit.i107.6
                                        #   in Loop: Header=BB47_1 Depth=1
	sll	$ra, $15, 0
	daddiu	$1, $11, 127
	dsrl	$15, $25, 32
	addiu	$19, $zero, 0
	dsll	$25, $1, 24
	movz	$ra, $zero, $24
	sb	$13, 0($25)
$BB47_33:                               # %for.body.i119
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_35 Depth 3
	j	$BB47_35
	daddiu	$1, $25, 4
$BB47_34:                               # %while.body.i.i122
                                        #   in Loop: Header=BB47_35 Depth=3
	daddiu	$1, $11, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB47_35:                               # %while.body.i.i122
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_34
	nop
# BB#36:                                # %writeUARTChar.exit.i126
                                        #   in Loop: Header=BB47_33 Depth=2
	dsrl	$20, $23, 60
	sltu	$1, $23, $17
	addiu	$19, $19, 1
	dsll	$23, $23, 4
	daddiu	$24, $20, 55
	ori	$20, $20, 48
	movn	$24, $20, $1
	sll	$1, $24, 0
	daddiu	$24, $11, 127
	dsll	$24, $24, 24
	bne	$19, $18, $BB47_33
	sb	$1, 0($24)
# BB#37:                                # %while.body.i131.loopexit
                                        #   in Loop: Header=BB47_1 Depth=1
	j	$BB47_39
	daddiu	$1, $24, 4
$BB47_38:                               # %while.body.i.i134
                                        #   in Loop: Header=BB47_39 Depth=2
	daddiu	$1, $11, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB47_39:                               # %while.body.i.i134
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_38
	nop
# BB#40:                                # %writeUARTChar.exit.i137
                                        #   in Loop: Header=BB47_1 Depth=1
	daddiu	$1, $11, 127
	dsll	$24, $1, 24
	sb	$13, 0($24)
	j	$BB47_42
	daddiu	$25, $24, 4
$BB47_41:                               # %while.body.i.i134.1
                                        #   in Loop: Header=BB47_42 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB47_42:                               # %while.body.i.i134.1
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($25)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_41
	nop
# BB#43:                                # %writeUARTChar.exit.i137.1
                                        #   in Loop: Header=BB47_1 Depth=1
	sb	$14, 0($24)
	lw	$1, 0($25)
	j	$BB47_45
	nop
$BB47_44:                               # %while.body.i.i134.2
                                        #   in Loop: Header=BB47_45 Depth=2
	daddiu	$1, $11, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB47_45:                               # %while.body.i.i134.2
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_44
	nop
# BB#46:                                # %writeUARTChar.exit.i137.2
                                        #   in Loop: Header=BB47_1 Depth=1
	daddiu	$1, $11, 127
	dsll	$24, $1, 24
	addiu	$1, $zero, 117
	sb	$1, 0($24)
	j	$BB47_48
	daddiu	$25, $24, 4
$BB47_47:                               # %while.body.i.i134.3
                                        #   in Loop: Header=BB47_48 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB47_48:                               # %while.body.i.i134.3
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($25)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_47
	nop
# BB#49:                                # %writeUARTChar.exit.i137.3
                                        #   in Loop: Header=BB47_1 Depth=1
	addiu	$1, $zero, 109
	sb	$1, 0($24)
	lw	$1, 0($25)
	j	$BB47_51
	nop
$BB47_50:                               # %while.body.i.i134.4
                                        #   in Loop: Header=BB47_51 Depth=2
	daddiu	$1, $11, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB47_51:                               # %while.body.i.i134.4
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_50
	nop
# BB#52:                                # %writeUARTChar.exit.i137.4
                                        #   in Loop: Header=BB47_1 Depth=1
	daddiu	$1, $11, 127
	dsll	$24, $1, 24
	sb	$16, 0($24)
	j	$BB47_54
	daddiu	$25, $24, 4
$BB47_53:                               # %while.body.i.i134.5
                                        #   in Loop: Header=BB47_54 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB47_54:                               # %while.body.i.i134.5
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($25)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_53
	nop
# BB#55:                                # %writeUARTChar.exit.i137.5
                                        #   in Loop: Header=BB47_1 Depth=1
	sb	$13, 0($24)
	addiu	$24, $zero, 0
$BB47_56:                               # %for.body.i149
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_58 Depth 3
	daddiu	$1, $11, 127
	dsll	$25, $1, 24
	j	$BB47_58
	daddiu	$19, $25, 4
$BB47_57:                               # %while.body.i.i152
                                        #   in Loop: Header=BB47_58 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB47_58:                               # %while.body.i.i152
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($19)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_57
	nop
# BB#59:                                # %writeUARTChar.exit.i156
                                        #   in Loop: Header=BB47_56 Depth=2
	dsrl	$20, $3, 60
	sltu	$1, $3, $17
	addiu	$24, $24, 1
	dsll	$3, $3, 4
	daddiu	$19, $20, 55
	ori	$20, $20, 48
	movn	$19, $20, $1
	sll	$1, $19, 0
	bne	$24, $18, $BB47_56
	sb	$1, 0($25)
# BB#60:                                # %while.body.i161.loopexit
                                        #   in Loop: Header=BB47_1 Depth=1
	daddiu	$1, $11, 127
	dsll	$3, $1, 24
	j	$BB47_62
	daddiu	$24, $3, 4
$BB47_61:                               # %while.body.i.i164
                                        #   in Loop: Header=BB47_62 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB47_62:                               # %while.body.i.i164
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($24)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_61
	nop
# BB#63:                                # %writeUARTChar.exit.i167
                                        #   in Loop: Header=BB47_1 Depth=1
	ddiv	$zero, $ra, $15
	mul	$6, $6, $21
	sb	$21, 0($3)
	dsll	$4, $4, 3
	daddiu	$3, $fp, 0
	addiu	$5, $5, 1
	daddu	$15, $3, $4
	ld	$4, 0($15)
	mflo	$1
	daddu	$1, $4, $1
	sll	$4, $5, 0
	bne	$5, $22, $BB47_1
	sd	$1, 0($15)
# BB#64:                                # %while.body.i172.preheader
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$4, $1, 24
	j	$BB47_66
	daddiu	$5, $4, 4
$BB47_65:                               # %while.body.i.i175
                                        #   in Loop: Header=BB47_66 Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB47_66:                               # %while.body.i.i175
                                        # =>This Inner Loop Header: Depth=1
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_65
	nop
# BB#67:                                # %writeUARTChar.exit.i178
	addiu	$1, $zero, 10
	sb	$1, 0($4)
	lw	$1, 0($5)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB47_70
	nop
# BB#68:
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$1, $1, 24
	daddiu	$4, $1, 4
$BB47_69:                               # %while.body.i.i175.1
                                        # =>This Inner Loop Header: Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
	lw	$1, 0($4)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_69
	nop
$BB47_70:                               # %writeUARTChar.exit.i178.1
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$4, $1, 24
	addiu	$1, $zero, 83
	sb	$1, 0($4)
	j	$BB47_72
	daddiu	$5, $4, 4
$BB47_71:                               # %while.body.i.i175.2
                                        #   in Loop: Header=BB47_72 Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB47_72:                               # %while.body.i.i175.2
                                        # =>This Inner Loop Header: Depth=1
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_71
	nop
# BB#73:                                # %writeUARTChar.exit.i178.2
	addiu	$1, $zero, 117
	sb	$1, 0($4)
	lw	$1, 0($5)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB47_76
	nop
# BB#74:
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$1, $1, 24
	daddiu	$4, $1, 4
$BB47_75:                               # %while.body.i.i175.3
                                        # =>This Inner Loop Header: Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
	lw	$1, 0($4)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_75
	nop
$BB47_76:                               # %writeUARTChar.exit.i178.3
	daddiu	$1, $zero, 9
	addiu	$5, $zero, 109
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$4, $1, 24
	sb	$5, 0($4)
	j	$BB47_78
	daddiu	$6, $4, 4
$BB47_77:                               # %while.body.i.i175.4
                                        #   in Loop: Header=BB47_78 Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB47_78:                               # %while.body.i.i175.4
                                        # =>This Inner Loop Header: Depth=1
	lw	$1, 0($6)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_77
	nop
# BB#79:                                # %writeUARTChar.exit.i178.4
	sb	$5, 0($4)
	lw	$1, 0($6)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB47_82
	nop
# BB#80:
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$1, $1, 24
	daddiu	$4, $1, 4
$BB47_81:                               # %while.body.i.i175.5
                                        # =>This Inner Loop Header: Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
	lw	$1, 0($4)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_81
	nop
$BB47_82:                               # %writeUARTChar.exit.i178.5
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$4, $1, 24
	addiu	$1, $zero, 97
	sb	$1, 0($4)
	j	$BB47_84
	daddiu	$5, $4, 4
$BB47_83:                               # %while.body.i.i175.6
                                        #   in Loop: Header=BB47_84 Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB47_84:                               # %while.body.i.i175.6
                                        # =>This Inner Loop Header: Depth=1
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_83
	nop
# BB#85:                                # %writeUARTChar.exit.i178.6
	addiu	$1, $zero, 114
	sb	$1, 0($4)
	lw	$1, 0($5)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB47_88
	nop
# BB#86:
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$1, $1, 24
	daddiu	$4, $1, 4
$BB47_87:                               # %while.body.i.i175.7
                                        # =>This Inner Loop Header: Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
	lw	$1, 0($4)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_87
	nop
$BB47_88:                               # %writeUARTChar.exit.i178.7
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$5, $1, 24
	addiu	$1, $zero, 121
	sb	$1, 0($5)
	j	$BB47_90
	daddiu	$6, $5, 4
$BB47_89:                               # %while.body.i.i175.8
                                        #   in Loop: Header=BB47_90 Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB47_90:                               # %while.body.i.i175.8
                                        # =>This Inner Loop Header: Depth=1
	lw	$1, 0($6)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_89
	nop
# BB#91:                                # %writeUARTChar.exit.i178.8
	addiu	$4, $zero, 58
	sb	$4, 0($5)
	lw	$1, 0($6)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB47_94
	nop
# BB#92:
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$1, $1, 24
	daddiu	$5, $1, 4
$BB47_93:                               # %while.body.i.i175.9
                                        # =>This Inner Loop Header: Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_93
	nop
$BB47_94:                               # %writeUARTChar.exit.i178.9
	daddiu	$1, $zero, 9
	addiu	$7, $zero, 10
	addiu	$8, $zero, 0
	addiu	$9, $zero, 115
	addiu	$10, $zero, 105
	addiu	$11, $zero, 122
	addiu	$12, $zero, 101
	addiu	$13, $zero, 32
	addiu	$15, $zero, 16
	addiu	$24, $zero, 116
	addiu	$25, $zero, 109
	addiu	$16, $zero, 48
	addiu	$17, $zero, 120
	addiu	$18, $zero, 6
	dsll	$5, $1, 36
	daddiu	$1, $5, 127
	dsll	$6, $1, 24
	daddiu	$1, $zero, 5
	dsll	$14, $1, 61
	sb	$7, 0($6)
$BB47_95:                               # %for.body44
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_97 Depth 2
                                        #     Child Loop BB47_100 Depth 2
                                        #     Child Loop BB47_103 Depth 2
                                        #     Child Loop BB47_106 Depth 2
                                        #     Child Loop BB47_109 Depth 2
                                        #     Child Loop BB47_112 Depth 2
                                        #     Child Loop BB47_114 Depth 2
                                        #     Child Loop BB47_116 Depth 2
                                        #       Child Loop BB47_118 Depth 3
                                        #     Child Loop BB47_122 Depth 2
                                        #     Child Loop BB47_125 Depth 2
                                        #     Child Loop BB47_128 Depth 2
                                        #     Child Loop BB47_131 Depth 2
                                        #     Child Loop BB47_134 Depth 2
                                        #     Child Loop BB47_137 Depth 2
                                        #     Child Loop BB47_140 Depth 2
                                        #     Child Loop BB47_143 Depth 2
                                        #     Child Loop BB47_145 Depth 2
                                        #       Child Loop BB47_147 Depth 3
                                        #     Child Loop BB47_150 Depth 2
                                        #       Child Loop BB47_152 Depth 3
	sll	$1, $8, 0
	dsll	$1, $1, 3
	daddu	$1, $3, $1
	ld	$19, 0($1)
	j	$BB47_97
	daddiu	$1, $6, 4
$BB47_96:                               # %while.body.i.i186
                                        #   in Loop: Header=BB47_97 Depth=2
	daddiu	$1, $5, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB47_97:                               # %while.body.i.i186
                                        #   Parent Loop BB47_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_96
	nop
# BB#98:                                # %writeUARTChar.exit.i189
                                        #   in Loop: Header=BB47_95 Depth=1
	daddiu	$1, $5, 127
	dsll	$20, $1, 24
	sb	$9, 0($20)
	j	$BB47_100
	daddiu	$21, $20, 4
$BB47_99:                               # %while.body.i.i186.1
                                        #   in Loop: Header=BB47_100 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB47_100:                              # %while.body.i.i186.1
                                        #   Parent Loop BB47_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($21)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_99
	nop
# BB#101:                               # %writeUARTChar.exit.i189.1
                                        #   in Loop: Header=BB47_95 Depth=1
	sb	$10, 0($20)
	lw	$1, 0($21)
	j	$BB47_103
	nop
$BB47_102:                              # %while.body.i.i186.2
                                        #   in Loop: Header=BB47_103 Depth=2
	daddiu	$1, $5, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB47_103:                              # %while.body.i.i186.2
                                        #   Parent Loop BB47_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_102
	nop
# BB#104:                               # %writeUARTChar.exit.i189.2
                                        #   in Loop: Header=BB47_95 Depth=1
	daddiu	$1, $5, 127
	dsll	$20, $1, 24
	sb	$11, 0($20)
	j	$BB47_106
	daddiu	$21, $20, 4
$BB47_105:                              # %while.body.i.i186.3
                                        #   in Loop: Header=BB47_106 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB47_106:                              # %while.body.i.i186.3
                                        #   Parent Loop BB47_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($21)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_105
	nop
# BB#107:                               # %writeUARTChar.exit.i189.3
                                        #   in Loop: Header=BB47_95 Depth=1
	sb	$12, 0($20)
	lw	$1, 0($21)
	j	$BB47_109
	nop
$BB47_108:                              # %while.body.i.i186.4
                                        #   in Loop: Header=BB47_109 Depth=2
	daddiu	$1, $5, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB47_109:                              # %while.body.i.i186.4
                                        #   Parent Loop BB47_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_108
	nop
# BB#110:                               # %writeUARTChar.exit.i189.4
                                        #   in Loop: Header=BB47_95 Depth=1
	daddiu	$1, $5, 127
	dsll	$20, $1, 24
	sb	$4, 0($20)
	j	$BB47_112
	daddiu	$21, $20, 4
$BB47_111:                              # %while.body.i.i186.5
                                        #   in Loop: Header=BB47_112 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB47_112:                              # %while.body.i.i186.5
                                        #   Parent Loop BB47_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($21)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_111
	nop
# BB#113:                               # %writeUARTChar.exit.i189.5
                                        #   in Loop: Header=BB47_95 Depth=1
	sb	$13, 0($20)
	daddiu	$21, $zero, 1
	addiu	$20, $zero, 0
	addiu	$22, $zero, 1
	blez	$8, $BB47_116
	addiu	$23, $zero, 0
$BB47_114:                              # %for.body.i194
                                        #   Parent Loop BB47_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addiu	$23, $23, 1
	bne	$8, $23, $BB47_114
	mul	$22, $22, $7
# BB#115:                               # %raise.exit.loopexit
                                        #   in Loop: Header=BB47_95 Depth=1
	sll	$21, $22, 0
$BB47_116:                              # %for.body.i205
                                        #   Parent Loop BB47_95 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_118 Depth 3
	daddiu	$1, $5, 127
	dsll	$22, $1, 24
	j	$BB47_118
	daddiu	$23, $22, 4
$BB47_117:                              # %while.body.i.i208
                                        #   in Loop: Header=BB47_118 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB47_118:                              # %while.body.i.i208
                                        #   Parent Loop BB47_95 Depth=1
                                        #     Parent Loop BB47_116 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($23)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_117
	nop
# BB#119:                               # %writeUARTChar.exit.i212
                                        #   in Loop: Header=BB47_116 Depth=2
	dsrl	$ra, $21, 60
	sltu	$1, $21, $14
	addiu	$20, $20, 1
	dsll	$21, $21, 4
	daddiu	$23, $ra, 55
	ori	$ra, $ra, 48
	movn	$23, $ra, $1
	sll	$1, $23, 0
	bne	$20, $15, $BB47_116
	sb	$1, 0($22)
# BB#120:                               # %while.body.i90.loopexit
                                        #   in Loop: Header=BB47_95 Depth=1
	daddiu	$1, $5, 127
	dsll	$20, $1, 24
	j	$BB47_122
	daddiu	$21, $20, 4
$BB47_121:                              # %while.body.i.i93
                                        #   in Loop: Header=BB47_122 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB47_122:                              # %while.body.i.i93
                                        #   Parent Loop BB47_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($21)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_121
	nop
# BB#123:                               # %writeUARTChar.exit.i96
                                        #   in Loop: Header=BB47_95 Depth=1
	sb	$24, 0($20)
	lw	$1, 0($21)
	j	$BB47_125
	nop
$BB47_124:                              # %while.body.i.i93.1
                                        #   in Loop: Header=BB47_125 Depth=2
	daddiu	$1, $5, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB47_125:                              # %while.body.i.i93.1
                                        #   Parent Loop BB47_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_124
	nop
# BB#126:                               # %writeUARTChar.exit.i96.1
                                        #   in Loop: Header=BB47_95 Depth=1
	daddiu	$1, $5, 127
	dsll	$20, $1, 24
	sb	$10, 0($20)
	j	$BB47_128
	daddiu	$21, $20, 4
$BB47_127:                              # %while.body.i.i93.2
                                        #   in Loop: Header=BB47_128 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB47_128:                              # %while.body.i.i93.2
                                        #   Parent Loop BB47_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($21)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_127
	nop
# BB#129:                               # %writeUARTChar.exit.i96.2
                                        #   in Loop: Header=BB47_95 Depth=1
	sb	$25, 0($20)
	lw	$1, 0($21)
	j	$BB47_131
	nop
$BB47_130:                              # %while.body.i.i93.3
                                        #   in Loop: Header=BB47_131 Depth=2
	daddiu	$1, $5, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB47_131:                              # %while.body.i.i93.3
                                        #   Parent Loop BB47_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_130
	nop
# BB#132:                               # %writeUARTChar.exit.i96.3
                                        #   in Loop: Header=BB47_95 Depth=1
	daddiu	$1, $5, 127
	dsll	$20, $1, 24
	sb	$12, 0($20)
	j	$BB47_134
	daddiu	$21, $20, 4
$BB47_133:                              # %while.body.i.i93.4
                                        #   in Loop: Header=BB47_134 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB47_134:                              # %while.body.i.i93.4
                                        #   Parent Loop BB47_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($21)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_133
	nop
# BB#135:                               # %writeUARTChar.exit.i96.4
                                        #   in Loop: Header=BB47_95 Depth=1
	sb	$4, 0($20)
	lw	$1, 0($21)
	j	$BB47_137
	nop
$BB47_136:                              # %while.body.i.i93.5
                                        #   in Loop: Header=BB47_137 Depth=2
	daddiu	$1, $5, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB47_137:                              # %while.body.i.i93.5
                                        #   Parent Loop BB47_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_136
	nop
# BB#138:                               # %writeUARTChar.exit.i96.5
                                        #   in Loop: Header=BB47_95 Depth=1
	daddiu	$1, $5, 127
	dsll	$20, $1, 24
	sb	$13, 0($20)
	j	$BB47_140
	daddiu	$21, $20, 4
$BB47_139:                              # %while.body.i.i93.6
                                        #   in Loop: Header=BB47_140 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB47_140:                              # %while.body.i.i93.6
                                        #   Parent Loop BB47_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($21)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_139
	nop
# BB#141:                               # %writeUARTChar.exit.i96.6
                                        #   in Loop: Header=BB47_95 Depth=1
	sb	$16, 0($20)
	lw	$1, 0($21)
	j	$BB47_143
	nop
$BB47_142:                              # %while.body.i.i93.7
                                        #   in Loop: Header=BB47_143 Depth=2
	daddiu	$1, $5, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB47_143:                              # %while.body.i.i93.7
                                        #   Parent Loop BB47_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_142
	nop
# BB#144:                               # %writeUARTChar.exit.i96.7
                                        #   in Loop: Header=BB47_95 Depth=1
	daddiu	$1, $5, 127
	addiu	$22, $zero, 0
	dsll	$20, $1, 24
	sb	$17, 0($20)
$BB47_145:                              # %for.body.i80
                                        #   Parent Loop BB47_95 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_147 Depth 3
	j	$BB47_147
	daddiu	$1, $20, 4
$BB47_146:                              # %while.body.i.i83
                                        #   in Loop: Header=BB47_147 Depth=3
	daddiu	$1, $5, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB47_147:                              # %while.body.i.i83
                                        #   Parent Loop BB47_95 Depth=1
                                        #     Parent Loop BB47_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_146
	nop
# BB#148:                               # %writeUARTChar.exit.i86
                                        #   in Loop: Header=BB47_145 Depth=2
	dsrl	$23, $19, 60
	sltu	$1, $19, $14
	addiu	$22, $22, 1
	dsll	$19, $19, 4
	daddiu	$21, $23, 55
	ori	$23, $23, 48
	movn	$21, $23, $1
	ld	$23, %got_page($.str9)($2)
	sll	$1, $21, 0
	daddiu	$21, $5, 127
	dsll	$21, $21, 24
	bne	$22, $15, $BB47_145
	sb	$1, 0($21)
# BB#149:                               #   in Loop: Header=BB47_95 Depth=1
	addiu	$19, $zero, 32
	daddiu	$20, $23, %got_ofst($.str9)
$BB47_150:                              # %while.body.i
                                        #   Parent Loop BB47_95 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_152 Depth 3
	j	$BB47_152
	daddiu	$1, $21, 4
$BB47_151:                              # %while.body.i.i
                                        #   in Loop: Header=BB47_152 Depth=3
	daddiu	$1, $5, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB47_152:                              # %while.body.i.i
                                        #   Parent Loop BB47_95 Depth=1
                                        #     Parent Loop BB47_150 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB47_151
	nop
# BB#153:                               # %writeUARTChar.exit.i
                                        #   in Loop: Header=BB47_150 Depth=2
	daddiu	$1, $5, 127
	dsll	$1, $1, 24
	sb	$19, 0($1)
	daddiu	$1, $20, 1
	lbu	$19, 1($20)
	bne	$19, $zero, $BB47_150
	move	$20, $1
# BB#154:                               # %writeString.exit
                                        #   in Loop: Header=BB47_95 Depth=1
	addiu	$8, $8, 1
	bne	$8, $18, $BB47_95
	nop
# BB#155:                               # %for.end51
	addiu	$2, $zero, 0
	move	$sp, $fp
	ld	$16, 48($sp)            # 8-byte Folded Reload
	ld	$17, 56($sp)            # 8-byte Folded Reload
	ld	$18, 64($sp)            # 8-byte Folded Reload
	ld	$19, 72($sp)            # 8-byte Folded Reload
	ld	$20, 80($sp)            # 8-byte Folded Reload
	ld	$21, 88($sp)            # 8-byte Folded Reload
	ld	$22, 96($sp)            # 8-byte Folded Reload
	ld	$23, 104($sp)           # 8-byte Folded Reload
	ld	$fp, 112($sp)           # 8-byte Folded Reload
	ld	$ra, 120($sp)           # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 128
	.set	at
	.set	macro
	.set	reorder
	.end	arrayBench
$tmp191:
	.size	arrayBench, ($tmp191)-arrayBench

	.globl	swap
	.align	3
	.type	swap,@function
	.set	nomips16                # @swap
	.ent	swap
swap:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	lbu	$1, 0($4)
	lbu	$2, 0($5)
	sb	$2, 0($4)
	sb	$1, 0($5)
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	swap
$tmp195:
	.size	swap, ($tmp195)-swap

	.globl	choose_pivot
	.align	3
	.type	choose_pivot,@function
	.set	nomips16                # @choose_pivot
	.ent	choose_pivot
choose_pivot:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	addu	$1, $5, $4
	srl	$2, $1, 31
	addu	$1, $1, $2
	sra	$2, $1, 1
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	choose_pivot
$tmp199:
	.size	choose_pivot, ($tmp199)-choose_pivot

	.globl	quicksort
	.align	3
	.type	quicksort,@function
	.set	nomips16                # @quicksort
	.ent	quicksort
quicksort:
	.frame	$fp,64,$ra
	.mask 	0x00000000,0
	.fmask	0xd01f0000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -64
	sd	$ra, 56($sp)            # 8-byte Folded Spill
	sd	$fp, 48($sp)            # 8-byte Folded Spill
	sd	$gp, 40($sp)            # 8-byte Folded Spill
	sd	$20, 32($sp)            # 8-byte Folded Spill
	sd	$19, 24($sp)            # 8-byte Folded Spill
	sd	$18, 16($sp)            # 8-byte Folded Spill
	sd	$17, 8($sp)             # 8-byte Folded Spill
	sd	$16, 0($sp)             # 8-byte Folded Spill
	move	$fp, $sp
	lui	$1, %hi(%neg(%gp_rel(quicksort)))
	move	$16, $6
	daddu	$2, $1, $25
	slt	$1, $5, $16
	beq	$1, $zero, $BB50_16
	move	$17, $4
# BB#1:
	daddiu	$19, $2, %lo(%neg(%gp_rel(quicksort)))
	ld	$18, %call16(quicksort)($19)
$BB50_2:                                # %if.then
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_4 Depth 2
                                        #       Child Loop BB50_5 Depth 3
                                        #       Child Loop BB50_8 Depth 3
	addu	$1, $5, $16
	slt	$4, $5, $16
	srl	$2, $1, 31
	addu	$1, $1, $2
	sll	$2, $5, 0
	sra	$1, $1, 1
	daddu	$2, $17, $2
	sll	$1, $1, 0
	lbu	$6, 0($2)
	daddu	$1, $17, $1
	lbu	$3, 0($1)
	sb	$3, 0($2)
	sb	$6, 0($1)
	lbu	$3, 0($2)
	beq	$4, $zero, $BB50_14
	nop
# BB#3:                                 # %while.cond6.preheader.lr.ph
                                        #   in Loop: Header=BB50_2 Depth=1
	addiu	$4, $5, 1
	move	$20, $16
$BB50_4:                                # %while.cond6.preheader
                                        #   Parent Loop BB50_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_5 Depth 3
                                        #       Child Loop BB50_8 Depth 3
	move	$6, $4
$BB50_5:                                # %while.cond6
                                        #   Parent Loop BB50_2 Depth=1
                                        #     Parent Loop BB50_4 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	move	$4, $6
	slt	$1, $16, $4
	bne	$1, $zero, $BB50_7
	nop
# BB#6:                                 # %land.rhs
                                        #   in Loop: Header=BB50_5 Depth=3
	sll	$1, $4, 0
	sll	$6, $3, 24
	daddu	$1, $17, $1
	sra	$6, $6, 24
	lb	$1, 0($1)
	slt	$1, $6, $1
	beq	$1, $zero, $BB50_5
	addiu	$6, $4, 1
$BB50_7:                                #   in Loop: Header=BB50_4 Depth=2
	move	$6, $20
$BB50_8:                                # %while.cond14
                                        #   Parent Loop BB50_2 Depth=1
                                        #     Parent Loop BB50_4 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	move	$20, $6
	slt	$1, $20, $5
	bne	$1, $zero, $BB50_10
	nop
# BB#9:                                 # %land.rhs17
                                        #   in Loop: Header=BB50_8 Depth=3
	sll	$1, $20, 0
	sll	$6, $3, 24
	daddu	$1, $17, $1
	sra	$6, $6, 24
	lb	$1, 0($1)
	slt	$1, $6, $1
	bne	$1, $zero, $BB50_8
	addiu	$6, $20, -1
$BB50_10:                               # %while.end26
                                        #   in Loop: Header=BB50_4 Depth=2
	slt	$1, $4, $20
	beq	$1, $zero, $BB50_12
	nop
# BB#11:                                # %if.then29
                                        #   in Loop: Header=BB50_4 Depth=2
	sll	$1, $4, 0
	sll	$7, $20, 0
	daddu	$1, $17, $1
	daddu	$7, $17, $7
	lbu	$6, 0($1)
	lbu	$8, 0($7)
	sb	$8, 0($1)
	sb	$6, 0($7)
$BB50_12:                               # %while.cond.backedge
                                        #   in Loop: Header=BB50_4 Depth=2
	slt	$1, $20, $4
	beq	$1, $zero, $BB50_4
	nop
# BB#13:                                # %while.cond.while.end34_crit_edge
                                        #   in Loop: Header=BB50_2 Depth=1
	lbu	$3, 0($2)
	j	$BB50_15
	nop
$BB50_14:                               #   in Loop: Header=BB50_2 Depth=1
	move	$20, $16
$BB50_15:                               # %while.end34
                                        #   in Loop: Header=BB50_2 Depth=1
	sll	$1, $20, 0
	addiu	$6, $20, -1
	move	$25, $18
	move	$gp, $19
	daddu	$1, $17, $1
	lbu	$4, 0($1)
	sb	$4, 0($2)
	move	$4, $17
	jalr	$25
	sb	$3, 0($1)
	addiu	$5, $20, 1
	slt	$1, $5, $16
	bne	$1, $zero, $BB50_2
	nop
$BB50_16:                               # %if.end40
	move	$sp, $fp
	ld	$16, 0($sp)             # 8-byte Folded Reload
	ld	$17, 8($sp)             # 8-byte Folded Reload
	ld	$18, 16($sp)            # 8-byte Folded Reload
	ld	$19, 24($sp)            # 8-byte Folded Reload
	ld	$20, 32($sp)            # 8-byte Folded Reload
	ld	$gp, 40($sp)            # 8-byte Folded Reload
	ld	$fp, 48($sp)            # 8-byte Folded Reload
	ld	$ra, 56($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 64
	.set	at
	.set	macro
	.set	reorder
	.end	quicksort
$tmp203:
	.size	quicksort, ($tmp203)-quicksort

	.globl	sumArray
	.align	3
	.type	sumArray,@function
	.set	nomips16                # @sumArray
	.ent	sumArray
sumArray:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	slti	$1, $5, 1
	bne	$1, $zero, $BB51_3
	addiu	$2, $zero, 0
# BB#1:
	addiu	$3, $zero, 0
$BB51_2:                                # %for.body
                                        # =>This Inner Loop Header: Depth=1
	sll	$1, $3, 0
	addiu	$3, $3, 1
	daddu	$1, $4, $1
	lb	$1, 0($1)
	bne	$5, $3, $BB51_2
	addu	$2, $1, $2
$BB51_3:                                # %for.end
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	sumArray
$tmp207:
	.size	sumArray, ($tmp207)-sumArray

	.globl	doQuicksort
	.align	3
	.type	doQuicksort,@function
	.set	nomips16                # @doQuicksort
	.ent	doQuicksort
doQuicksort:
	.frame	$fp,192,$ra
	.mask 	0x00000000,0
	.fmask	0xd0ff0000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -192
	sd	$ra, 184($sp)           # 8-byte Folded Spill
	sd	$fp, 176($sp)           # 8-byte Folded Spill
	sd	$gp, 168($sp)           # 8-byte Folded Spill
	sd	$23, 160($sp)           # 8-byte Folded Spill
	sd	$22, 152($sp)           # 8-byte Folded Spill
	sd	$21, 144($sp)           # 8-byte Folded Spill
	sd	$20, 136($sp)           # 8-byte Folded Spill
	sd	$19, 128($sp)           # 8-byte Folded Spill
	sd	$18, 120($sp)           # 8-byte Folded Spill
	sd	$17, 112($sp)           # 8-byte Folded Spill
	sd	$16, 104($sp)           # 8-byte Folded Spill
	move	$fp, $sp
	lui	$1, %hi(%neg(%gp_rel(doQuicksort)))
	daddu	$2, $1, $25
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$3, $1, 24
	j	$BB52_2
	daddiu	$4, $3, 4
$BB52_1:                                # %while.body.i.i
                                        #   in Loop: Header=BB52_2 Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB52_2:                                # %while.body.i.i
                                        # =>This Inner Loop Header: Depth=1
	lw	$1, 0($4)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_1
	nop
# BB#3:                                 # %writeUARTChar.exit.i
	addiu	$1, $zero, 97
	sb	$1, 0($3)
	lw	$1, 0($4)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB52_6
	nop
# BB#4:
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$1, $1, 24
	daddiu	$3, $1, 4
$BB52_5:                                # %while.body.i.i.1
                                        # =>This Inner Loop Header: Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_5
	nop
$BB52_6:                                # %writeUARTChar.exit.i.1
	daddiu	$1, $zero, 9
	daddiu	$3, $2, %lo(%neg(%gp_rel(doQuicksort)))
	addiu	$2, $zero, 49
	addiu	$17, $zero, 100
	addiu	$19, $zero, 4096
	dsll	$23, $1, 36
	sd	$3, 88($fp)             # 8-byte Folded Spill
	ld	$18, %got_disp(heap)($3)
	daddiu	$1, $23, 127
	dsll	$1, $1, 24
	sb	$2, 0($1)
	daddiu	$1, $zero, 100
	daddiu	$2, $zero, 19
	sd	$1, 80($fp)             # 8-byte Folded Spill
	dsll	$1, $2, 31
	sd	$18, 56($fp)            # 8-byte Folded Spill
	sd	$1, 32($fp)             # 8-byte Folded Spill
	daddiu	$1, $1, 1
	dsll	$1, $1, 28
	sd	$1, 48($fp)             # 8-byte Folded Spill
	dsll	$1, $2, 59
	sd	$1, 40($fp)             # 8-byte Folded Spill
	ld	$1, %call16(quicksort)($3)
	sd	$1, 64($fp)             # 8-byte Folded Spill
	ld	$1, %call16(writeDigit)($3)
	sd	$1, 24($fp)             # 8-byte Folded Spill
	daddiu	$1, $zero, 5
	dsll	$20, $1, 61
	lui	$1, 15
	ori	$1, $1, 16960
	sd	$20, 16($fp)            # 8-byte Folded Spill
	sw	$1, 12($fp)             # 4-byte Folded Spill
$BB52_7:                                # %for.cond2.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_30 Depth 2
                                        #     Child Loop BB52_33 Depth 2
                                        #     Child Loop BB52_38 Depth 2
                                        #     Child Loop BB52_43 Depth 2
                                        #     Child Loop BB52_46 Depth 2
                                        #     Child Loop BB52_51 Depth 2
                                        #     Child Loop BB52_9 Depth 2
                                        #       Child Loop BB52_10 Depth 3
                                        #       Child Loop BB52_13 Depth 3
                                        #       Child Loop BB52_17 Depth 3
                                        #       Child Loop BB52_20 Depth 3
                                        #       Child Loop BB52_21 Depth 3
                                        #       Child Loop BB52_23 Depth 3
                                        #     Child Loop BB52_56 Depth 2
                                        #     Child Loop BB52_58 Depth 2
                                        #     Child Loop BB52_61 Depth 2
                                        #     Child Loop BB52_64 Depth 2
                                        #     Child Loop BB52_67 Depth 2
                                        #     Child Loop BB52_70 Depth 2
                                        #     Child Loop BB52_73 Depth 2
                                        #     Child Loop BB52_76 Depth 2
                                        #     Child Loop BB52_79 Depth 2
                                        #     Child Loop BB52_82 Depth 2
                                        #     Child Loop BB52_85 Depth 2
                                        #     Child Loop BB52_88 Depth 2
                                        #     Child Loop BB52_91 Depth 2
                                        #     Child Loop BB52_94 Depth 2
                                        #     Child Loop BB52_96 Depth 2
                                        #       Child Loop BB52_98 Depth 3
                                        #     Child Loop BB52_102 Depth 2
                                        #     Child Loop BB52_105 Depth 2
                                        #     Child Loop BB52_108 Depth 2
                                        #     Child Loop BB52_111 Depth 2
                                        #     Child Loop BB52_114 Depth 2
                                        #     Child Loop BB52_117 Depth 2
                                        #     Child Loop BB52_120 Depth 2
                                        #     Child Loop BB52_123 Depth 2
                                        #     Child Loop BB52_126 Depth 2
                                        #     Child Loop BB52_129 Depth 2
                                        #     Child Loop BB52_132 Depth 2
                                        #     Child Loop BB52_135 Depth 2
                                        #     Child Loop BB52_138 Depth 2
                                        #     Child Loop BB52_141 Depth 2
                                        #     Child Loop BB52_143 Depth 2
                                        #     Child Loop BB52_146 Depth 2
                                        #     Child Loop BB52_148 Depth 2
	addiu	$1, $17, -1
	blez	$17, $BB52_28
	sw	$1, 76($fp)
# BB#8:                                 #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $zero, 0
	addiu	$18, $zero, 0
	addiu	$22, $zero, 0
	sd	$1, 96($fp)             # 8-byte Folded Spill
	addiu	$1, $zero, -4
	and	$21, $17, $1
$BB52_9:                                # %while.body.i39.preheader.us
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_10 Depth 3
                                        #       Child Loop BB52_13 Depth 3
                                        #       Child Loop BB52_17 Depth 3
                                        #       Child Loop BB52_20 Depth 3
                                        #       Child Loop BB52_21 Depth 3
                                        #       Child Loop BB52_23 Depth 3
	daddiu	$1, $23, 127
	dsll	$2, $1, 24
	daddiu	$3, $2, 4
	lw	$1, 0($3)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB52_11
	ld	$4, 56($fp)
$BB52_10:                               # %while.body.i.i42.us
                                        #   Parent Loop BB52_7 Depth=1
                                        #     Parent Loop BB52_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_10
	nop
$BB52_11:                               # %writeUARTChar.exit.i45.us
                                        #   in Loop: Header=BB52_9 Depth=2
	addiu	$1, $zero, 97
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB52_13
	nop
$BB52_12:                               # %while.body.i.i42.us.1
                                        #   in Loop: Header=BB52_13 Depth=3
	daddiu	$1, $23, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB52_13:                               # %while.body.i.i42.us.1
                                        #   Parent Loop BB52_7 Depth=1
                                        #     Parent Loop BB52_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_12
	nop
# BB#14:                                # %writeUARTChar.exit.i45.us.1
                                        #   in Loop: Header=BB52_9 Depth=2
	daddiu	$1, $23, 127
	addiu	$2, $zero, 51
	addiu	$6, $zero, 4096
	dsll	$1, $1, 24
	sb	$2, 0($1)
	ld	$2, 0($4)
	ld	$1, 48($fp)             # 8-byte Folded Reload
	sltu	$1, $2, $1
	beq	$1, $zero, $BB52_16
	ld	$3, 40($fp)
# BB#15:                                # %if.then.i.i.us
                                        #   in Loop: Header=BB52_9 Depth=2
	ld	$1, 80($fp)             # 8-byte Folded Reload
	daddu	$3, $2, $1
$BB52_16:                               # %for.body.lr.ph.i.us
                                        #   in Loop: Header=BB52_9 Depth=2
	daddiu	$1, $zero, -16
	sd	$3, 0($4)
	and	$20, $2, $1
	beq	$21, $zero, $BB52_19
	addiu	$2, $zero, 0
$BB52_17:                               # %vector.body.i.us
                                        #   Parent Loop BB52_7 Depth=1
                                        #     Parent Loop BB52_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	addiu	$1, $2, 2
	sll	$3, $2, 0
	addiu	$5, $2, 1
	xor	$4, $2, $17
	xor	$1, $1, $17
	daddu	$3, $20, $3
	xor	$5, $5, $17
	sb	$5, 1($3)
	sb	$4, 0($3)
	sb	$1, 2($3)
	addiu	$1, $2, 3
	addiu	$2, $2, 4
	xor	$1, $1, $17
	bne	$21, $2, $BB52_17
	sb	$1, 3($3)
# BB#18:                                #   in Loop: Header=BB52_9 Depth=2
	move	$2, $21
$BB52_19:                               # %middle.block.i.us
                                        #   in Loop: Header=BB52_9 Depth=2
	beq	$2, $17, $BB52_21
	nop
$BB52_20:                               # %for.body.i.us
                                        #   Parent Loop BB52_7 Depth=1
                                        #     Parent Loop BB52_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	sll	$3, $2, 0
	xor	$1, $2, $17
	addiu	$2, $2, 1
	daddu	$3, $20, $3
	bne	$17, $2, $BB52_20
	sb	$1, 0($3)
$BB52_21:                               # %while.cond.us
                                        #   Parent Loop BB52_7 Depth=1
                                        #     Parent Loop BB52_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	#APP
	dmfc0 $1, $9
	#NO_APP
	slt	$1, $6, $1
	bne	$1, $zero, $BB52_21
	nop
# BB#22:                                # %for.body.i65.preheader.us
                                        #   in Loop: Header=BB52_9 Depth=2
	#APP
	dmfc0 $16, $9
	#NO_APP
	ld	$25, 64($fp)            # 8-byte Folded Reload
	lw	$6, 76($fp)             # 4-byte Folded Reload
	ld	$gp, 88($fp)            # 8-byte Folded Reload
	move	$4, $20
	addiu	$5, $zero, 0
	jalr	$25
	addiu	$19, $zero, 0
	addiu	$2, $zero, 0
$BB52_23:                               # %for.body.i65.us
                                        #   Parent Loop BB52_7 Depth=1
                                        #     Parent Loop BB52_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	sll	$1, $2, 0
	addiu	$2, $2, 1
	daddu	$1, $20, $1
	lb	$1, 0($1)
	bne	$17, $2, $BB52_23
	addu	$19, $1, $19
# BB#24:                                # %sumArray.exit.us
                                        #   in Loop: Header=BB52_9 Depth=2
	#APP
	dmfc0 $2, $9
	#NO_APP
	sltu	$1, $16, $2
	beq	$1, $zero, $BB52_26
	nop
# BB#25:                                # %if.then.us
                                        #   in Loop: Header=BB52_9 Depth=2
	ld	$3, 96($fp)             # 8-byte Folded Reload
	sll	$1, $16, 0
	sll	$2, $2, 0
	dsubu	$1, $3, $1
	daddu	$1, $1, $2
	sd	$1, 96($fp)             # 8-byte Folded Spill
$BB52_26:                               # %if.end.us
                                        #   in Loop: Header=BB52_9 Depth=2
	addiu	$18, $18, 1
	addiu	$1, $zero, 2
	bne	$18, $1, $BB52_9
	addu	$22, $19, $22
# BB#27:                                # %for.end.us-lcssa.us
                                        #   in Loop: Header=BB52_7 Depth=1
	sll	$19, $22, 0
	addiu	$18, $zero, 32
	ld	$20, 16($fp)            # 8-byte Folded Reload
	j	$BB52_54
	ld	$21, 96($fp)
$BB52_28:                               # %for.cond2.preheader.for.cond2.preheader.split_crit_edge
                                        #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $23, 127
	dsll	$2, $1, 24
	j	$BB52_30
	daddiu	$3, $2, 4
$BB52_29:                               # %while.body.i.i42
                                        #   in Loop: Header=BB52_30 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB52_30:                               # %while.body.i.i42
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_29
	nop
# BB#31:                                # %writeUARTChar.exit.i45
                                        #   in Loop: Header=BB52_7 Depth=1
	addiu	$1, $zero, 97
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB52_33
	nop
$BB52_32:                               # %while.body.i.i42.1
                                        #   in Loop: Header=BB52_33 Depth=2
	daddiu	$1, $23, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB52_33:                               # %while.body.i.i42.1
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_32
	nop
# BB#34:                                # %writeUARTChar.exit.i45.1
                                        #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $23, 127
	addiu	$2, $zero, 51
	dsll	$1, $1, 24
	sb	$2, 0($1)
	ld	$1, 32($fp)             # 8-byte Folded Reload
	ld	$2, 0($18)
	daddiu	$1, $1, 1
	dsll	$1, $1, 28
	sltu	$1, $2, $1
	beq	$1, $zero, $BB52_36
	nop
# BB#35:                                # %if.then.i.i
                                        #   in Loop: Header=BB52_7 Depth=1
	ld	$1, 80($fp)             # 8-byte Folded Reload
	j	$BB52_37
	daddu	$3, $2, $1
$BB52_36:                               #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $zero, 19
	dsll	$3, $1, 59
$BB52_37:                               # %while.cond.preheader
                                        #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $zero, -16
	sd	$3, 0($18)
	and	$4, $2, $1
$BB52_38:                               # %while.cond
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#APP
	dmfc0 $1, $9
	#NO_APP
	slt	$1, $19, $1
	bne	$1, $zero, $BB52_38
	nop
# BB#39:                                # %sumArray.exit
                                        #   in Loop: Header=BB52_7 Depth=1
	#APP
	dmfc0 $16, $9
	#NO_APP
	ld	$25, 64($fp)            # 8-byte Folded Reload
	lw	$6, 76($fp)             # 4-byte Folded Reload
	ld	$gp, 88($fp)            # 8-byte Folded Reload
	jalr	$25
	addiu	$5, $zero, 0
	#APP
	dmfc0 $2, $9
	#NO_APP
	sltu	$1, $16, $2
	beq	$1, $zero, $BB52_41
	daddiu	$21, $zero, 0
# BB#40:                                # %if.then
                                        #   in Loop: Header=BB52_7 Depth=1
	sll	$1, $16, 0
	sll	$2, $2, 0
	dsubu	$21, $2, $1
$BB52_41:                               # %if.end
                                        #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $23, 127
	dsll	$2, $1, 24
	j	$BB52_43
	daddiu	$3, $2, 4
$BB52_42:                               # %while.body.i.i42.1121
                                        #   in Loop: Header=BB52_43 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB52_43:                               # %while.body.i.i42.1121
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_42
	nop
# BB#44:                                # %writeUARTChar.exit.i45.1123
                                        #   in Loop: Header=BB52_7 Depth=1
	addiu	$1, $zero, 97
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB52_46
	nop
$BB52_45:                               # %while.body.i.i42.1.1
                                        #   in Loop: Header=BB52_46 Depth=2
	daddiu	$1, $23, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB52_46:                               # %while.body.i.i42.1.1
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_45
	nop
# BB#47:                                # %writeUARTChar.exit.i45.1.1
                                        #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $23, 127
	addiu	$2, $zero, 51
	dsll	$1, $1, 24
	sb	$2, 0($1)
	ld	$1, 32($fp)             # 8-byte Folded Reload
	ld	$2, 0($18)
	daddiu	$1, $1, 1
	dsll	$1, $1, 28
	daddiu	$1, $1, -1
	sltu	$1, $1, $2
	bne	$1, $zero, $BB52_49
	nop
# BB#48:                                # %if.then.i.i.1
                                        #   in Loop: Header=BB52_7 Depth=1
	ld	$1, 80($fp)             # 8-byte Folded Reload
	j	$BB52_50
	daddu	$3, $2, $1
$BB52_49:                               #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $zero, 19
	dsll	$3, $1, 59
$BB52_50:                               # %while.cond.preheader.1
                                        #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $zero, -16
	sd	$3, 0($18)
	and	$4, $2, $1
$BB52_51:                               # %while.cond.1
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#APP
	dmfc0 $1, $9
	#NO_APP
	slt	$1, $19, $1
	bne	$1, $zero, $BB52_51
	nop
# BB#52:                                # %sumArray.exit.1
                                        #   in Loop: Header=BB52_7 Depth=1
	#APP
	dmfc0 $16, $9
	#NO_APP
	ld	$25, 64($fp)            # 8-byte Folded Reload
	lw	$6, 76($fp)             # 4-byte Folded Reload
	ld	$gp, 88($fp)            # 8-byte Folded Reload
	jalr	$25
	addiu	$5, $zero, 0
	#APP
	dmfc0 $2, $9
	#NO_APP
	daddiu	$19, $zero, 0
	sltu	$1, $16, $2
	beq	$1, $zero, $BB52_54
	addiu	$18, $zero, 32
# BB#53:                                # %if.then.1
                                        #   in Loop: Header=BB52_7 Depth=1
	sll	$1, $16, 0
	sll	$2, $2, 0
	dsubu	$1, $21, $1
	daddu	$21, $1, $2
$BB52_54:                               # %for.end
                                        #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $23, 127
	move	$22, $21
	dsll	$2, $1, 24
	j	$BB52_56
	daddiu	$3, $2, 4
$BB52_55:                               # %while.body.i.i83
                                        #   in Loop: Header=BB52_56 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB52_56:                               # %while.body.i.i83
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_55
	nop
# BB#57:                                # %writeUARTChar.exit.i86
                                        #   in Loop: Header=BB52_7 Depth=1
	sb	$18, 0($2)
	lw	$1, 0($3)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB52_59
	addiu	$21, $zero, 16
$BB52_58:                               # %while.body.i.i83.1
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	daddiu	$1, $23, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_58
	nop
$BB52_59:                               # %writeUARTChar.exit.i86.1
                                        #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $23, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 115
	sb	$1, 0($2)
	j	$BB52_61
	daddiu	$3, $2, 4
$BB52_60:                               # %while.body.i.i83.2
                                        #   in Loop: Header=BB52_61 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB52_61:                               # %while.body.i.i83.2
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_60
	nop
# BB#62:                                # %writeUARTChar.exit.i86.2
                                        #   in Loop: Header=BB52_7 Depth=1
	addiu	$1, $zero, 105
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB52_64
	nop
$BB52_63:                               # %while.body.i.i83.3
                                        #   in Loop: Header=BB52_64 Depth=2
	daddiu	$1, $23, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB52_64:                               # %while.body.i.i83.3
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_63
	nop
# BB#65:                                # %writeUARTChar.exit.i86.3
                                        #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $23, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 122
	sb	$1, 0($2)
	j	$BB52_67
	daddiu	$3, $2, 4
$BB52_66:                               # %while.body.i.i83.4
                                        #   in Loop: Header=BB52_67 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB52_67:                               # %while.body.i.i83.4
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_66
	nop
# BB#68:                                # %writeUARTChar.exit.i86.4
                                        #   in Loop: Header=BB52_7 Depth=1
	addiu	$1, $zero, 101
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB52_70
	nop
$BB52_69:                               # %while.body.i.i83.5
                                        #   in Loop: Header=BB52_70 Depth=2
	daddiu	$1, $23, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB52_70:                               # %while.body.i.i83.5
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_69
	nop
# BB#71:                                # %writeUARTChar.exit.i86.5
                                        #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $23, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 58
	sb	$1, 0($2)
	j	$BB52_73
	daddiu	$16, $2, 4
$BB52_72:                               # %while.body.i.i83.6
                                        #   in Loop: Header=BB52_73 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB52_73:                               # %while.body.i.i83.6
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($16)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_72
	nop
# BB#74:                                # %writeUARTChar.exit.i86.6
                                        #   in Loop: Header=BB52_7 Depth=1
	sb	$18, 0($2)
	ld	$25, 24($fp)            # 8-byte Folded Reload
	ld	$4, 80($fp)             # 8-byte Folded Reload
	jalr	$25
	ld	$gp, 88($fp)
	lw	$1, 0($16)
	j	$BB52_76
	nop
$BB52_75:                               # %while.body.i.i94
                                        #   in Loop: Header=BB52_76 Depth=2
	daddiu	$1, $23, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB52_76:                               # %while.body.i.i94
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_75
	nop
# BB#77:                                # %writeUARTChar.exit.i97
                                        #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $23, 127
	dsll	$2, $1, 24
	sb	$18, 0($2)
	j	$BB52_79
	daddiu	$3, $2, 4
$BB52_78:                               # %while.body.i.i94.1
                                        #   in Loop: Header=BB52_79 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB52_79:                               # %while.body.i.i94.1
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_78
	nop
# BB#80:                                # %writeUARTChar.exit.i97.1
                                        #   in Loop: Header=BB52_7 Depth=1
	sb	$18, 0($2)
	lw	$1, 0($3)
	j	$BB52_82
	nop
$BB52_81:                               # %while.body.i.i94.2
                                        #   in Loop: Header=BB52_82 Depth=2
	daddiu	$1, $23, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB52_82:                               # %while.body.i.i94.2
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_81
	nop
# BB#83:                                # %writeUARTChar.exit.i97.2
                                        #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $23, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 115
	sb	$1, 0($2)
	j	$BB52_85
	daddiu	$3, $2, 4
$BB52_84:                               # %while.body.i.i94.3
                                        #   in Loop: Header=BB52_85 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB52_85:                               # %while.body.i.i94.3
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_84
	nop
# BB#86:                                # %writeUARTChar.exit.i97.3
                                        #   in Loop: Header=BB52_7 Depth=1
	addiu	$1, $zero, 117
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB52_88
	nop
$BB52_87:                               # %while.body.i.i94.4
                                        #   in Loop: Header=BB52_88 Depth=2
	daddiu	$1, $23, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB52_88:                               # %while.body.i.i94.4
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_87
	nop
# BB#89:                                # %writeUARTChar.exit.i97.4
                                        #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $23, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 109
	sb	$1, 0($2)
	j	$BB52_91
	daddiu	$3, $2, 4
$BB52_90:                               # %while.body.i.i94.5
                                        #   in Loop: Header=BB52_91 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB52_91:                               # %while.body.i.i94.5
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_90
	nop
# BB#92:                                # %writeUARTChar.exit.i97.5
                                        #   in Loop: Header=BB52_7 Depth=1
	addiu	$1, $zero, 58
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB52_94
	nop
$BB52_93:                               # %while.body.i.i94.6
                                        #   in Loop: Header=BB52_94 Depth=2
	daddiu	$1, $23, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB52_94:                               # %while.body.i.i94.6
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_93
	nop
# BB#95:                                # %writeUARTChar.exit.i97.6
                                        #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $23, 127
	addiu	$3, $zero, 0
	dsll	$2, $1, 24
	sb	$18, 0($2)
$BB52_96:                               # %for.body.i101
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_98 Depth 3
	j	$BB52_98
	daddiu	$1, $2, 4
$BB52_97:                               # %while.body.i.i104
                                        #   in Loop: Header=BB52_98 Depth=3
	daddiu	$1, $23, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB52_98:                               # %while.body.i.i104
                                        #   Parent Loop BB52_7 Depth=1
                                        #     Parent Loop BB52_96 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_97
	nop
# BB#99:                                # %writeUARTChar.exit.i107
                                        #   in Loop: Header=BB52_96 Depth=2
	dsrl	$5, $19, 60
	sltu	$1, $19, $20
	addiu	$3, $3, 1
	dsll	$19, $19, 4
	daddiu	$4, $5, 55
	ori	$5, $5, 48
	movn	$4, $5, $1
	sll	$1, $4, 0
	daddiu	$4, $23, 127
	dsll	$4, $4, 24
	bne	$3, $21, $BB52_96
	sb	$1, 0($4)
# BB#100:                               # %while.body.i69.loopexit
                                        #   in Loop: Header=BB52_7 Depth=1
	j	$BB52_102
	daddiu	$1, $4, 4
$BB52_101:                              # %while.body.i.i72
                                        #   in Loop: Header=BB52_102 Depth=2
	daddiu	$1, $23, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB52_102:                              # %while.body.i.i72
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_101
	nop
# BB#103:                               # %writeUARTChar.exit.i75
                                        #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $23, 127
	dsll	$2, $1, 24
	sb	$18, 0($2)
	j	$BB52_105
	daddiu	$3, $2, 4
$BB52_104:                              # %while.body.i.i72.1
                                        #   in Loop: Header=BB52_105 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB52_105:                              # %while.body.i.i72.1
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_104
	nop
# BB#106:                               # %writeUARTChar.exit.i75.1
                                        #   in Loop: Header=BB52_7 Depth=1
	sb	$18, 0($2)
	lw	$1, 0($3)
	j	$BB52_108
	nop
$BB52_107:                              # %while.body.i.i72.2
                                        #   in Loop: Header=BB52_108 Depth=2
	daddiu	$1, $23, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB52_108:                              # %while.body.i.i72.2
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_107
	nop
# BB#109:                               # %writeUARTChar.exit.i75.2
                                        #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $23, 127
	dsll	$2, $1, 24
	sb	$18, 0($2)
	j	$BB52_111
	daddiu	$3, $2, 4
$BB52_110:                              # %while.body.i.i72.3
                                        #   in Loop: Header=BB52_111 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB52_111:                              # %while.body.i.i72.3
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_110
	nop
# BB#112:                               # %writeUARTChar.exit.i75.3
                                        #   in Loop: Header=BB52_7 Depth=1
	addiu	$1, $zero, 116
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB52_114
	nop
$BB52_113:                              # %while.body.i.i72.4
                                        #   in Loop: Header=BB52_114 Depth=2
	daddiu	$1, $23, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB52_114:                              # %while.body.i.i72.4
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_113
	nop
# BB#115:                               # %writeUARTChar.exit.i75.4
                                        #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $23, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 105
	sb	$1, 0($2)
	j	$BB52_117
	daddiu	$3, $2, 4
$BB52_116:                              # %while.body.i.i72.5
                                        #   in Loop: Header=BB52_117 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB52_117:                              # %while.body.i.i72.5
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_116
	nop
# BB#118:                               # %writeUARTChar.exit.i75.5
                                        #   in Loop: Header=BB52_7 Depth=1
	addiu	$1, $zero, 109
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB52_120
	nop
$BB52_119:                              # %while.body.i.i72.6
                                        #   in Loop: Header=BB52_120 Depth=2
	daddiu	$1, $23, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB52_120:                              # %while.body.i.i72.6
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_119
	nop
# BB#121:                               # %writeUARTChar.exit.i75.6
                                        #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $23, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 101
	sb	$1, 0($2)
	j	$BB52_123
	daddiu	$3, $2, 4
$BB52_122:                              # %while.body.i.i72.7
                                        #   in Loop: Header=BB52_123 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB52_123:                              # %while.body.i.i72.7
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_122
	nop
# BB#124:                               # %writeUARTChar.exit.i75.7
                                        #   in Loop: Header=BB52_7 Depth=1
	addiu	$1, $zero, 58
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB52_126
	nop
$BB52_125:                              # %while.body.i.i72.8
                                        #   in Loop: Header=BB52_126 Depth=2
	daddiu	$1, $23, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB52_126:                              # %while.body.i.i72.8
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_125
	nop
# BB#127:                               # %writeUARTChar.exit.i75.8
                                        #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $23, 127
	dsrl	$4, $22, 1
	dsll	$16, $1, 24
	sb	$18, 0($16)
	ld	$25, 24($fp)            # 8-byte Folded Reload
	jalr	$25
	ld	$gp, 88($fp)
	j	$BB52_129
	daddiu	$2, $16, 4
$BB52_128:                              # %while.body.i.i55
                                        #   in Loop: Header=BB52_129 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB52_129:                              # %while.body.i.i55
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($2)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_128
	nop
# BB#130:                               # %writeUARTChar.exit.i58
                                        #   in Loop: Header=BB52_7 Depth=1
	sb	$18, 0($16)
	lw	$1, 0($2)
	j	$BB52_132
	nop
$BB52_131:                              # %while.body.i.i55.1
                                        #   in Loop: Header=BB52_132 Depth=2
	daddiu	$1, $23, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB52_132:                              # %while.body.i.i55.1
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_131
	nop
# BB#133:                               # %writeUARTChar.exit.i58.1
                                        #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $23, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 99
	sb	$1, 0($2)
	j	$BB52_135
	daddiu	$3, $2, 4
$BB52_134:                              # %while.body.i.i55.2
                                        #   in Loop: Header=BB52_135 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB52_135:                              # %while.body.i.i55.2
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_134
	nop
# BB#136:                               # %writeUARTChar.exit.i58.2
                                        #   in Loop: Header=BB52_7 Depth=1
	addiu	$1, $zero, 121
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB52_138
	nop
$BB52_137:                              # %while.body.i.i55.3
                                        #   in Loop: Header=BB52_138 Depth=2
	daddiu	$1, $23, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB52_138:                              # %while.body.i.i55.3
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_137
	nop
# BB#139:                               # %writeUARTChar.exit.i58.3
                                        #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $23, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 99
	sb	$1, 0($2)
	j	$BB52_141
	daddiu	$3, $2, 4
$BB52_140:                              # %while.body.i.i55.4
                                        #   in Loop: Header=BB52_141 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB52_141:                              # %while.body.i.i55.4
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_140
	nop
# BB#142:                               # %writeUARTChar.exit.i58.4
                                        #   in Loop: Header=BB52_7 Depth=1
	addiu	$1, $zero, 108
	sb	$1, 0($2)
	lw	$1, 0($3)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB52_144
	addiu	$19, $zero, 4096
$BB52_143:                              # %while.body.i.i55.5
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	daddiu	$1, $23, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_143
	nop
$BB52_144:                              # %writeUARTChar.exit.i58.5
                                        #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $23, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 101
	sb	$1, 0($2)
	j	$BB52_146
	daddiu	$3, $2, 4
$BB52_145:                              # %while.body.i.i55.6
                                        #   in Loop: Header=BB52_146 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB52_146:                              # %while.body.i.i55.6
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_145
	nop
# BB#147:                               # %writeUARTChar.exit.i58.6
                                        #   in Loop: Header=BB52_7 Depth=1
	addiu	$1, $zero, 115
	sb	$1, 0($2)
	lw	$1, 0($3)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB52_149
	ld	$18, 56($fp)
$BB52_148:                              # %while.body.i.i55.7
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	daddiu	$1, $23, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB52_148
	nop
$BB52_149:                              # %writeUARTChar.exit.i58.7
                                        #   in Loop: Header=BB52_7 Depth=1
	daddiu	$1, $23, 127
	addiu	$2, $zero, 10
	sll	$17, $17, 1
	dsll	$1, $1, 24
	sb	$2, 0($1)
	sll	$2, $17, 0
	lw	$1, 12($fp)             # 4-byte Folded Reload
	slt	$1, $17, $1
	bne	$1, $zero, $BB52_7
	sd	$2, 80($fp)
# BB#150:                               # %for.end22
	addiu	$2, $zero, 0
	move	$sp, $fp
	ld	$16, 104($sp)           # 8-byte Folded Reload
	ld	$17, 112($sp)           # 8-byte Folded Reload
	ld	$18, 120($sp)           # 8-byte Folded Reload
	ld	$19, 128($sp)           # 8-byte Folded Reload
	ld	$20, 136($sp)           # 8-byte Folded Reload
	ld	$21, 144($sp)           # 8-byte Folded Reload
	ld	$22, 152($sp)           # 8-byte Folded Reload
	ld	$23, 160($sp)           # 8-byte Folded Reload
	ld	$gp, 168($sp)           # 8-byte Folded Reload
	ld	$fp, 176($sp)           # 8-byte Folded Reload
	ld	$ra, 184($sp)           # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 192
	.set	at
	.set	macro
	.set	reorder
	.end	doQuicksort
$tmp211:
	.size	doQuicksort, ($tmp211)-doQuicksort

	.globl	main
	.align	3
	.type	main,@function
	.set	nomips16                # @main
	.ent	main
main:
	.frame	$fp,224,$ra
	.mask 	0x00000000,0
	.fmask	0xd0ff0000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -224
	sd	$ra, 216($sp)           # 8-byte Folded Spill
	sd	$fp, 208($sp)           # 8-byte Folded Spill
	sd	$gp, 200($sp)           # 8-byte Folded Spill
	sd	$23, 192($sp)           # 8-byte Folded Spill
	sd	$22, 184($sp)           # 8-byte Folded Spill
	sd	$21, 176($sp)           # 8-byte Folded Spill
	sd	$20, 168($sp)           # 8-byte Folded Spill
	sd	$19, 160($sp)           # 8-byte Folded Spill
	sd	$18, 152($sp)           # 8-byte Folded Spill
	sd	$17, 144($sp)           # 8-byte Folded Spill
	sd	$16, 136($sp)           # 8-byte Folded Spill
	move	$fp, $sp
	lui	$1, %hi(%neg(%gp_rel(main)))
	addiu	$4, $zero, 85
	daddu	$1, $1, $25
	daddiu	$12, $1, %lo(%neg(%gp_rel(main)))
	ld	$1, %got_page($.str15)($12)
	ld	$5, %got_page($.str16)($12)
	daddiu	$2, $1, %got_ofst($.str15)
	daddiu	$1, $zero, 9
	dsll	$3, $1, 36
	daddiu	$1, $3, 127
	dsll	$1, $1, 24
	daddiu	$6, $1, 4
$BB53_1:                                # %while.body.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_3 Depth 2
	lw	$1, 0($6)
	j	$BB53_3
	nop
$BB53_2:                                # %while.body.i.i
                                        #   in Loop: Header=BB53_3 Depth=2
	daddiu	$1, $3, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB53_3:                                # %while.body.i.i
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_2
	nop
# BB#4:                                 # %writeUARTChar.exit.i
                                        #   in Loop: Header=BB53_1 Depth=1
	daddiu	$1, $3, 127
	dsll	$1, $1, 24
	sb	$4, 0($1)
	daddiu	$1, $2, 1
	lbu	$4, 1($2)
	bne	$4, $zero, $BB53_1
	move	$2, $1
# BB#5:
	daddiu	$1, $zero, 9
	daddiu	$2, $5, %got_ofst($.str16)
	addiu	$4, $zero, 32
	dsll	$3, $1, 36
	daddiu	$1, $3, 127
	dsll	$1, $1, 24
	daddiu	$5, $1, 4
$BB53_6:                                # %while.body.i301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_8 Depth 2
	lw	$1, 0($5)
	j	$BB53_8
	nop
$BB53_7:                                # %while.body.i.i304
                                        #   in Loop: Header=BB53_8 Depth=2
	daddiu	$1, $3, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB53_8:                                # %while.body.i.i304
                                        #   Parent Loop BB53_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_7
	nop
# BB#9:                                 # %writeUARTChar.exit.i307
                                        #   in Loop: Header=BB53_6 Depth=1
	daddiu	$1, $3, 127
	dsll	$1, $1, 24
	sb	$4, 0($1)
	daddiu	$1, $2, 1
	lbu	$4, 1($2)
	bne	$4, $zero, $BB53_6
	move	$2, $1
# BB#10:
	addiu	$1, $zero, 1
	addiu	$23, $zero, 48
	addiu	$20, $zero, 16
	addiu	$18, $zero, 32
	addiu	$21, $zero, 61
	addiu	$16, $zero, 0
                                        # implicit-def: S1
	sw	$1, 116($fp)            # 4-byte Folded Spill
	addiu	$1, $zero, 0
	sw	$1, 128($fp)            # 4-byte Folded Spill
	daddiu	$1, $zero, 9
	dsll	$19, $1, 36
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	sd	$1, 120($fp)            # 8-byte Folded Spill
	ld	$1, %got_page($.str35)($12)
	sd	$1, 104($fp)            # 8-byte Folded Spill
	ld	$1, %got_page($.str40)($12)
	sd	$1, 96($fp)             # 8-byte Folded Spill
	ld	$1, %got_page($.str32)($12)
	sd	$1, 88($fp)             # 8-byte Folded Spill
	ld	$1, %got_page($.str31)($12)
	sd	$1, 80($fp)             # 8-byte Folded Spill
	ld	$1, %got_page($.str36)($12)
	sd	$1, 72($fp)             # 8-byte Folded Spill
	daddiu	$1, $zero, 5
	dsll	$22, $1, 61
	lui	$1, 5
	ori	$1, $1, 35200
	sw	$1, 68($fp)             # 4-byte Folded Spill
	lui	$1, 32512
	daddiu	$1, $1, 12288
	sd	$1, 56($fp)             # 8-byte Folded Spill
	lui	$1, 1
	ori	$1, $1, 54464
	sw	$1, 52($fp)             # 4-byte Folded Spill
	lui	$1, 6
	ori	$1, $1, 27284
	sw	$1, 48($fp)             # 4-byte Folded Spill
	lui	$1, 7
	ori	$1, $1, 21248
	sw	$1, 44($fp)             # 4-byte Folded Spill
	addiu	$1, $zero, 0
	j	$BB53_12
	sw	$1, 40($fp)
$BB53_11:                               # %if.then223
                                        #   in Loop: Header=BB53_12 Depth=1
	ld	$25, %call16(doQuicksort)($12)
	move	$gp, $12
	jalr	$25
	move	$16, $12
	move	$12, $16
	addiu	$16, $zero, 113
$BB53_12:                               # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_311 Depth 2
                                        #     Child Loop BB53_314 Depth 2
                                        #     Child Loop BB53_317 Depth 2
                                        #     Child Loop BB53_320 Depth 2
                                        #     Child Loop BB53_323 Depth 2
                                        #     Child Loop BB53_326 Depth 2
                                        #     Child Loop BB53_329 Depth 2
                                        #     Child Loop BB53_331 Depth 2
                                        #     Child Loop BB53_333 Depth 2
                                        #       Child Loop BB53_335 Depth 3
                                        #     Child Loop BB53_338 Depth 2
                                        #       Child Loop BB53_340 Depth 3
                                        #     Child Loop BB53_343 Depth 2
                                        #       Child Loop BB53_345 Depth 3
                                        #     Child Loop BB53_348 Depth 2
                                        #       Child Loop BB53_350 Depth 3
                                        #     Child Loop BB53_353 Depth 2
                                        #       Child Loop BB53_355 Depth 3
                                        #     Child Loop BB53_358 Depth 2
                                        #       Child Loop BB53_360 Depth 3
                                        #     Child Loop BB53_363 Depth 2
                                        #       Child Loop BB53_365 Depth 3
                                        #     Child Loop BB53_368 Depth 2
                                        #       Child Loop BB53_370 Depth 3
                                        #     Child Loop BB53_373 Depth 2
                                        #       Child Loop BB53_375 Depth 3
                                        #     Child Loop BB53_378 Depth 2
                                        #       Child Loop BB53_380 Depth 3
                                        #     Child Loop BB53_383 Depth 2
                                        #       Child Loop BB53_385 Depth 3
                                        #     Child Loop BB53_388 Depth 2
                                        #       Child Loop BB53_390 Depth 3
                                        #     Child Loop BB53_393 Depth 2
                                        #       Child Loop BB53_395 Depth 3
                                        #     Child Loop BB53_13 Depth 2
                                        #     Child Loop BB53_16 Depth 2
                                        #     Child Loop BB53_18 Depth 2
                                        #     Child Loop BB53_109 Depth 2
                                        #     Child Loop BB53_112 Depth 2
                                        #     Child Loop BB53_114 Depth 2
                                        #       Child Loop BB53_116 Depth 3
                                        #     Child Loop BB53_120 Depth 2
                                        #     Child Loop BB53_123 Depth 2
                                        #     Child Loop BB53_126 Depth 2
                                        #     Child Loop BB53_129 Depth 2
                                        #     Child Loop BB53_132 Depth 2
                                        #     Child Loop BB53_134 Depth 2
                                        #       Child Loop BB53_136 Depth 3
                                        #     Child Loop BB53_139 Depth 2
                                        #     Child Loop BB53_141 Depth 2
                                        #     Child Loop BB53_144 Depth 2
                                        #     Child Loop BB53_147 Depth 2
                                        #     Child Loop BB53_150 Depth 2
                                        #     Child Loop BB53_153 Depth 2
                                        #     Child Loop BB53_156 Depth 2
                                        #     Child Loop BB53_159 Depth 2
                                        #     Child Loop BB53_161 Depth 2
                                        #       Child Loop BB53_163 Depth 3
                                        #     Child Loop BB53_167 Depth 2
                                        #     Child Loop BB53_171 Depth 2
                                        #       Child Loop BB53_173 Depth 3
                                        #     Child Loop BB53_176 Depth 2
                                        #       Child Loop BB53_178 Depth 3
                                        #     Child Loop BB53_181 Depth 2
                                        #       Child Loop BB53_183 Depth 3
                                        #     Child Loop BB53_203 Depth 2
                                        #       Child Loop BB53_205 Depth 3
                                        #     Child Loop BB53_24 Depth 2
                                        #       Child Loop BB53_26 Depth 3
                                        #     Child Loop BB53_29 Depth 2
                                        #       Child Loop BB53_30 Depth 3
                                        #         Child Loop BB53_32 Depth 4
                                        #       Child Loop BB53_36 Depth 3
                                        #       Child Loop BB53_39 Depth 3
                                        #       Child Loop BB53_42 Depth 3
                                        #       Child Loop BB53_44 Depth 3
                                        #         Child Loop BB53_46 Depth 4
                                        #       Child Loop BB53_50 Depth 3
                                        #       Child Loop BB53_53 Depth 3
                                        #       Child Loop BB53_56 Depth 3
                                        #       Child Loop BB53_58 Depth 3
                                        #         Child Loop BB53_60 Depth 4
                                        #       Child Loop BB53_64 Depth 3
                                        #       Child Loop BB53_66 Depth 3
                                        #         Child Loop BB53_68 Depth 4
                                        #       Child Loop BB53_72 Depth 3
                                        #       Child Loop BB53_75 Depth 3
                                        #       Child Loop BB53_78 Depth 3
                                        #       Child Loop BB53_80 Depth 3
                                        #         Child Loop BB53_82 Depth 4
                                        #       Child Loop BB53_86 Depth 3
                                        #       Child Loop BB53_89 Depth 3
                                        #       Child Loop BB53_92 Depth 3
                                        #       Child Loop BB53_94 Depth 3
                                        #         Child Loop BB53_96 Depth 4
                                        #       Child Loop BB53_100 Depth 3
                                        #       Child Loop BB53_103 Depth 3
                                        #     Child Loop BB53_187 Depth 2
                                        #       Child Loop BB53_189 Depth 3
                                        #     Child Loop BB53_191 Depth 2
                                        #       Child Loop BB53_193 Depth 3
                                        #     Child Loop BB53_196 Depth 2
                                        #       Child Loop BB53_198 Depth 3
                                        #     Child Loop BB53_212 Depth 2
                                        #       Child Loop BB53_214 Depth 3
                                        #     Child Loop BB53_217 Depth 2
                                        #       Child Loop BB53_219 Depth 3
                                        #     Child Loop BB53_240 Depth 2
                                        #     Child Loop BB53_242 Depth 2
                                        #       Child Loop BB53_244 Depth 3
                                        #     Child Loop BB53_247 Depth 2
                                        #       Child Loop BB53_249 Depth 3
                                        #     Child Loop BB53_256 Depth 2
                                        #     Child Loop BB53_222 Depth 2
                                        #       Child Loop BB53_224 Depth 3
                                        #     Child Loop BB53_226 Depth 2
                                        #       Child Loop BB53_227 Depth 3
                                        #         Child Loop BB53_229 Depth 4
                                        #       Child Loop BB53_233 Depth 3
                                        #       Child Loop BB53_236 Depth 3
                                        #     Child Loop BB53_253 Depth 2
                                        #     Child Loop BB53_282 Depth 2
                                        #       Child Loop BB53_283 Depth 3
                                        #       Child Loop BB53_284 Depth 3
                                        #       Child Loop BB53_285 Depth 3
                                        #         Child Loop BB53_286 Depth 4
                                        #       Child Loop BB53_288 Depth 3
                                        #       Child Loop BB53_289 Depth 3
                                        #       Child Loop BB53_290 Depth 3
                                        #         Child Loop BB53_291 Depth 4
                                        #       Child Loop BB53_293 Depth 3
                                        #       Child Loop BB53_294 Depth 3
                                        #       Child Loop BB53_295 Depth 3
                                        #         Child Loop BB53_296 Depth 4
                                        #     Child Loop BB53_300 Depth 2
                                        #     Child Loop BB53_302 Depth 2
                                        #     Child Loop BB53_304 Depth 2
                                        #       Child Loop BB53_305 Depth 3
                                        #     Child Loop BB53_264 Depth 2
                                        #       Child Loop BB53_266 Depth 3
                                        #     Child Loop BB53_269 Depth 2
                                        #       Child Loop BB53_271 Depth 3
                                        #     Child Loop BB53_274 Depth 2
                                        #       Child Loop BB53_276 Depth 3
	ld	$6, 120($fp)            # 8-byte Folded Reload
	andi	$2, $16, 255
	addiu	$13, $zero, 10
	bne	$2, $13, $BB53_308
	lui	$7, 128
$BB53_13:                               # %while.cond.i
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$2, 0($6)
	and	$1, $2, $7
	beq	$1, $zero, $BB53_13
	nop
# BB#14:                                # %readUARTChar.exit
                                        #   in Loop: Header=BB53_12 Depth=1
	daddiu	$1, $19, 127
	sd	$6, 120($fp)            # 8-byte Folded Spill
	dsll	$3, $1, 24
	j	$BB53_16
	daddiu	$4, $3, 4
$BB53_15:                               # %while.body.i465
                                        #   in Loop: Header=BB53_16 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_16:                               # %while.body.i465
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($4)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_15
	nop
# BB#17:                                # %writeUARTChar.exit
                                        #   in Loop: Header=BB53_12 Depth=1
	srl	$16, $2, 24
	addiu	$14, $zero, 42
	sb	$16, 0($3)
	lw	$1, 0($4)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB53_19
	addiu	$15, $zero, 47
$BB53_18:                               # %while.body.i.i472
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_18
	nop
$BB53_19:                               # %writeUARTChar.exit.i475
                                        #   in Loop: Header=BB53_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	sb	$13, 0($1)
	addiu	$1, $zero, 83
	sltu	$1, $1, $16
	bne	$1, $zero, $BB53_106
	nop
$BB53_20:                               # %writeUARTChar.exit.i475
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$1, $zero, 75
	sltu	$1, $1, $16
	bne	$1, $zero, $BB53_169
	nop
$BB53_21:                               # %writeUARTChar.exit.i475
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$1, $zero, 65
	beq	$16, $1, $BB53_186
	nop
$BB53_22:                               # %writeUARTChar.exit.i475
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$1, $zero, 68
	bne	$16, $1, $BB53_201
	nop
$BB53_23:                               #   in Loop: Header=BB53_12 Depth=1
	ld	$1, 96($fp)             # 8-byte Folded Reload
	addiu	$2, $zero, 77
	daddiu	$3, $1, %got_ofst($.str40)
$BB53_24:                               # %while.body.i653
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_26 Depth 3
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB53_26
	daddiu	$5, $4, 4
$BB53_25:                               # %while.body.i.i656
                                        #   in Loop: Header=BB53_26 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_26:                               # %while.body.i.i656
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_24 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_25
	nop
# BB#27:                                # %writeUARTChar.exit.i659
                                        #   in Loop: Header=BB53_24 Depth=2
	sb	$2, 0($4)
	daddiu	$1, $3, 1
	lbu	$2, 1($3)
	bne	$2, $zero, $BB53_24
	move	$3, $1
# BB#28:                                #   in Loop: Header=BB53_12 Depth=1
	addiu	$2, $zero, -10
	addiu	$4, $zero, 1
$BB53_29:                               # %for.body
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_30 Depth 3
                                        #         Child Loop BB53_32 Depth 4
                                        #       Child Loop BB53_36 Depth 3
                                        #       Child Loop BB53_39 Depth 3
                                        #       Child Loop BB53_42 Depth 3
                                        #       Child Loop BB53_44 Depth 3
                                        #         Child Loop BB53_46 Depth 4
                                        #       Child Loop BB53_50 Depth 3
                                        #       Child Loop BB53_53 Depth 3
                                        #       Child Loop BB53_56 Depth 3
                                        #       Child Loop BB53_58 Depth 3
                                        #         Child Loop BB53_60 Depth 4
                                        #       Child Loop BB53_64 Depth 3
                                        #       Child Loop BB53_66 Depth 3
                                        #         Child Loop BB53_68 Depth 4
                                        #       Child Loop BB53_72 Depth 3
                                        #       Child Loop BB53_75 Depth 3
                                        #       Child Loop BB53_78 Depth 3
                                        #       Child Loop BB53_80 Depth 3
                                        #         Child Loop BB53_82 Depth 4
                                        #       Child Loop BB53_86 Depth 3
                                        #       Child Loop BB53_89 Depth 3
                                        #       Child Loop BB53_92 Depth 3
                                        #       Child Loop BB53_94 Depth 3
                                        #         Child Loop BB53_96 Depth 4
                                        #       Child Loop BB53_100 Depth 3
                                        #       Child Loop BB53_103 Depth 3
	move	$3, $17
	move	$17, $4
	addiu	$5, $zero, 0
	sll	$4, $17, 0
$BB53_30:                               # %for.body.i671
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB53_32 Depth 4
	daddiu	$1, $19, 127
	dsll	$6, $1, 24
	j	$BB53_32
	daddiu	$7, $6, 4
$BB53_31:                               # %while.body.i.i674
                                        #   in Loop: Header=BB53_32 Depth=4
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_32:                               # %while.body.i.i674
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        #       Parent Loop BB53_30 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	lw	$1, 0($7)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_31
	nop
# BB#33:                                # %writeUARTChar.exit.i678
                                        #   in Loop: Header=BB53_30 Depth=3
	dsrl	$8, $4, 60
	sltu	$1, $4, $22
	addiu	$5, $5, 1
	dsll	$4, $4, 4
	daddiu	$7, $8, 55
	ori	$8, $8, 48
	movn	$7, $8, $1
	sll	$1, $7, 0
	bne	$5, $20, $BB53_30
	sb	$1, 0($6)
# BB#34:                                # %while.body.i683.loopexit
                                        #   in Loop: Header=BB53_29 Depth=2
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB53_36
	daddiu	$5, $4, 4
$BB53_35:                               # %while.body.i.i686
                                        #   in Loop: Header=BB53_36 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_36:                               # %while.body.i.i686
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_35
	nop
# BB#37:                                # %writeUARTChar.exit.i689
                                        #   in Loop: Header=BB53_29 Depth=2
	sb	$18, 0($4)
	lw	$1, 0($5)
	j	$BB53_39
	nop
$BB53_38:                               # %while.body.i.i686.1
                                        #   in Loop: Header=BB53_39 Depth=3
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB53_39:                               # %while.body.i.i686.1
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_38
	nop
# BB#40:                                # %writeUARTChar.exit.i689.1
                                        #   in Loop: Header=BB53_29 Depth=2
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	sb	$14, 0($4)
	j	$BB53_42
	daddiu	$5, $4, 4
$BB53_41:                               # %while.body.i.i686.2
                                        #   in Loop: Header=BB53_42 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_42:                               # %while.body.i.i686.2
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_41
	nop
# BB#43:                                # %writeUARTChar.exit.i689.2
                                        #   in Loop: Header=BB53_29 Depth=2
	sll	$5, $2, 0
	sb	$18, 0($4)
	addiu	$4, $zero, 0
	move	$6, $5
$BB53_44:                               # %for.body.i701
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB53_46 Depth 4
	daddiu	$1, $19, 127
	dsll	$7, $1, 24
	j	$BB53_46
	daddiu	$8, $7, 4
$BB53_45:                               # %while.body.i.i704
                                        #   in Loop: Header=BB53_46 Depth=4
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_46:                               # %while.body.i.i704
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        #       Parent Loop BB53_44 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	lw	$1, 0($8)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_45
	nop
# BB#47:                                # %writeUARTChar.exit.i708
                                        #   in Loop: Header=BB53_44 Depth=3
	dsrl	$9, $6, 60
	sltu	$1, $6, $22
	addiu	$4, $4, 1
	dsll	$6, $6, 4
	daddiu	$8, $9, 55
	ori	$9, $9, 48
	movn	$8, $9, $1
	sll	$1, $8, 0
	bne	$4, $20, $BB53_44
	sb	$1, 0($7)
# BB#48:                                # %while.body.i713.loopexit
                                        #   in Loop: Header=BB53_29 Depth=2
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB53_50
	daddiu	$6, $4, 4
$BB53_49:                               # %while.body.i.i716
                                        #   in Loop: Header=BB53_50 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_50:                               # %while.body.i.i716
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($6)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_49
	nop
# BB#51:                                # %writeUARTChar.exit.i719
                                        #   in Loop: Header=BB53_29 Depth=2
	sb	$18, 0($4)
	lw	$1, 0($6)
	j	$BB53_53
	nop
$BB53_52:                               # %while.body.i.i716.1
                                        #   in Loop: Header=BB53_53 Depth=3
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB53_53:                               # %while.body.i.i716.1
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_52
	nop
# BB#54:                                # %writeUARTChar.exit.i719.1
                                        #   in Loop: Header=BB53_29 Depth=2
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	sb	$21, 0($4)
	j	$BB53_56
	daddiu	$6, $4, 4
$BB53_55:                               # %while.body.i.i716.2
                                        #   in Loop: Header=BB53_56 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_56:                               # %while.body.i.i716.2
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($6)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_55
	nop
# BB#57:                                # %writeUARTChar.exit.i719.2
                                        #   in Loop: Header=BB53_29 Depth=2
	sb	$18, 0($4)
	mul	$4, $2, $17
	addiu	$7, $zero, 0
	sll	$6, $4, 0
	move	$8, $6
$BB53_58:                               # %for.body.i731
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB53_60 Depth 4
	daddiu	$1, $19, 127
	dsll	$9, $1, 24
	j	$BB53_60
	daddiu	$10, $9, 4
$BB53_59:                               # %while.body.i.i734
                                        #   in Loop: Header=BB53_60 Depth=4
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_60:                               # %while.body.i.i734
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        #       Parent Loop BB53_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	lw	$1, 0($10)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_59
	nop
# BB#61:                                # %writeUARTChar.exit.i738
                                        #   in Loop: Header=BB53_58 Depth=3
	dsrl	$11, $8, 60
	sltu	$1, $8, $22
	addiu	$7, $7, 1
	dsll	$8, $8, 4
	daddiu	$10, $11, 55
	ori	$11, $11, 48
	movn	$10, $11, $1
	sll	$1, $10, 0
	bne	$7, $20, $BB53_58
	sb	$1, 0($9)
# BB#62:                                # %while.body.i743.loopexit
                                        #   in Loop: Header=BB53_29 Depth=2
	daddiu	$1, $19, 127
	dsll	$7, $1, 24
	j	$BB53_64
	daddiu	$8, $7, 4
$BB53_63:                               # %while.body.i.i746
                                        #   in Loop: Header=BB53_64 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_64:                               # %while.body.i.i746
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($8)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_63
	nop
# BB#65:                                # %writeUARTChar.exit.i749
                                        #   in Loop: Header=BB53_29 Depth=2
	sb	$13, 0($7)
	addiu	$7, $zero, 0
$BB53_66:                               # %for.body.i761
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB53_68 Depth 4
	daddiu	$1, $19, 127
	dsll	$8, $1, 24
	j	$BB53_68
	daddiu	$9, $8, 4
$BB53_67:                               # %while.body.i.i764
                                        #   in Loop: Header=BB53_68 Depth=4
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_68:                               # %while.body.i.i764
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        #       Parent Loop BB53_66 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	lw	$1, 0($9)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_67
	nop
# BB#69:                                # %writeUARTChar.exit.i768
                                        #   in Loop: Header=BB53_66 Depth=3
	dsrl	$10, $6, 60
	sltu	$1, $6, $22
	addiu	$7, $7, 1
	dsll	$6, $6, 4
	daddiu	$9, $10, 55
	ori	$10, $10, 48
	movn	$9, $10, $1
	sll	$1, $9, 0
	bne	$7, $20, $BB53_66
	sb	$1, 0($8)
# BB#70:                                # %while.body.i773.loopexit
                                        #   in Loop: Header=BB53_29 Depth=2
	daddiu	$1, $19, 127
	dsll	$6, $1, 24
	j	$BB53_72
	daddiu	$7, $6, 4
$BB53_71:                               # %while.body.i.i776
                                        #   in Loop: Header=BB53_72 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_72:                               # %while.body.i.i776
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($7)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_71
	nop
# BB#73:                                # %writeUARTChar.exit.i779
                                        #   in Loop: Header=BB53_29 Depth=2
	sb	$18, 0($6)
	lw	$1, 0($7)
	j	$BB53_75
	nop
$BB53_74:                               # %while.body.i.i776.1
                                        #   in Loop: Header=BB53_75 Depth=3
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB53_75:                               # %while.body.i.i776.1
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_74
	nop
# BB#76:                                # %writeUARTChar.exit.i779.1
                                        #   in Loop: Header=BB53_29 Depth=2
	daddiu	$1, $19, 127
	dsll	$6, $1, 24
	sb	$15, 0($6)
	j	$BB53_78
	daddiu	$7, $6, 4
$BB53_77:                               # %while.body.i.i776.2
                                        #   in Loop: Header=BB53_78 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_78:                               # %while.body.i.i776.2
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($7)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_77
	nop
# BB#79:                                # %writeUARTChar.exit.i779.2
                                        #   in Loop: Header=BB53_29 Depth=2
	sb	$18, 0($6)
	addiu	$6, $zero, 0
$BB53_80:                               # %for.body.i791
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB53_82 Depth 4
	daddiu	$1, $19, 127
	dsll	$7, $1, 24
	j	$BB53_82
	daddiu	$8, $7, 4
$BB53_81:                               # %while.body.i.i794
                                        #   in Loop: Header=BB53_82 Depth=4
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_82:                               # %while.body.i.i794
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        #       Parent Loop BB53_80 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	lw	$1, 0($8)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_81
	nop
# BB#83:                                # %writeUARTChar.exit.i798
                                        #   in Loop: Header=BB53_80 Depth=3
	dsrl	$9, $5, 60
	sltu	$1, $5, $22
	addiu	$6, $6, 1
	dsll	$5, $5, 4
	daddiu	$8, $9, 55
	ori	$9, $9, 48
	movn	$8, $9, $1
	sll	$1, $8, 0
	bne	$6, $20, $BB53_80
	sb	$1, 0($7)
# BB#84:                                # %while.body.i803.loopexit
                                        #   in Loop: Header=BB53_29 Depth=2
	daddiu	$1, $19, 127
	dsll	$5, $1, 24
	j	$BB53_86
	daddiu	$6, $5, 4
$BB53_85:                               # %while.body.i.i806
                                        #   in Loop: Header=BB53_86 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_86:                               # %while.body.i.i806
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($6)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_85
	nop
# BB#87:                                # %writeUARTChar.exit.i809
                                        #   in Loop: Header=BB53_29 Depth=2
	sb	$18, 0($5)
	lw	$1, 0($6)
	j	$BB53_89
	nop
$BB53_88:                               # %while.body.i.i806.1
                                        #   in Loop: Header=BB53_89 Depth=3
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB53_89:                               # %while.body.i.i806.1
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_88
	nop
# BB#90:                                # %writeUARTChar.exit.i809.1
                                        #   in Loop: Header=BB53_29 Depth=2
	daddiu	$1, $19, 127
	dsll	$5, $1, 24
	sb	$21, 0($5)
	j	$BB53_92
	daddiu	$6, $5, 4
$BB53_91:                               # %while.body.i.i806.2
                                        #   in Loop: Header=BB53_92 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_92:                               # %while.body.i.i806.2
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($6)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_91
	nop
# BB#93:                                # %writeUARTChar.exit.i809.2
                                        #   in Loop: Header=BB53_29 Depth=2
	movz	$17, $3, $2
	sb	$18, 0($5)
	addiu	$5, $zero, 0
	sll	$3, $17, 0
$BB53_94:                               # %for.body.i821
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB53_96 Depth 4
	daddiu	$1, $19, 127
	dsll	$6, $1, 24
	j	$BB53_96
	daddiu	$7, $6, 4
$BB53_95:                               # %while.body.i.i824
                                        #   in Loop: Header=BB53_96 Depth=4
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_96:                               # %while.body.i.i824
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        #       Parent Loop BB53_94 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	lw	$1, 0($7)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_95
	nop
# BB#97:                                # %writeUARTChar.exit.i828
                                        #   in Loop: Header=BB53_94 Depth=3
	dsrl	$8, $3, 60
	sltu	$1, $3, $22
	addiu	$5, $5, 1
	dsll	$3, $3, 4
	daddiu	$7, $8, 55
	ori	$8, $8, 48
	movn	$7, $8, $1
	sll	$1, $7, 0
	bne	$5, $20, $BB53_94
	sb	$1, 0($6)
# BB#98:                                # %while.body.i833.loopexit
                                        #   in Loop: Header=BB53_29 Depth=2
	daddiu	$1, $19, 127
	dsll	$3, $1, 24
	j	$BB53_100
	daddiu	$5, $3, 4
$BB53_99:                               # %while.body.i.i836
                                        #   in Loop: Header=BB53_100 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_100:                              # %while.body.i.i836
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_99
	nop
# BB#101:                               # %writeUARTChar.exit.i839
                                        #   in Loop: Header=BB53_29 Depth=2
	sb	$13, 0($3)
	lw	$1, 0($5)
	j	$BB53_103
	nop
$BB53_102:                              # %while.body.i.i847
                                        #   in Loop: Header=BB53_103 Depth=3
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB53_103:                              # %while.body.i.i847
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_102
	nop
# BB#104:                               # %writeUARTChar.exit.i850
                                        #   in Loop: Header=BB53_29 Depth=2
	daddiu	$1, $19, 127
	addiu	$2, $2, 1
	dsll	$1, $1, 24
	sb	$13, 0($1)
	addiu	$1, $zero, 1
	bne	$2, $13, $BB53_29
	movz	$4, $1, $4
# BB#105:                               #   in Loop: Header=BB53_12 Depth=1
	lw	$1, 68($fp)             # 4-byte Folded Reload
	j	$BB53_207
	sw	$1, 116($fp)
$BB53_106:                              # %writeUARTChar.exit.i475
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$1, $zero, 84
	bne	$16, $1, $BB53_207
	nop
$BB53_107:                              # %while.body.i552.preheader
                                        #   in Loop: Header=BB53_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	j	$BB53_109
	daddiu	$3, $2, 4
$BB53_108:                              # %while.body.i.i555
                                        #   in Loop: Header=BB53_109 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_109:                              # %while.body.i.i555
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_108
	nop
# BB#110:                               # %writeUARTChar.exit.i558
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$1, $zero, 88
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB53_112
	nop
$BB53_111:                              # %while.body.i.i555.1
                                        #   in Loop: Header=BB53_112 Depth=2
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB53_112:                              # %while.body.i.i555.1
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_111
	nop
# BB#113:                               # %writeUARTChar.exit.i558.1
                                        #   in Loop: Header=BB53_12 Depth=1
	daddiu	$1, $19, 127
	addiu	$4, $zero, 0
	dsll	$2, $1, 24
	addiu	$1, $zero, 58
	sb	$1, 0($2)
	daddiu	$1, $19, 5
	dsll	$1, $1, 24
	lw	$3, 0($1)
$BB53_114:                              # %for.body.i570
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_116 Depth 3
	j	$BB53_116
	daddiu	$1, $2, 4
$BB53_115:                              # %while.body.i.i573
                                        #   in Loop: Header=BB53_116 Depth=3
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB53_116:                              # %while.body.i.i573
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_114 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_115
	nop
# BB#117:                               # %writeUARTChar.exit.i577
                                        #   in Loop: Header=BB53_114 Depth=2
	dsrl	$6, $3, 60
	sltu	$1, $3, $22
	addiu	$4, $4, 1
	dsll	$3, $3, 4
	daddiu	$5, $6, 55
	ori	$6, $6, 48
	movn	$5, $6, $1
	sll	$1, $5, 0
	daddiu	$5, $19, 127
	dsll	$5, $5, 24
	bne	$4, $20, $BB53_114
	sb	$1, 0($5)
# BB#118:                               # %while.body.i582.loopexit
                                        #   in Loop: Header=BB53_12 Depth=1
	j	$BB53_120
	daddiu	$1, $5, 4
$BB53_119:                              # %while.body.i.i585
                                        #   in Loop: Header=BB53_120 Depth=2
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB53_120:                              # %while.body.i.i585
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_119
	nop
# BB#121:                               # %writeUARTChar.exit.i588
                                        #   in Loop: Header=BB53_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	sb	$18, 0($2)
	j	$BB53_123
	daddiu	$3, $2, 4
$BB53_122:                              # %while.body.i.i585.1
                                        #   in Loop: Header=BB53_123 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_123:                              # %while.body.i.i585.1
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_122
	nop
# BB#124:                               # %writeUARTChar.exit.i588.1
                                        #   in Loop: Header=BB53_12 Depth=1
	sb	$18, 0($2)
	lw	$1, 0($3)
	j	$BB53_126
	nop
$BB53_125:                              # %while.body.i.i585.2
                                        #   in Loop: Header=BB53_126 Depth=2
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB53_126:                              # %while.body.i.i585.2
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_125
	nop
# BB#127:                               # %writeUARTChar.exit.i588.2
                                        #   in Loop: Header=BB53_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	sb	$18, 0($2)
	j	$BB53_129
	daddiu	$3, $2, 4
$BB53_128:                              # %while.body.i.i585.3
                                        #   in Loop: Header=BB53_129 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_129:                              # %while.body.i.i585.3
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_128
	nop
# BB#130:                               # %writeUARTChar.exit.i588.3
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$1, $zero, 89
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB53_132
	nop
$BB53_131:                              # %while.body.i.i585.4
                                        #   in Loop: Header=BB53_132 Depth=2
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB53_132:                              # %while.body.i.i585.4
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_131
	nop
# BB#133:                               # %writeUARTChar.exit.i588.4
                                        #   in Loop: Header=BB53_12 Depth=1
	daddiu	$1, $19, 127
	addiu	$4, $zero, 0
	dsll	$2, $1, 24
	addiu	$1, $zero, 58
	sb	$1, 0($2)
	daddiu	$1, $19, 5
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$3, 0($1)
$BB53_134:                              # %for.body.i600
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_136 Depth 3
	j	$BB53_136
	daddiu	$1, $2, 4
$BB53_135:                              # %while.body.i.i603
                                        #   in Loop: Header=BB53_136 Depth=3
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB53_136:                              # %while.body.i.i603
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_134 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_135
	nop
# BB#137:                               # %writeUARTChar.exit.i607
                                        #   in Loop: Header=BB53_134 Depth=2
	dsrl	$6, $3, 60
	sltu	$1, $3, $22
	addiu	$4, $4, 1
	dsll	$3, $3, 4
	daddiu	$5, $6, 55
	ori	$6, $6, 48
	movn	$5, $6, $1
	sll	$1, $5, 0
	daddiu	$5, $19, 127
	dsll	$5, $5, 24
	bne	$4, $20, $BB53_134
	sb	$1, 0($5)
# BB#138:                               # %while.body.i612.loopexit
                                        #   in Loop: Header=BB53_12 Depth=1
	daddiu	$1, $5, 4
	lw	$1, 0($1)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB53_140
	addiu	$13, $zero, 10
$BB53_139:                              # %while.body.i.i615
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_139
	nop
$BB53_140:                              # %writeUARTChar.exit.i618
                                        #   in Loop: Header=BB53_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	daddiu	$3, $2, 4
	sb	$18, 0($2)
	lw	$1, 0($3)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB53_142
	addiu	$21, $zero, 61
$BB53_141:                              # %while.body.i.i615.1
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_141
	nop
$BB53_142:                              # %writeUARTChar.exit.i618.1
                                        #   in Loop: Header=BB53_12 Depth=1
	sb	$18, 0($2)
	lw	$1, 0($3)
	j	$BB53_144
	nop
$BB53_143:                              # %while.body.i.i615.2
                                        #   in Loop: Header=BB53_144 Depth=2
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB53_144:                              # %while.body.i.i615.2
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_143
	nop
# BB#145:                               # %writeUARTChar.exit.i618.2
                                        #   in Loop: Header=BB53_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	sb	$18, 0($2)
	j	$BB53_147
	daddiu	$3, $2, 4
$BB53_146:                              # %while.body.i.i615.3
                                        #   in Loop: Header=BB53_147 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_147:                              # %while.body.i.i615.3
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_146
	nop
# BB#148:                               # %writeUARTChar.exit.i618.3
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$1, $zero, 68
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB53_150
	nop
$BB53_149:                              # %while.body.i.i615.4
                                        #   in Loop: Header=BB53_150 Depth=2
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB53_150:                              # %while.body.i.i615.4
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_149
	nop
# BB#151:                               # %writeUARTChar.exit.i618.4
                                        #   in Loop: Header=BB53_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 111
	sb	$1, 0($2)
	j	$BB53_153
	daddiu	$3, $2, 4
$BB53_152:                              # %while.body.i.i615.5
                                        #   in Loop: Header=BB53_153 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_153:                              # %while.body.i.i615.5
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_152
	nop
# BB#154:                               # %writeUARTChar.exit.i618.5
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$1, $zero, 119
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB53_156
	nop
$BB53_155:                              # %while.body.i.i615.6
                                        #   in Loop: Header=BB53_156 Depth=2
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB53_156:                              # %while.body.i.i615.6
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_155
	nop
# BB#157:                               # %writeUARTChar.exit.i618.6
                                        #   in Loop: Header=BB53_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 110
	sb	$1, 0($2)
	j	$BB53_159
	daddiu	$3, $2, 4
$BB53_158:                              # %while.body.i.i615.7
                                        #   in Loop: Header=BB53_159 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_159:                              # %while.body.i.i615.7
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_158
	nop
# BB#160:                               # %writeUARTChar.exit.i618.7
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$1, $zero, 58
	addiu	$3, $zero, 0
	sb	$1, 0($2)
	daddiu	$1, $19, 5
	dsll	$1, $1, 24
	daddiu	$1, $1, 8
	lw	$2, 0($1)
$BB53_161:                              # %for.body.i630
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_163 Depth 3
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB53_163
	daddiu	$5, $4, 4
$BB53_162:                              # %while.body.i.i633
                                        #   in Loop: Header=BB53_163 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_163:                              # %while.body.i.i633
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_161 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_162
	nop
# BB#164:                               # %writeUARTChar.exit.i637
                                        #   in Loop: Header=BB53_161 Depth=2
	dsrl	$6, $2, 60
	sltu	$1, $2, $22
	addiu	$3, $3, 1
	dsll	$2, $2, 4
	daddiu	$5, $6, 55
	ori	$6, $6, 48
	movn	$5, $6, $1
	sll	$1, $5, 0
	bne	$3, $20, $BB53_161
	sb	$1, 0($4)
# BB#165:                               # %while.body.i642.loopexit
                                        #   in Loop: Header=BB53_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	j	$BB53_167
	daddiu	$3, $2, 4
$BB53_166:                              # %while.body.i.i645
                                        #   in Loop: Header=BB53_167 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_167:                              # %while.body.i.i645
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_166
	nop
# BB#168:                               # %writeUARTChar.exit.i648
                                        #   in Loop: Header=BB53_12 Depth=1
	j	$BB53_207
	sb	$13, 0($2)
$BB53_169:                              # %writeUARTChar.exit.i475
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$1, $zero, 76
	bne	$16, $1, $BB53_207
	nop
$BB53_170:                              #   in Loop: Header=BB53_12 Depth=1
	ld	$1, 88($fp)             # 8-byte Folded Reload
	addiu	$2, $zero, 76
	daddiu	$3, $1, %got_ofst($.str32)
$BB53_171:                              # %while.body.i491
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_173 Depth 3
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB53_173
	daddiu	$5, $4, 4
$BB53_172:                              # %while.body.i.i494
                                        #   in Loop: Header=BB53_173 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_173:                              # %while.body.i.i494
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_171 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_172
	nop
# BB#174:                               # %writeUARTChar.exit.i497
                                        #   in Loop: Header=BB53_171 Depth=2
	sb	$2, 0($4)
	daddiu	$1, $3, 1
	lbu	$2, 1($3)
	bne	$2, $zero, $BB53_171
	move	$3, $1
# BB#175:                               # %writeString.exit498
                                        #   in Loop: Header=BB53_12 Depth=1
	ld	$1, %got_page($.str33)($12)
	addiu	$3, $zero, 32
	#APP
	ll $v0, 0($a0)
	#NO_APP
	#APP
	sc $a1, 0($a0)
	#NO_APP
	#APP
	move $v0, $a1
	#NO_APP
	daddiu	$2, $1, %got_ofst($.str33)
$BB53_176:                              # %while.body.i502
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_178 Depth 3
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB53_178
	daddiu	$5, $4, 4
$BB53_177:                              # %while.body.i.i505
                                        #   in Loop: Header=BB53_178 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_178:                              # %while.body.i.i505
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_177
	nop
# BB#179:                               # %writeUARTChar.exit.i508
                                        #   in Loop: Header=BB53_176 Depth=2
	sb	$3, 0($4)
	daddiu	$1, $2, 1
	lbu	$3, 1($2)
	bne	$3, $zero, $BB53_176
	move	$2, $1
# BB#180:                               # %writeString.exit509
                                        #   in Loop: Header=BB53_12 Depth=1
	ld	$1, %got_page($.str34)($12)
	addiu	$3, $zero, 32
	#APP
	ll $v0, 0($a0)
	#NO_APP
	#APP
	sc $a1, 0($a0)
	#NO_APP
	#APP
	move $v0, $a1
	#NO_APP
	daddiu	$2, $1, %got_ofst($.str34)
$BB53_181:                              # %while.body.i513
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_183 Depth 3
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB53_183
	daddiu	$5, $4, 4
$BB53_182:                              # %while.body.i.i516
                                        #   in Loop: Header=BB53_183 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_183:                              # %while.body.i.i516
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_181 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_182
	nop
# BB#184:                               # %writeUARTChar.exit.i519
                                        #   in Loop: Header=BB53_181 Depth=2
	sb	$3, 0($4)
	daddiu	$1, $2, 1
	lbu	$3, 1($2)
	bne	$3, $zero, $BB53_181
	move	$2, $1
# BB#185:                               # %writeUARTChar.exit.i519
                                        #   in Loop: Header=BB53_12 Depth=1
	j	$BB53_207
	nop
$BB53_186:                              #   in Loop: Header=BB53_12 Depth=1
	ld	$1, 104($fp)            # 8-byte Folded Reload
	addiu	$2, $zero, 65
	daddiu	$3, $1, %got_ofst($.str35)
$BB53_187:                              # %while.body.i524
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_189 Depth 3
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB53_189
	daddiu	$5, $4, 4
$BB53_188:                              # %while.body.i.i527
                                        #   in Loop: Header=BB53_189 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_189:                              # %while.body.i.i527
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_187 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_188
	nop
# BB#190:                               # %writeUARTChar.exit.i530
                                        #   in Loop: Header=BB53_187 Depth=2
	sb	$2, 0($4)
	daddiu	$1, $3, 1
	addiu	$4, $zero, 0
	lbu	$2, 1($3)
	bne	$2, $zero, $BB53_187
	move	$3, $1
$BB53_191:                              # %for.body.i
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_193 Depth 3
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	j	$BB53_193
	daddiu	$3, $2, 4
$BB53_192:                              # %while.body.i.i536
                                        #   in Loop: Header=BB53_193 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_193:                              # %while.body.i.i536
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_191 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_192
	nop
# BB#194:                               # %writeUARTChar.exit.i537
                                        #   in Loop: Header=BB53_191 Depth=2
	addiu	$4, $4, 1
	bne	$4, $20, $BB53_191
	sb	$23, 0($2)
# BB#195:                               #   in Loop: Header=BB53_12 Depth=1
	ld	$1, 72($fp)             # 8-byte Folded Reload
	addiu	$2, $zero, 32
	daddiu	$3, $1, %got_ofst($.str36)
$BB53_196:                              # %while.body.i541
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_198 Depth 3
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB53_198
	daddiu	$5, $4, 4
$BB53_197:                              # %while.body.i.i544
                                        #   in Loop: Header=BB53_198 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_198:                              # %while.body.i.i544
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_196 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_197
	nop
# BB#199:                               # %writeUARTChar.exit.i547
                                        #   in Loop: Header=BB53_196 Depth=2
	sb	$2, 0($4)
	daddiu	$1, $3, 1
	lbu	$2, 1($3)
	bne	$2, $zero, $BB53_196
	move	$3, $1
# BB#200:                               # %writeUARTChar.exit.i547
                                        #   in Loop: Header=BB53_12 Depth=1
	j	$BB53_207
	nop
$BB53_201:                              # %writeUARTChar.exit.i475
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$1, $zero, 70
	bne	$16, $1, $BB53_207
	nop
$BB53_202:                              #   in Loop: Header=BB53_12 Depth=1
	ld	$1, 80($fp)             # 8-byte Folded Reload
	addiu	$2, $zero, 70
	daddiu	$3, $1, %got_ofst($.str31)
$BB53_203:                              # %while.body.i480
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_205 Depth 3
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB53_205
	daddiu	$5, $4, 4
$BB53_204:                              # %while.body.i.i483
                                        #   in Loop: Header=BB53_205 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_205:                              # %while.body.i.i483
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_203 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_204
	nop
# BB#206:                               # %writeUARTChar.exit.i486
                                        #   in Loop: Header=BB53_203 Depth=2
	sb	$2, 0($4)
	daddiu	$1, $3, 1
	lbu	$2, 1($3)
	bne	$2, $zero, $BB53_203
	move	$3, $1
$BB53_207:                              # %if.end53
                                        #   in Loop: Header=BB53_12 Depth=1
	ld	$1, %got_page($.str49)($12)
	addiu	$3, $zero, 67
	beq	$16, $3, $BB53_222
	daddiu	$4, $1, %got_ofst($.str49)
$BB53_208:                              # %if.end53
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$1, $zero, 75
	bne	$16, $1, $BB53_398
	nop
$BB53_209:                              # %if.then127
                                        #   in Loop: Header=BB53_12 Depth=1
	lw	$1, 128($fp)            # 4-byte Folded Reload
	andi	$1, $1, 255
	bne	$1, $zero, $BB53_211
	nop
# BB#210:                               # %if.then131
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$1, $zero, 1
	#APP
	CIncBase $c4, $c4, $a0
	#NO_APP
	#APP
	CGetLen $v0, $c4
	#NO_APP
	#APP
	CSetLen $c4, $c4, $a0
	#NO_APP
	sw	$1, 128($fp)            # 4-byte Folded Spill
$BB53_211:                              # %if.end134
                                        #   in Loop: Header=BB53_12 Depth=1
	ld	$1, %got_page($.str51)($12)
	addiu	$3, $zero, 67
	daddiu	$2, $1, %got_ofst($.str51)
$BB53_212:                              # %while.body.i1041
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_214 Depth 3
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB53_214
	daddiu	$5, $4, 4
$BB53_213:                              # %while.body.i.i1044
                                        #   in Loop: Header=BB53_214 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_214:                              # %while.body.i.i1044
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_212 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_213
	nop
# BB#215:                               # %writeUARTChar.exit.i1047
                                        #   in Loop: Header=BB53_212 Depth=2
	sb	$3, 0($4)
	daddiu	$1, $2, 1
	lbu	$3, 1($2)
	bne	$3, $zero, $BB53_212
	move	$2, $1
# BB#216:                               # %writeString.exit1048
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$2, $zero, 0
                                        # implicit-def: V1_64
	#APP
	CGetBase $v0, $c4
	#NO_APP
$BB53_217:                              # %for.body.i1059
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_219 Depth 3
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB53_219
	daddiu	$5, $4, 4
$BB53_218:                              # %while.body.i.i1062
                                        #   in Loop: Header=BB53_219 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_219:                              # %while.body.i.i1062
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_217 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_218
	nop
# BB#220:                               # %writeUARTChar.exit.i1066
                                        #   in Loop: Header=BB53_217 Depth=2
	dsrl	$6, $3, 60
	sltu	$1, $3, $22
	addiu	$2, $2, 1
	dsll	$3, $3, 4
	daddiu	$5, $6, 55
	ori	$6, $6, 48
	movn	$5, $6, $1
	sll	$1, $5, 0
	bne	$2, $20, $BB53_217
	sb	$1, 0($4)
# BB#221:                               # %while.body.i1071.loopexit
                                        #   in Loop: Header=BB53_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	j	$BB53_240
	daddiu	$3, $2, 4
$BB53_222:                              # %while.body.i989
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_224 Depth 3
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	j	$BB53_224
	daddiu	$5, $2, 4
$BB53_223:                              # %while.body.i.i992
                                        #   in Loop: Header=BB53_224 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_224:                              # %while.body.i.i992
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_222 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_223
	nop
# BB#225:                               # %writeUARTChar.exit.i995
                                        #   in Loop: Header=BB53_222 Depth=2
	sb	$3, 0($2)
	daddiu	$1, $4, 1
	addiu	$2, $zero, 0
	lbu	$3, 1($4)
	bne	$3, $zero, $BB53_222
	move	$4, $1
$BB53_226:                              # %for.body118
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_227 Depth 3
                                        #         Child Loop BB53_229 Depth 4
                                        #       Child Loop BB53_233 Depth 3
                                        #       Child Loop BB53_236 Depth 3
	daddiu	$1, $zero, 9
	addiu	$4, $zero, 0
	dsll	$1, $1, 37
	daddiu	$1, $1, 255
	dsll	$1, $1, 23
	lw	$1, 0($1)
	sll	$3, $1, 0
$BB53_227:                              # %for.body.i1007
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_226 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB53_229 Depth 4
	daddiu	$1, $19, 127
	dsll	$5, $1, 24
	j	$BB53_229
	daddiu	$6, $5, 4
$BB53_228:                              # %while.body.i.i1010
                                        #   in Loop: Header=BB53_229 Depth=4
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_229:                              # %while.body.i.i1010
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_226 Depth=2
                                        #       Parent Loop BB53_227 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	lw	$1, 0($6)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_228
	nop
# BB#230:                               # %writeUARTChar.exit.i1014
                                        #   in Loop: Header=BB53_227 Depth=3
	dsrl	$7, $3, 60
	sltu	$1, $3, $22
	addiu	$4, $4, 1
	dsll	$3, $3, 4
	daddiu	$6, $7, 55
	ori	$7, $7, 48
	movn	$6, $7, $1
	sll	$1, $6, 0
	bne	$4, $20, $BB53_227
	sb	$1, 0($5)
# BB#231:                               # %while.body.i1019.loopexit
                                        #   in Loop: Header=BB53_226 Depth=2
	daddiu	$1, $19, 127
	dsll	$3, $1, 24
	j	$BB53_233
	daddiu	$4, $3, 4
$BB53_232:                              # %while.body.i.i1022
                                        #   in Loop: Header=BB53_233 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_233:                              # %while.body.i.i1022
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_226 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($4)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_232
	nop
# BB#234:                               # %writeUARTChar.exit.i1025
                                        #   in Loop: Header=BB53_226 Depth=2
	addiu	$1, $zero, 44
	sb	$1, 0($3)
	lw	$1, 0($4)
	j	$BB53_236
	nop
$BB53_235:                              # %while.body.i.i1022.1
                                        #   in Loop: Header=BB53_236 Depth=3
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB53_236:                              # %while.body.i.i1022.1
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_226 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_235
	nop
# BB#237:                               # %writeUARTChar.exit.i1025.1
                                        #   in Loop: Header=BB53_226 Depth=2
	daddiu	$1, $19, 127
	addiu	$2, $2, 1
	dsll	$3, $1, 24
	bne	$2, $13, $BB53_226
	sb	$18, 0($3)
# BB#238:                               # %while.body.i1030.loopexit
                                        #   in Loop: Header=BB53_12 Depth=1
	j	$BB53_253
	daddiu	$1, $3, 4
$BB53_239:                              # %while.body.i.i1074
                                        #   in Loop: Header=BB53_240 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_240:                              # %while.body.i.i1074
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_239
	nop
# BB#241:                               # %writeUARTChar.exit.i1077
                                        #   in Loop: Header=BB53_12 Depth=1
	ld	$1, %got_page($.str52)($12)
	sb	$13, 0($2)
	addiu	$3, $zero, 67
	daddiu	$2, $1, %got_ofst($.str52)
$BB53_242:                              # %while.body.i1082
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_244 Depth 3
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB53_244
	daddiu	$5, $4, 4
$BB53_243:                              # %while.body.i.i1085
                                        #   in Loop: Header=BB53_244 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_244:                              # %while.body.i.i1085
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_242 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_243
	nop
# BB#245:                               # %writeUARTChar.exit.i1088
                                        #   in Loop: Header=BB53_242 Depth=2
	sb	$3, 0($4)
	daddiu	$1, $2, 1
	lbu	$3, 1($2)
	bne	$3, $zero, $BB53_242
	move	$2, $1
# BB#246:                               # %writeString.exit1089
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$2, $zero, 0
                                        # implicit-def: V1_64
	#APP
	CGetLen $v0, $c4
	#NO_APP
$BB53_247:                              # %for.body.i1100
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_249 Depth 3
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB53_249
	daddiu	$5, $4, 4
$BB53_248:                              # %while.body.i.i1103
                                        #   in Loop: Header=BB53_249 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_249:                              # %while.body.i.i1103
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_247 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_248
	nop
# BB#250:                               # %writeUARTChar.exit.i1107
                                        #   in Loop: Header=BB53_247 Depth=2
	dsrl	$6, $3, 60
	sltu	$1, $3, $22
	addiu	$2, $2, 1
	dsll	$3, $3, 4
	daddiu	$5, $6, 55
	ori	$6, $6, 48
	movn	$5, $6, $1
	sll	$1, $5, 0
	bne	$2, $20, $BB53_247
	sb	$1, 0($4)
# BB#251:                               # %while.body.i1112.loopexit
                                        #   in Loop: Header=BB53_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	j	$BB53_256
	daddiu	$3, $2, 4
$BB53_252:                              # %while.body.i.i1033
                                        #   in Loop: Header=BB53_253 Depth=2
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB53_253:                              # %while.body.i.i1033
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_252
	nop
# BB#254:                               # %writeUARTChar.exit.i1036
                                        #   in Loop: Header=BB53_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	j	$BB53_258
	sb	$13, 0($1)
$BB53_255:                              # %while.body.i.i1115
                                        #   in Loop: Header=BB53_256 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_256:                              # %while.body.i.i1115
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_255
	nop
# BB#257:                               # %writeUARTChar.exit.i1118
                                        #   in Loop: Header=BB53_12 Depth=1
	sb	$13, 0($2)
	#APP
	MFC2 $0, $0, 4
	#NO_APP
$BB53_258:                              # %if.end138
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$1, $zero, 77
	sltu	$1, $1, $16
	bne	$1, $zero, $BB53_261
	nop
$BB53_259:                              # %if.end138
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$1, $zero, 66
	bne	$16, $1, $BB53_12
	nop
$BB53_260:                              # %if.then217
                                        #   in Loop: Header=BB53_12 Depth=1
	ld	$25, %call16(arrayBench)($12)
	move	$gp, $12
	jalr	$25
	move	$16, $12
	move	$12, $16
	j	$BB53_12
	addiu	$16, $zero, 66
$BB53_261:                              # %if.end138
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$1, $zero, 85
	sltu	$1, $1, $16
	bne	$1, $zero, $BB53_279
	nop
$BB53_262:                              # %if.end138
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$1, $zero, 78
	bne	$16, $1, $BB53_12
	nop
$BB53_263:                              # %if.then211
                                        #   in Loop: Header=BB53_12 Depth=1
	ld	$1, %got_page($.str53)($12)
	addiu	$4, $zero, 65
	daddiu	$3, $1, %got_ofst($.str53)
	ld	$1, 56($fp)             # 8-byte Folded Reload
	lw	$2, 0($1)
$BB53_264:                              # %while.body.i1123
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_266 Depth 3
	daddiu	$1, $19, 127
	dsll	$5, $1, 24
	j	$BB53_266
	daddiu	$6, $5, 4
$BB53_265:                              # %while.body.i.i1126
                                        #   in Loop: Header=BB53_266 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_266:                              # %while.body.i.i1126
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_264 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($6)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_265
	nop
# BB#267:                               # %writeUARTChar.exit.i1129
                                        #   in Loop: Header=BB53_264 Depth=2
	sb	$4, 0($5)
	daddiu	$1, $3, 1
	lbu	$4, 1($3)
	bne	$4, $zero, $BB53_264
	move	$3, $1
# BB#268:                               # %writeString.exit1130
                                        #   in Loop: Header=BB53_12 Depth=1
	ld	$25, %call16(writeDigit)($12)
	sll	$4, $2, 0
	move	$gp, $12
	jalr	$25
	move	$21, $12
	move	$12, $21
	addiu	$3, $zero, 66
	ld	$1, %got_page($.str54)($12)
	daddiu	$2, $1, %got_ofst($.str54)
$BB53_269:                              # %while.body.i1134
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_271 Depth 3
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB53_271
	daddiu	$5, $4, 4
$BB53_270:                              # %while.body.i.i1137
                                        #   in Loop: Header=BB53_271 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_271:                              # %while.body.i.i1137
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_269 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_270
	nop
# BB#272:                               # %writeUARTChar.exit.i1140
                                        #   in Loop: Header=BB53_269 Depth=2
	sb	$3, 0($4)
	daddiu	$1, $2, 1
	lbu	$3, 1($2)
	bne	$3, $zero, $BB53_269
	move	$2, $1
# BB#273:                               # %writeString.exit1141
                                        #   in Loop: Header=BB53_12 Depth=1
	lui	$1, 32512
	ori	$2, $zero, 43981
	addiu	$21, $zero, 61
	daddiu	$1, $1, 8192
	sw	$2, 0($1)
	ld	$1, %got_page($.str55)($12)
	addiu	$2, $zero, 65
	daddiu	$3, $1, %got_ofst($.str55)
$BB53_274:                              # %while.body.i1145
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_276 Depth 3
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB53_276
	daddiu	$5, $4, 4
$BB53_275:                              # %while.body.i.i1148
                                        #   in Loop: Header=BB53_276 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_276:                              # %while.body.i.i1148
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_274 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_275
	nop
# BB#277:                               # %writeUARTChar.exit.i1151
                                        #   in Loop: Header=BB53_274 Depth=2
	sb	$2, 0($4)
	daddiu	$1, $3, 1
	lbu	$2, 1($3)
	bne	$2, $zero, $BB53_274
	move	$3, $1
# BB#278:                               # %writeUARTChar.exit.i1151
                                        #   in Loop: Header=BB53_12 Depth=1
	j	$BB53_12
	nop
$BB53_279:                              # %if.end138
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$1, $zero, 108
	beq	$16, $1, $BB53_400
	nop
$BB53_280:                              # %if.end138
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$1, $zero, 113
	beq	$16, $1, $BB53_11
	nop
$BB53_281:                              # %if.end138
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$1, $zero, 86
	bne	$16, $1, $BB53_12
	addiu	$2, $zero, 200
$BB53_282:                              # %for.cond148.preheader
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_283 Depth 3
                                        #       Child Loop BB53_284 Depth 3
                                        #       Child Loop BB53_285 Depth 3
                                        #         Child Loop BB53_286 Depth 4
                                        #       Child Loop BB53_288 Depth 3
                                        #       Child Loop BB53_289 Depth 3
                                        #       Child Loop BB53_290 Depth 3
                                        #         Child Loop BB53_291 Depth 4
                                        #       Child Loop BB53_293 Depth 3
                                        #       Child Loop BB53_294 Depth 3
                                        #       Child Loop BB53_295 Depth 3
                                        #         Child Loop BB53_296 Depth 4
	addiu	$3, $zero, 73
$BB53_283:                              # %for.body5.us.i.i
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_282 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	addiu	$3, $3, -1
	addiu	$4, $zero, 48
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	bne	$3, $zero, $BB53_283
	nop
$BB53_284:                              # %for.body5.lr.ph.us.i40.i
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_282 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	addiu	$4, $4, -1
	addiu	$3, $zero, 0
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	bne	$4, $zero, $BB53_284
	nop
$BB53_285:                              # %for.body5.lr.ph.us.i52.i
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_282 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB53_286 Depth 4
	addiu	$4, $zero, 73
$BB53_286:                              # %for.body5.us.i50.i
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_282 Depth=2
                                        #       Parent Loop BB53_285 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	addiu	$4, $4, -1
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	bne	$4, $zero, $BB53_286
	nop
# BB#287:                               # %for.inc11.us.i46.i
                                        #   in Loop: Header=BB53_285 Depth=3
	addiu	$3, $3, 1
	bne	$3, $23, $BB53_285
	addiu	$4, $zero, 73
$BB53_288:                              # %for.body5.us.i.i.1
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_282 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	addiu	$4, $4, -1
	addiu	$5, $zero, 48
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	bne	$4, $zero, $BB53_288
	nop
$BB53_289:                              # %for.body5.lr.ph.us.i40.i.1
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_282 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	addiu	$5, $5, -1
	addiu	$3, $zero, 0
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	bne	$5, $zero, $BB53_289
	nop
$BB53_290:                              # %for.body5.lr.ph.us.i52.i.1
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_282 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB53_291 Depth 4
	addiu	$4, $zero, 73
$BB53_291:                              # %for.body5.us.i50.i.1
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_282 Depth=2
                                        #       Parent Loop BB53_290 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	addiu	$4, $4, -1
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	bne	$4, $zero, $BB53_291
	nop
# BB#292:                               # %for.inc11.us.i46.i.1
                                        #   in Loop: Header=BB53_290 Depth=3
	addiu	$3, $3, 1
	bne	$3, $23, $BB53_290
	addiu	$4, $zero, 73
$BB53_293:                              # %for.body5.us.i.i.2
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_282 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	addiu	$4, $4, -1
	addiu	$5, $zero, 48
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	bne	$4, $zero, $BB53_293
	nop
$BB53_294:                              # %for.body5.lr.ph.us.i40.i.2
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_282 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	addiu	$5, $5, -1
	addiu	$3, $zero, 0
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	bne	$5, $zero, $BB53_294
	nop
$BB53_295:                              # %for.body5.lr.ph.us.i52.i.2
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_282 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB53_296 Depth 4
	addiu	$4, $zero, 73
$BB53_296:                              # %for.body5.us.i50.i.2
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_282 Depth=2
                                        #       Parent Loop BB53_295 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	addiu	$4, $4, -1
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	bne	$4, $zero, $BB53_296
	nop
# BB#297:                               # %for.inc11.us.i46.i.2
                                        #   in Loop: Header=BB53_295 Depth=3
	addiu	$3, $3, 1
	bne	$3, $23, $BB53_295
	nop
# BB#298:                               # %draw3DRect.exit.2
                                        #   in Loop: Header=BB53_282 Depth=2
	addiu	$2, $2, 100
	slti	$1, $2, 500
	bne	$1, $zero, $BB53_282
	nop
# BB#299:                               #   in Loop: Header=BB53_12 Depth=1
	lw	$3, 52($fp)             # 4-byte Folded Reload
$BB53_300:                              # %for.body161
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addiu	$3, $3, -1
	addiu	$2, $zero, 0
	#APP
	CSDR $a0, $a1($c4)
	#NO_APP
	bne	$3, $zero, $BB53_300
	nop
# BB#301:                               #   in Loop: Header=BB53_12 Depth=1
	lw	$7, 44($fp)             # 4-byte Folded Reload
	addiu	$4, $zero, 0
	daddiu	$6, $zero, 9
	ori	$8, $zero, 34952
	addiu	$9, $zero, 50
$BB53_302:                              # %for.body172
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	dsll	$3, $6, 34
	sll	$1, $4, 0
	daddiu	$5, $3, 1
	dsll	$1, $1, 1
	dsll	$5, $5, 26
	daddu	$1, $1, $5
	sh	$4, 0($1)
	addiu	$4, $4, 1
	bne	$4, $7, $BB53_302
	nop
# BB#303:                               #   in Loop: Header=BB53_12 Depth=1
	lw	$4, 48($fp)             # 4-byte Folded Reload
$BB53_304:                              # %for.cond183.preheader
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_305 Depth 3
	addiu	$5, $zero, 75
	move	$6, $4
$BB53_305:                              # %for.body186
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_304 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	sll	$1, $6, 0
	daddiu	$7, $3, 1
	addiu	$5, $5, -1
	addiu	$6, $6, 1
	dsll	$1, $1, 1
	dsll	$7, $7, 26
	daddu	$1, $1, $7
	bne	$5, $zero, $BB53_305
	sh	$8, 0($1)
# BB#306:                               # %for.inc196
                                        #   in Loop: Header=BB53_304 Depth=2
	addiu	$4, $4, 800
	addiu	$2, $2, 1
	bne	$2, $9, $BB53_304
	addiu	$16, $zero, 86
# BB#307:                               # %for.inc196
                                        #   in Loop: Header=BB53_12 Depth=1
	j	$BB53_12
	nop
$BB53_308:                              # %while.cond
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$1, $zero, 81
	beq	$2, $1, $BB53_477
	nop
$BB53_309:                              # %while.body.i312.preheader
                                        #   in Loop: Header=BB53_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	j	$BB53_311
	daddiu	$3, $2, 4
$BB53_310:                              # %while.body.i.i315
                                        #   in Loop: Header=BB53_311 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_311:                              # %while.body.i.i315
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_310
	nop
# BB#312:                               # %writeUARTChar.exit.i318
                                        #   in Loop: Header=BB53_12 Depth=1
	sb	$13, 0($2)
	lw	$1, 0($3)
	j	$BB53_314
	nop
$BB53_313:                              # %while.body.i.i315.1
                                        #   in Loop: Header=BB53_314 Depth=2
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB53_314:                              # %while.body.i.i315.1
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_313
	nop
# BB#315:                               # %writeUARTChar.exit.i318.1
                                        #   in Loop: Header=BB53_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	sb	$18, 0($2)
	j	$BB53_317
	daddiu	$3, $2, 4
$BB53_316:                              # %while.body.i.i315.2
                                        #   in Loop: Header=BB53_317 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_317:                              # %while.body.i.i315.2
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_316
	nop
# BB#318:                               # %writeUARTChar.exit.i318.2
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$1, $zero, 77
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB53_320
	nop
$BB53_319:                              # %while.body.i.i315.3
                                        #   in Loop: Header=BB53_320 Depth=2
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB53_320:                              # %while.body.i.i315.3
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_319
	nop
# BB#321:                               # %writeUARTChar.exit.i318.3
                                        #   in Loop: Header=BB53_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 101
	sb	$1, 0($2)
	j	$BB53_323
	daddiu	$3, $2, 4
$BB53_322:                              # %while.body.i.i315.4
                                        #   in Loop: Header=BB53_323 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_323:                              # %while.body.i.i315.4
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_322
	nop
# BB#324:                               # %writeUARTChar.exit.i318.4
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$1, $zero, 110
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB53_326
	nop
$BB53_325:                              # %while.body.i.i315.5
                                        #   in Loop: Header=BB53_326 Depth=2
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB53_326:                              # %while.body.i.i315.5
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_325
	nop
# BB#327:                               # %writeUARTChar.exit.i318.5
                                        #   in Loop: Header=BB53_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 117
	sb	$1, 0($2)
	j	$BB53_329
	daddiu	$3, $2, 4
$BB53_328:                              # %while.body.i.i315.6
                                        #   in Loop: Header=BB53_329 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_329:                              # %while.body.i.i315.6
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_328
	nop
# BB#330:                               # %writeUARTChar.exit.i318.6
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$1, $zero, 58
	sb	$1, 0($2)
	lw	$1, 0($3)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB53_332
	lui	$7, 128
$BB53_331:                              # %while.body.i.i315.7
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_331
	nop
$BB53_332:                              # %writeUARTChar.exit.i318.7
                                        #   in Loop: Header=BB53_12 Depth=1
	daddiu	$1, $19, 127
	addiu	$5, $zero, 9
	dsll	$3, $1, 24
	ld	$1, %got_page($.str18)($12)
	sb	$13, 0($3)
	daddiu	$4, $1, %got_ofst($.str18)
$BB53_333:                              # %while.body.i323
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_335 Depth 3
	j	$BB53_335
	daddiu	$1, $3, 4
$BB53_334:                              # %while.body.i.i326
                                        #   in Loop: Header=BB53_335 Depth=3
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB53_335:                              # %while.body.i.i326
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_333 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_334
	nop
# BB#336:                               # %writeUARTChar.exit.i329
                                        #   in Loop: Header=BB53_333 Depth=2
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	daddiu	$1, $4, 1
	sb	$5, 0($2)
	lbu	$5, 1($4)
	bne	$5, $zero, $BB53_333
	move	$4, $1
# BB#337:                               #   in Loop: Header=BB53_12 Depth=1
	ld	$1, %got_page($.str19)($12)
	addiu	$4, $zero, 32
	daddiu	$5, $1, %got_ofst($.str19)
$BB53_338:                              # %while.body.i334
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_340 Depth 3
	j	$BB53_340
	daddiu	$1, $2, 4
$BB53_339:                              # %while.body.i.i337
                                        #   in Loop: Header=BB53_340 Depth=3
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB53_340:                              # %while.body.i.i337
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_338 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_339
	nop
# BB#341:                               # %writeUARTChar.exit.i340
                                        #   in Loop: Header=BB53_338 Depth=2
	daddiu	$1, $19, 127
	dsll	$3, $1, 24
	daddiu	$1, $5, 1
	sb	$4, 0($3)
	lbu	$4, 1($5)
	bne	$4, $zero, $BB53_338
	move	$5, $1
# BB#342:                               #   in Loop: Header=BB53_12 Depth=1
	ld	$1, %got_page($.str20)($12)
	addiu	$4, $zero, 32
	daddiu	$5, $1, %got_ofst($.str20)
$BB53_343:                              # %while.body.i345
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_345 Depth 3
	j	$BB53_345
	daddiu	$1, $3, 4
$BB53_344:                              # %while.body.i.i348
                                        #   in Loop: Header=BB53_345 Depth=3
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB53_345:                              # %while.body.i.i348
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_343 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_344
	nop
# BB#346:                               # %writeUARTChar.exit.i351
                                        #   in Loop: Header=BB53_343 Depth=2
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	daddiu	$1, $5, 1
	sb	$4, 0($2)
	lbu	$4, 1($5)
	bne	$4, $zero, $BB53_343
	move	$5, $1
# BB#347:                               #   in Loop: Header=BB53_12 Depth=1
	ld	$1, %got_page($.str21)($12)
	addiu	$4, $zero, 32
	daddiu	$5, $1, %got_ofst($.str21)
$BB53_348:                              # %while.body.i356
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_350 Depth 3
	j	$BB53_350
	daddiu	$1, $2, 4
$BB53_349:                              # %while.body.i.i359
                                        #   in Loop: Header=BB53_350 Depth=3
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB53_350:                              # %while.body.i.i359
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_348 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_349
	nop
# BB#351:                               # %writeUARTChar.exit.i362
                                        #   in Loop: Header=BB53_348 Depth=2
	daddiu	$1, $19, 127
	dsll	$3, $1, 24
	daddiu	$1, $5, 1
	sb	$4, 0($3)
	lbu	$4, 1($5)
	bne	$4, $zero, $BB53_348
	move	$5, $1
# BB#352:                               #   in Loop: Header=BB53_12 Depth=1
	ld	$1, %got_page($.str22)($12)
	addiu	$4, $zero, 32
	daddiu	$5, $1, %got_ofst($.str22)
$BB53_353:                              # %while.body.i367
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_355 Depth 3
	j	$BB53_355
	daddiu	$1, $3, 4
$BB53_354:                              # %while.body.i.i370
                                        #   in Loop: Header=BB53_355 Depth=3
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB53_355:                              # %while.body.i.i370
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_353 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_354
	nop
# BB#356:                               # %writeUARTChar.exit.i373
                                        #   in Loop: Header=BB53_353 Depth=2
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	daddiu	$1, $5, 1
	sb	$4, 0($2)
	lbu	$4, 1($5)
	bne	$4, $zero, $BB53_353
	move	$5, $1
# BB#357:                               #   in Loop: Header=BB53_12 Depth=1
	ld	$1, %got_page($.str23)($12)
	addiu	$4, $zero, 32
	daddiu	$5, $1, %got_ofst($.str23)
$BB53_358:                              # %while.body.i378
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_360 Depth 3
	j	$BB53_360
	daddiu	$1, $2, 4
$BB53_359:                              # %while.body.i.i381
                                        #   in Loop: Header=BB53_360 Depth=3
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB53_360:                              # %while.body.i.i381
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_358 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_359
	nop
# BB#361:                               # %writeUARTChar.exit.i384
                                        #   in Loop: Header=BB53_358 Depth=2
	daddiu	$1, $19, 127
	dsll	$3, $1, 24
	daddiu	$1, $5, 1
	sb	$4, 0($3)
	lbu	$4, 1($5)
	bne	$4, $zero, $BB53_358
	move	$5, $1
# BB#362:                               #   in Loop: Header=BB53_12 Depth=1
	ld	$1, %got_page($.str24)($12)
	addiu	$4, $zero, 32
	daddiu	$5, $1, %got_ofst($.str24)
$BB53_363:                              # %while.body.i389
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_365 Depth 3
	j	$BB53_365
	daddiu	$1, $3, 4
$BB53_364:                              # %while.body.i.i392
                                        #   in Loop: Header=BB53_365 Depth=3
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB53_365:                              # %while.body.i.i392
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_363 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_364
	nop
# BB#366:                               # %writeUARTChar.exit.i395
                                        #   in Loop: Header=BB53_363 Depth=2
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	daddiu	$1, $5, 1
	sb	$4, 0($2)
	lbu	$4, 1($5)
	bne	$4, $zero, $BB53_363
	move	$5, $1
# BB#367:                               #   in Loop: Header=BB53_12 Depth=1
	ld	$1, %got_page($.str25)($12)
	addiu	$4, $zero, 32
	daddiu	$5, $1, %got_ofst($.str25)
$BB53_368:                              # %while.body.i400
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_370 Depth 3
	j	$BB53_370
	daddiu	$1, $2, 4
$BB53_369:                              # %while.body.i.i403
                                        #   in Loop: Header=BB53_370 Depth=3
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB53_370:                              # %while.body.i.i403
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_368 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_369
	nop
# BB#371:                               # %writeUARTChar.exit.i406
                                        #   in Loop: Header=BB53_368 Depth=2
	daddiu	$1, $19, 127
	dsll	$3, $1, 24
	daddiu	$1, $5, 1
	sb	$4, 0($3)
	lbu	$4, 1($5)
	bne	$4, $zero, $BB53_368
	move	$5, $1
# BB#372:                               #   in Loop: Header=BB53_12 Depth=1
	ld	$1, %got_page($.str26)($12)
	addiu	$4, $zero, 32
	daddiu	$5, $1, %got_ofst($.str26)
$BB53_373:                              # %while.body.i411
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_375 Depth 3
	j	$BB53_375
	daddiu	$1, $3, 4
$BB53_374:                              # %while.body.i.i414
                                        #   in Loop: Header=BB53_375 Depth=3
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB53_375:                              # %while.body.i.i414
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_373 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_374
	nop
# BB#376:                               # %writeUARTChar.exit.i417
                                        #   in Loop: Header=BB53_373 Depth=2
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	daddiu	$1, $5, 1
	sb	$4, 0($2)
	lbu	$4, 1($5)
	bne	$4, $zero, $BB53_373
	move	$5, $1
# BB#377:                               #   in Loop: Header=BB53_12 Depth=1
	ld	$1, %got_page($.str27)($12)
	addiu	$4, $zero, 32
	daddiu	$5, $1, %got_ofst($.str27)
$BB53_378:                              # %while.body.i422
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_380 Depth 3
	j	$BB53_380
	daddiu	$1, $2, 4
$BB53_379:                              # %while.body.i.i425
                                        #   in Loop: Header=BB53_380 Depth=3
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB53_380:                              # %while.body.i.i425
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_378 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_379
	nop
# BB#381:                               # %writeUARTChar.exit.i428
                                        #   in Loop: Header=BB53_378 Depth=2
	daddiu	$1, $19, 127
	dsll	$3, $1, 24
	daddiu	$1, $5, 1
	sb	$4, 0($3)
	lbu	$4, 1($5)
	bne	$4, $zero, $BB53_378
	move	$5, $1
# BB#382:                               #   in Loop: Header=BB53_12 Depth=1
	ld	$1, %got_page($.str28)($12)
	addiu	$2, $zero, 32
	daddiu	$5, $1, %got_ofst($.str28)
$BB53_383:                              # %while.body.i433
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_385 Depth 3
	j	$BB53_385
	daddiu	$1, $3, 4
$BB53_384:                              # %while.body.i.i436
                                        #   in Loop: Header=BB53_385 Depth=3
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB53_385:                              # %while.body.i.i436
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_383 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_384
	nop
# BB#386:                               # %writeUARTChar.exit.i439
                                        #   in Loop: Header=BB53_383 Depth=2
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	daddiu	$1, $5, 1
	sb	$2, 0($4)
	lbu	$2, 1($5)
	bne	$2, $zero, $BB53_383
	move	$5, $1
# BB#387:                               #   in Loop: Header=BB53_12 Depth=1
	ld	$1, %got_page($.str29)($12)
	addiu	$3, $zero, 32
	daddiu	$5, $1, %got_ofst($.str29)
$BB53_388:                              # %while.body.i444
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_390 Depth 3
	j	$BB53_390
	daddiu	$1, $4, 4
$BB53_389:                              # %while.body.i.i447
                                        #   in Loop: Header=BB53_390 Depth=3
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB53_390:                              # %while.body.i.i447
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_388 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_389
	nop
# BB#391:                               # %writeUARTChar.exit.i450
                                        #   in Loop: Header=BB53_388 Depth=2
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	daddiu	$1, $5, 1
	sb	$3, 0($2)
	lbu	$3, 1($5)
	bne	$3, $zero, $BB53_388
	move	$5, $1
# BB#392:                               #   in Loop: Header=BB53_12 Depth=1
	ld	$1, %got_page($.str30)($12)
	addiu	$3, $zero, 32
	daddiu	$4, $1, %got_ofst($.str30)
$BB53_393:                              # %while.body.i455
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_395 Depth 3
	j	$BB53_395
	daddiu	$1, $2, 4
$BB53_394:                              # %while.body.i.i458
                                        #   in Loop: Header=BB53_395 Depth=3
	daddiu	$1, $19, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB53_395:                              # %while.body.i.i458
                                        #   Parent Loop BB53_12 Depth=1
                                        #     Parent Loop BB53_393 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_394
	nop
# BB#396:                               # %writeUARTChar.exit.i461
                                        #   in Loop: Header=BB53_393 Depth=2
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	sb	$3, 0($1)
	daddiu	$1, $4, 1
	lbu	$3, 1($4)
	bne	$3, $zero, $BB53_393
	move	$4, $1
# BB#397:                               # %writeUARTChar.exit.i461
                                        #   in Loop: Header=BB53_12 Depth=1
	j	$BB53_13
	nop
$BB53_398:                              # %if.end53
                                        #   in Loop: Header=BB53_12 Depth=1
	addiu	$1, $zero, 77
	bne	$16, $1, $BB53_258
	nop
$BB53_399:                              # %if.end53
	j	$BB53_401
	nop
$BB53_400:                              # %if.end207.thread
                                        #   in Loop: Header=BB53_12 Depth=1
	lw	$2, 40($fp)             # 4-byte Folded Reload
	lui	$1, 32512
	addiu	$16, $zero, 108
	daddiu	$1, $1, 24576
	andi	$2, $2, 65535
	xori	$2, $2, 65535
	sw	$2, 40($fp)             # 4-byte Folded Spill
	sll	$2, $2, 0
	dsll	$2, $2, 48
	dsra	$2, $2, 48
	j	$BB53_12
	sd	$2, 0($1)
$BB53_401:
	ld	$1, %got_page($.str44)($12)
	addiu	$4, $zero, 77
	daddiu	$2, $1, %got_ofst($.str44)
	daddiu	$1, $zero, 9
	dsll	$3, $1, 36
	daddiu	$1, $3, 127
	dsll	$1, $1, 24
	daddiu	$5, $1, 4
$BB53_402:                              # %while.body.i855
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_404 Depth 2
	lw	$1, 0($5)
	j	$BB53_404
	nop
$BB53_403:                              # %while.body.i.i858
                                        #   in Loop: Header=BB53_404 Depth=2
	daddiu	$1, $3, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB53_404:                              # %while.body.i.i858
                                        #   Parent Loop BB53_402 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_403
	nop
# BB#405:                               # %writeUARTChar.exit.i861
                                        #   in Loop: Header=BB53_402 Depth=1
	daddiu	$1, $3, 127
	dsll	$1, $1, 24
	sb	$4, 0($1)
	daddiu	$1, $2, 1
	lbu	$4, 1($2)
	bne	$4, $zero, $BB53_402
	move	$2, $1
# BB#406:
	daddiu	$1, $zero, 19
	lw	$8, 116($fp)            # 4-byte Folded Reload
	addiu	$17, $zero, 0
	addiu	$19, $zero, 16384
	addiu	$20, $zero, 16
	addiu	$10, $zero, 10
	sd	$12, 128($fp)           # 8-byte Folded Spill
	dsll	$18, $1, 59
	daddiu	$1, $zero, 5
	dsll	$21, $1, 61
	daddiu	$1, $zero, 9
	dsll	$22, $1, 36
	daddiu	$1, $22, 127
	dsll	$1, $1, 24
	daddiu	$23, $1, 4
	ld	$1, %got_page($.str46)($12)
	sd	$1, 120($fp)            # 8-byte Folded Spill
	lui	$1, 11916
	daddiu	$1, $1, -23831
	dsll	$1, $1, 16
	daddiu	$1, $1, -17873
	dsll	$1, $1, 16
	daddiu	$1, $1, -29789
	sd	$1, 104($fp)            # 8-byte Folded Spill
	ld	$1, %call16(writeDigit)($12)
	sd	$1, 96($fp)             # 8-byte Folded Spill
	ld	$1, %got_page($.str47)($12)
	j	$BB53_408
	sd	$1, 88($fp)
$BB53_407:                              # %writeUARTChar.exit.i984
                                        #   in Loop: Header=BB53_408 Depth=1
	daddiu	$1, $22, 127
	addiu	$10, $zero, 10
	addiu	$17, $17, 16384
	addiu	$8, $zero, 0
	dsll	$1, $1, 24
	sb	$10, 0($1)
	lui	$1, 1792
	slt	$1, $1, $17
	movn	$17, $zero, $1
$BB53_408:                              # %while.body59
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_409 Depth 2
                                        #     Child Loop BB53_411 Depth 2
                                        #     Child Loop BB53_413 Depth 2
                                        #       Child Loop BB53_415 Depth 3
                                        #     Child Loop BB53_419 Depth 2
                                        #     Child Loop BB53_422 Depth 2
                                        #     Child Loop BB53_424 Depth 2
                                        #     Child Loop BB53_426 Depth 2
                                        #       Child Loop BB53_428 Depth 3
                                        #     Child Loop BB53_432 Depth 2
                                        #     Child Loop BB53_434 Depth 2
                                        #     Child Loop BB53_443 Depth 2
                                        #       Child Loop BB53_445 Depth 3
                                        #     Child Loop BB53_448 Depth 2
                                        #       Child Loop BB53_450 Depth 3
                                        #     Child Loop BB53_437 Depth 2
                                        #       Child Loop BB53_439 Depth 3
                                        #     Child Loop BB53_454 Depth 2
                                        #     Child Loop BB53_457 Depth 2
                                        #     Child Loop BB53_460 Depth 2
                                        #     Child Loop BB53_463 Depth 2
                                        #     Child Loop BB53_466 Depth 2
                                        #     Child Loop BB53_469 Depth 2
                                        #     Child Loop BB53_472 Depth 2
                                        #     Child Loop BB53_475 Depth 2
	sll	$3, $17, 2
	addiu	$4, $zero, 0
	#APP
	dmfc0 $2, $9
	#NO_APP
$BB53_409:                              # %for.body64
                                        #   Parent Loop BB53_408 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addu	$1, $17, $4
	addiu	$4, $4, 1
	sll	$1, $1, 0
	dsll	$1, $1, 2
	daddu	$1, $1, $18
	sw	$3, 0($1)
	bne	$4, $19, $BB53_409
	addiu	$3, $3, 4
# BB#410:                               # %for.body74.loopexit
                                        #   in Loop: Header=BB53_408 Depth=1
	sll	$4, $17, 2
	addiu	$5, $zero, 0
$BB53_411:                              # %for.body74
                                        #   Parent Loop BB53_408 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addu	$1, $17, $5
	addiu	$5, $5, 1
	sll	$1, $1, 0
	dsll	$1, $1, 2
	daddu	$1, $1, $18
	lw	$3, 0($1)
	xor	$1, $4, $3
	addiu	$4, $4, 4
	sltu	$1, $zero, $1
	bne	$5, $19, $BB53_411
	addu	$8, $1, $8
# BB#412:                               # %for.end89
                                        #   in Loop: Header=BB53_408 Depth=1
	#APP
	dmfc0 $1, $9
	#NO_APP
	ori	$4, $zero, 65532
	addiu	$5, $zero, 0
	subu	$2, $1, $2
	sll	$1, $17, 2
	addu	$1, $1, $4
	sll	$4, $1, 0
$BB53_413:                              # %for.body.i873
                                        #   Parent Loop BB53_408 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_415 Depth 3
	lw	$1, 0($23)
	j	$BB53_415
	nop
$BB53_414:                              # %while.body.i.i876
                                        #   in Loop: Header=BB53_415 Depth=3
	daddiu	$1, $22, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB53_415:                              # %while.body.i.i876
                                        #   Parent Loop BB53_408 Depth=1
                                        #     Parent Loop BB53_413 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_414
	nop
# BB#416:                               # %writeUARTChar.exit.i880
                                        #   in Loop: Header=BB53_413 Depth=2
	dsrl	$7, $4, 60
	sltu	$1, $4, $21
	addiu	$5, $5, 1
	dsll	$4, $4, 4
	daddiu	$6, $7, 55
	ori	$7, $7, 48
	movn	$6, $7, $1
	sll	$1, $6, 0
	daddiu	$6, $22, 127
	dsll	$6, $6, 24
	bne	$5, $20, $BB53_413
	sb	$1, 0($6)
# BB#417:                               # %while.body.i885.loopexit
                                        #   in Loop: Header=BB53_408 Depth=1
	j	$BB53_419
	daddiu	$1, $6, 4
$BB53_418:                              # %while.body.i.i888
                                        #   in Loop: Header=BB53_419 Depth=2
	daddiu	$1, $22, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB53_419:                              # %while.body.i.i888
                                        #   Parent Loop BB53_408 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_418
	nop
# BB#420:                               # %writeUARTChar.exit.i891
                                        #   in Loop: Header=BB53_408 Depth=1
	daddiu	$1, $22, 127
	dsll	$4, $1, 24
	addiu	$1, $zero, 32
	sb	$1, 0($4)
	j	$BB53_422
	daddiu	$5, $4, 4
$BB53_421:                              # %while.body.i.i888.1
                                        #   in Loop: Header=BB53_422 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_422:                              # %while.body.i.i888.1
                                        #   Parent Loop BB53_408 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_421
	nop
# BB#423:                               # %writeUARTChar.exit.i891.1
                                        #   in Loop: Header=BB53_408 Depth=1
	addiu	$1, $zero, 61
	sb	$1, 0($4)
	lw	$1, 0($5)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB53_425
	move	$9, $8
$BB53_424:                              # %while.body.i.i888.2
                                        #   Parent Loop BB53_408 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	daddiu	$1, $22, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_424
	nop
$BB53_425:                              # %writeUARTChar.exit.i891.2
                                        #   in Loop: Header=BB53_408 Depth=1
	daddiu	$1, $22, 127
	sll	$3, $3, 0
	addiu	$5, $zero, 0
	dsll	$4, $1, 24
	addiu	$1, $zero, 32
	sb	$1, 0($4)
$BB53_426:                              # %for.body.i903
                                        #   Parent Loop BB53_408 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_428 Depth 3
	j	$BB53_428
	daddiu	$1, $4, 4
$BB53_427:                              # %while.body.i.i906
                                        #   in Loop: Header=BB53_428 Depth=3
	daddiu	$1, $22, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB53_428:                              # %while.body.i.i906
                                        #   Parent Loop BB53_408 Depth=1
                                        #     Parent Loop BB53_426 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_427
	nop
# BB#429:                               # %writeUARTChar.exit.i910
                                        #   in Loop: Header=BB53_426 Depth=2
	dsrl	$7, $3, 60
	sltu	$1, $3, $21
	addiu	$5, $5, 1
	dsll	$3, $3, 4
	daddiu	$6, $7, 55
	ori	$7, $7, 48
	movn	$6, $7, $1
	sll	$1, $6, 0
	daddiu	$6, $22, 127
	dsll	$6, $6, 24
	bne	$5, $20, $BB53_426
	sb	$1, 0($6)
# BB#430:                               # %while.body.i915.loopexit
                                        #   in Loop: Header=BB53_408 Depth=1
	j	$BB53_432
	daddiu	$1, $6, 4
$BB53_431:                              # %while.body.i.i918
                                        #   in Loop: Header=BB53_432 Depth=2
	daddiu	$1, $22, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB53_432:                              # %while.body.i.i918
                                        #   Parent Loop BB53_408 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_431
	nop
# BB#433:                               # %writeUARTChar.exit.i921
                                        #   in Loop: Header=BB53_408 Depth=1
	daddiu	$1, $22, 127
	dsll	$3, $1, 24
	addiu	$1, $zero, 63
	sb	$1, 0($3)
	daddiu	$4, $3, 4
	lw	$1, 0($4)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB53_435
	ld	$8, 128($fp)
$BB53_434:                              # %while.body.i.i918.1
                                        #   Parent Loop BB53_408 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	lw	$1, 0($4)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_434
	nop
$BB53_435:                              # %writeUARTChar.exit.i921.1
                                        #   in Loop: Header=BB53_408 Depth=1
	sll	$2, $2, 0
	bne	$9, $zero, $BB53_442
	sb	$10, 0($3)
# BB#436:                               #   in Loop: Header=BB53_408 Depth=1
	ld	$1, 120($fp)            # 8-byte Folded Reload
	addiu	$3, $zero, 65
	daddiu	$4, $1, %got_ofst($.str46)
$BB53_437:                              # %while.body.i926
                                        #   Parent Loop BB53_408 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_439 Depth 3
	daddiu	$1, $22, 127
	dsll	$5, $1, 24
	j	$BB53_439
	daddiu	$6, $5, 4
$BB53_438:                              # %while.body.i.i929
                                        #   in Loop: Header=BB53_439 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_439:                              # %while.body.i.i929
                                        #   Parent Loop BB53_408 Depth=1
                                        #     Parent Loop BB53_437 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($6)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_438
	nop
# BB#440:                               # %writeUARTChar.exit.i932
                                        #   in Loop: Header=BB53_437 Depth=2
	sb	$3, 0($5)
	daddiu	$1, $4, 1
	lbu	$3, 1($4)
	beq	$3, $zero, $BB53_452
	move	$4, $1
# BB#441:                               # %writeUARTChar.exit.i932
                                        #   in Loop: Header=BB53_437 Depth=2
	j	$BB53_437
	nop
$BB53_442:                              # %if.else
                                        #   in Loop: Header=BB53_408 Depth=1
	sll	$3, $9, 0
	addiu	$4, $zero, 0
$BB53_443:                              # %for.body.i944
                                        #   Parent Loop BB53_408 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_445 Depth 3
	daddiu	$1, $22, 127
	dsll	$5, $1, 24
	j	$BB53_445
	daddiu	$6, $5, 4
$BB53_444:                              # %while.body.i.i947
                                        #   in Loop: Header=BB53_445 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_445:                              # %while.body.i.i947
                                        #   Parent Loop BB53_408 Depth=1
                                        #     Parent Loop BB53_443 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($6)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_444
	nop
# BB#446:                               # %writeUARTChar.exit.i951
                                        #   in Loop: Header=BB53_443 Depth=2
	dsrl	$7, $3, 60
	sltu	$1, $3, $21
	addiu	$4, $4, 1
	dsll	$3, $3, 4
	daddiu	$6, $7, 55
	ori	$7, $7, 48
	movn	$6, $7, $1
	sll	$1, $6, 0
	bne	$4, $20, $BB53_443
	sb	$1, 0($5)
# BB#447:                               #   in Loop: Header=BB53_408 Depth=1
	ld	$1, 88($fp)             # 8-byte Folded Reload
	addiu	$3, $zero, 32
	daddiu	$4, $1, %got_ofst($.str47)
$BB53_448:                              # %while.body.i956
                                        #   Parent Loop BB53_408 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_450 Depth 3
	daddiu	$1, $22, 127
	dsll	$5, $1, 24
	j	$BB53_450
	daddiu	$6, $5, 4
$BB53_449:                              # %while.body.i.i959
                                        #   in Loop: Header=BB53_450 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_450:                              # %while.body.i.i959
                                        #   Parent Loop BB53_408 Depth=1
                                        #     Parent Loop BB53_448 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($6)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_449
	nop
# BB#451:                               # %writeUARTChar.exit.i962
                                        #   in Loop: Header=BB53_448 Depth=2
	sb	$3, 0($5)
	daddiu	$1, $4, 1
	lbu	$3, 1($4)
	bne	$3, $zero, $BB53_448
	move	$4, $1
$BB53_452:                              # %if.end102
                                        #   in Loop: Header=BB53_408 Depth=1
	daddiu	$1, $22, 127
	dsll	$3, $1, 24
	j	$BB53_454
	daddiu	$4, $3, 4
$BB53_453:                              # %while.body.i.i970
                                        #   in Loop: Header=BB53_454 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_454:                              # %while.body.i.i970
                                        #   Parent Loop BB53_408 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($4)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_453
	nop
# BB#455:                               # %writeUARTChar.exit.i973
                                        #   in Loop: Header=BB53_408 Depth=1
	addiu	$1, $zero, 67
	sb	$1, 0($3)
	lw	$1, 0($4)
	j	$BB53_457
	nop
$BB53_456:                              # %while.body.i.i970.1
                                        #   in Loop: Header=BB53_457 Depth=2
	daddiu	$1, $22, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB53_457:                              # %while.body.i.i970.1
                                        #   Parent Loop BB53_408 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_456
	nop
# BB#458:                               # %writeUARTChar.exit.i973.1
                                        #   in Loop: Header=BB53_408 Depth=1
	daddiu	$1, $22, 127
	dsll	$3, $1, 24
	addiu	$1, $zero, 80
	sb	$1, 0($3)
	j	$BB53_460
	daddiu	$4, $3, 4
$BB53_459:                              # %while.body.i.i970.2
                                        #   in Loop: Header=BB53_460 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_460:                              # %while.body.i.i970.2
                                        #   Parent Loop BB53_408 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($4)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_459
	nop
# BB#461:                               # %writeUARTChar.exit.i973.2
                                        #   in Loop: Header=BB53_408 Depth=1
	addiu	$1, $zero, 73
	sb	$1, 0($3)
	lw	$1, 0($4)
	j	$BB53_463
	nop
$BB53_462:                              # %while.body.i.i970.3
                                        #   in Loop: Header=BB53_463 Depth=2
	daddiu	$1, $22, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB53_463:                              # %while.body.i.i970.3
                                        #   Parent Loop BB53_408 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_462
	nop
# BB#464:                               # %writeUARTChar.exit.i973.3
                                        #   in Loop: Header=BB53_408 Depth=1
	daddiu	$1, $22, 127
	dsll	$3, $1, 24
	addiu	$1, $zero, 32
	sb	$1, 0($3)
	j	$BB53_466
	daddiu	$4, $3, 4
$BB53_465:                              # %while.body.i.i970.4
                                        #   in Loop: Header=BB53_466 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_466:                              # %while.body.i.i970.4
                                        #   Parent Loop BB53_408 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($4)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_465
	nop
# BB#467:                               # %writeUARTChar.exit.i973.4
                                        #   in Loop: Header=BB53_408 Depth=1
	addiu	$1, $zero, 111
	sb	$1, 0($3)
	lw	$1, 0($4)
	j	$BB53_469
	nop
$BB53_468:                              # %while.body.i.i970.5
                                        #   in Loop: Header=BB53_469 Depth=2
	daddiu	$1, $22, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB53_469:                              # %while.body.i.i970.5
                                        #   Parent Loop BB53_408 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_468
	nop
# BB#470:                               # %writeUARTChar.exit.i973.5
                                        #   in Loop: Header=BB53_408 Depth=1
	daddiu	$1, $22, 127
	dsll	$3, $1, 24
	addiu	$1, $zero, 102
	sb	$1, 0($3)
	j	$BB53_472
	daddiu	$16, $3, 4
$BB53_471:                              # %while.body.i.i970.6
                                        #   in Loop: Header=BB53_472 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB53_472:                              # %while.body.i.i970.6
                                        #   Parent Loop BB53_408 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($16)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_471
	nop
# BB#473:                               # %writeUARTChar.exit.i973.6
                                        #   in Loop: Header=BB53_408 Depth=1
	daddiu	$1, $zero, 1000
	move	$gp, $8
	dmult	$2, $1
	ld	$2, 104($fp)            # 8-byte Folded Reload
	mflo	$1
	dmult	$1, $2
	addiu	$2, $zero, 32
	sb	$2, 0($3)
	ld	$25, 96($fp)            # 8-byte Folded Reload
	mfhi	$1
	dsrl	$2, $1, 63
	dsra	$1, $1, 16
	jalr	$25
	daddu	$4, $1, $2
	lw	$1, 0($16)
	j	$BB53_475
	nop
$BB53_474:                              # %while.body.i.i981
                                        #   in Loop: Header=BB53_475 Depth=2
	daddiu	$1, $22, 127
	#APP
	add $v0, $v0, $0
	#NO_APP
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB53_475:                              # %while.body.i.i981
                                        #   Parent Loop BB53_408 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB53_474
	nop
# BB#476:                               # %while.body.i.i981
                                        #   in Loop: Header=BB53_408 Depth=1
	j	$BB53_407
	nop
$BB53_477:                              # %while.end
	addiu	$2, $zero, 0
	move	$sp, $fp
	ld	$16, 136($sp)           # 8-byte Folded Reload
	ld	$17, 144($sp)           # 8-byte Folded Reload
	ld	$18, 152($sp)           # 8-byte Folded Reload
	ld	$19, 160($sp)           # 8-byte Folded Reload
	ld	$20, 168($sp)           # 8-byte Folded Reload
	ld	$21, 176($sp)           # 8-byte Folded Reload
	ld	$22, 184($sp)           # 8-byte Folded Reload
	ld	$23, 192($sp)           # 8-byte Folded Reload
	ld	$gp, 200($sp)           # 8-byte Folded Reload
	ld	$fp, 208($sp)           # 8-byte Folded Reload
	ld	$ra, 216($sp)           # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 224
	.set	at
	.set	macro
	.set	reorder
	.end	main
$tmp215:
	.size	main, ($tmp215)-main

	.type	contextDone,@object     # @contextDone
	.section	.sbss,"aw",@nobits
	.globl	contextDone
	.align	2
contextDone:
	.4byte	0                       # 0x0
	.size	contextDone, 4

	.type	makeBss,@object         # @makeBss
	.section	.sdata,"aw",@progbits
	.globl	makeBss
	.align	2
makeBss:
	.4byte	1                       # 0x1
	.size	makeBss, 4

	.type	heap,@object            # @heap
	.globl	heap
	.align	3
heap:
	.8byte	-7493989779944505344
	.size	heap, 8

	.type	$.str,@object           # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
$.str:
	.asciz	 " < FPU co-processor test failed\n\t"
	.size	$.str, 34

	.type	$.str1,@object          # @.str1
$.str1:
	.asciz	 " < expected\n\t"
	.size	$.str1, 14

	.type	$.str9,@object          # @.str9
$.str9:
	.asciz	 " nanoseconds\n"
	.size	$.str9, 14

	.type	$.str15,@object         # @.str15
$.str15:
	.asciz	 "UART serial interface TLB entry setup.\n"
	.size	$.str15, 40

	.type	$.str16,@object         # @.str16
$.str16:
	.asciz	 "  MMU setup.\n"
	.size	$.str16, 14

	.type	$.str18,@object         # @.str18
$.str18:
	.asciz	 "\t\"F\" for floating point co-processor test.\n"
	.size	$.str18, 44

	.type	$.str19,@object         # @.str19
$.str19:
	.asciz	 "   \"L\" for load-linked and store-conditional test.\n"
	.size	$.str19, 52

	.type	$.str20,@object         # @.str20
$.str20:
	.asciz	 "   \"A\" for arithmetic test result.\n"
	.size	$.str20, 36

	.type	$.str21,@object         # @.str21
$.str21:
	.asciz	 "   \"B\" array bounds checking benchmark.\n"
	.size	$.str21, 41

	.type	$.str22,@object         # @.str22
$.str22:
	.asciz	 "   \"D\" for multiply and divide test.\n"
	.size	$.str22, 38

	.type	$.str23,@object         # @.str23
$.str23:
	.asciz	 "   \"C\" for Count register test.\n"
	.size	$.str23, 33

	.type	$.str24,@object         # @.str24
$.str24:
	.asciz	 "   \"M\" for eternal memory test.\n"
	.size	$.str24, 33

	.type	$.str25,@object         # @.str25
$.str25:
	.asciz	 "   \"V\" for framebuffer test.\n"
	.size	$.str25, 30

	.type	$.str26,@object         # @.str26
$.str26:
	.asciz	 "   \"K\" for Capability initialization.\n"
	.size	$.str26, 39

	.type	$.str27,@object         # @.str27
$.str27:
	.asciz	 "   \"l\" to invert LEDs.\n"
	.size	$.str27, 24

	.type	$.str28,@object         # @.str28
$.str28:
	.asciz	 "   \"T\" for touchscreen test.\n"
	.size	$.str28, 30

	.type	$.str29,@object         # @.str29
$.str29:
	.asciz	 "   \"q\" for quicksort boundschecking test.\n"
	.size	$.str29, 43

	.type	$.str30,@object         # @.str30
$.str30:
	.asciz	 "   \"Q\" to quit.\n"
	.size	$.str30, 17

	.type	$.str31,@object         # @.str31
$.str31:
	.asciz	 "Floating Point co-processor test\n"
	.size	$.str31, 34

	.type	$.str32,@object         # @.str32
$.str32:
	.asciz	 "Load-linked and store-conditional test:\n"
	.size	$.str32, 41

	.type	$.str33,@object         # @.str33
$.str33:
	.asciz	 " < load-linked and store-conditional result (0)\n"
	.size	$.str33, 49

	.type	$.str34,@object         # @.str34
$.str34:
	.asciz	 " < test and set result (1)\n"
	.size	$.str34, 28

	.type	$.str35,@object         # @.str35
$.str35:
	.asciz	 "Arithmetic test:\n"
	.size	$.str35, 18

	.type	$.str36,@object         # @.str36
$.str36:
	.asciz	 " < arithmetic test result (0)\n"
	.size	$.str36, 31

	.type	$.str40,@object         # @.str40
$.str40:
	.asciz	 "Multiply and divide test.\n"
	.size	$.str40, 27

	.type	$.str44,@object         # @.str44
$.str44:
	.asciz	 "Memory test:\n"
	.size	$.str44, 14

	.type	$.str46,@object         # @.str46
$.str46:
	.asciz	 "All good! \n"
	.size	$.str46, 12

	.type	$.str47,@object         # @.str47
$.str47:
	.asciz	 " were bad :(\n"
	.size	$.str47, 14

	.type	$.str49,@object         # @.str49
$.str49:
	.asciz	 "Count Register Test:\n"
	.size	$.str49, 22

	.type	$.str51,@object         # @.str51
$.str51:
	.asciz	 "C4.base=    "
	.size	$.str51, 13

	.type	$.str52,@object         # @.str52
$.str52:
	.asciz	 "C4.length=  "
	.size	$.str52, 13

	.type	$.str53,@object         # @.str53
$.str53:
	.asciz	 "After accessing CHERI_NET_RX, read:\n"
	.size	$.str53, 37

	.type	$.str54,@object         # @.str54
$.str54:
	.asciz	 "Before writing 123 to CHERI_NET_TX\n"
	.size	$.str54, 36

	.type	$.str55,@object         # @.str55
$.str55:
	.asciz	 "After writing 123 to CHERI_NET_TX\n"
	.size	$.str55, 35


