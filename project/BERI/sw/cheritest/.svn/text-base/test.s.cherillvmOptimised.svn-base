	.section .mdebug.abi64
	.previous
	.file	"test.cherillvm.c"
	.text
	.globl	dlnC0
	.align	3
	.type	dlnC0,@function
	.set	nomips16                # @dlnC0
	.ent	dlnC0
dlnC0:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CSetLen $c0, $c0, $a0
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	dlnC0
$tmp3:
	.size	dlnC0, ($tmp3)-dlnC0

	.globl	ibsC0
	.align	3
	.type	ibsC0,@function
	.set	nomips16                # @ibsC0
	.ent	ibsC0
ibsC0:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CIncBase $c0, $c0, $a0
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	ibsC0
$tmp7:
	.size	ibsC0, ($tmp7)-ibsC0

	.globl	stpC0
	.align	3
	.type	stpC0,@function
	.set	nomips16                # @stpC0
	.ent	stpC0
stpC0:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CSetType $c0, $c0, $a0
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	stpC0
$tmp11:
	.size	stpC0, ($tmp11)-stpC0

	.globl	cpmC0
	.align	3
	.type	cpmC0,@function
	.set	nomips16                # @cpmC0
	.ent	cpmC0
cpmC0:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CAndPerm $c0, $c0, $a0
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	cpmC0
$tmp15:
	.size	cpmC0, ($tmp15)-cpmC0

	.globl	mvlnC0
	.align	3
	.type	mvlnC0,@function
	.set	nomips16                # @mvlnC0
	.ent	mvlnC0
mvlnC0:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CGetLen $v0, $c0
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	mvlnC0
$tmp19:
	.size	mvlnC0, ($tmp19)-mvlnC0

	.globl	mvbsC0
	.align	3
	.type	mvbsC0,@function
	.set	nomips16                # @mvbsC0
	.ent	mvbsC0
mvbsC0:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CGetBase $v0, $c0
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	mvbsC0
$tmp23:
	.size	mvbsC0, ($tmp23)-mvbsC0

	.globl	mvtpC0
	.align	3
	.type	mvtpC0,@function
	.set	nomips16                # @mvtpC0
	.ent	mvtpC0
mvtpC0:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CGetType $v0, $c0
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	mvtpC0
$tmp27:
	.size	mvtpC0, ($tmp27)-mvtpC0

	.globl	mvpmC0
	.align	3
	.type	mvpmC0,@function
	.set	nomips16                # @mvpmC0
	.ent	mvpmC0
mvpmC0:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CGetPerm $v0, $c0
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	mvpmC0
$tmp31:
	.size	mvpmC0, ($tmp31)-mvpmC0

	.globl	FBIncBase
	.align	3
	.type	FBIncBase,@function
	.set	nomips16                # @FBIncBase
	.ent	FBIncBase
FBIncBase:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CIncBase $c4, $c4, $a0
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	FBIncBase
$tmp35:
	.size	FBIncBase, ($tmp35)-FBIncBase

	.globl	FBDecLeng
	.align	3
	.type	FBDecLeng,@function
	.set	nomips16                # @FBDecLeng
	.ent	FBDecLeng
FBDecLeng:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CSetLen $c4, $c4, $a0
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	FBDecLeng
$tmp39:
	.size	FBDecLeng, ($tmp39)-FBDecLeng

	.globl	FBGetBase
	.align	3
	.type	FBGetBase,@function
	.set	nomips16                # @FBGetBase
	.ent	FBGetBase
FBGetBase:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CGetBase $v0, $c4
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	FBGetBase
$tmp43:
	.size	FBGetBase, ($tmp43)-FBGetBase

	.globl	FBGetLeng
	.align	3
	.type	FBGetLeng,@function
	.set	nomips16                # @FBGetLeng
	.ent	FBGetLeng
FBGetLeng:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CGetLen $v0, $c4
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	FBGetLeng
$tmp47:
	.size	FBGetLeng, ($tmp47)-FBGetLeng

	.globl	FBSBR
	.align	3
	.type	FBSBR,@function
	.set	nomips16                # @FBSBR
	.ent	FBSBR
FBSBR:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CSBR $a0, $a1($c4)
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	FBSBR
$tmp51:
	.size	FBSBR, ($tmp51)-FBSBR

	.globl	FBSWR
	.align	3
	.type	FBSWR,@function
	.set	nomips16                # @FBSWR
	.ent	FBSWR
FBSWR:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	FBSWR
$tmp55:
	.size	FBSWR, ($tmp55)-FBSWR

	.globl	FBSDR
	.align	3
	.type	FBSDR,@function
	.set	nomips16                # @FBSDR
	.ent	FBSDR
FBSDR:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	CSDR $a0, $a1($c4)
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	FBSDR
$tmp59:
	.size	FBSDR, ($tmp59)-FBSDR

	.globl	CapRegDump
	.align	3
	.type	CapRegDump,@function
	.set	nomips16                # @CapRegDump
	.ent	CapRegDump
CapRegDump:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	MFC2 $0, $0, 4
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	CapRegDump
$tmp63:
	.size	CapRegDump, ($tmp63)-CapRegDump

	.globl	mv1kC1
	.align	3
	.type	mv1kC1,@function
	.set	nomips16                # @mv1kC1
	.ent	mv1kC1
mv1kC1:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	.word 0x46002000
	#NO_APP
	#APP
	.word 0x46012001
	#NO_APP
	#APP
	.word 0x46022002
	#NO_APP
	#APP
	.word 0x46032003
	#NO_APP
	#APP
	.word 0x46042104
	#NO_APP
	#APP
	.word 0x46052105
	#NO_APP
	#APP
	.word 0x46062106
	#NO_APP
	#APP
	.word 0x46072107
	#NO_APP
	#APP
	.word 0x46082208
	#NO_APP
	#APP
	.word 0x46092209
	#NO_APP
	#APP
	.word 0x460a220a
	#NO_APP
	#APP
	.word 0x460b220b
	#NO_APP
	#APP
	.word 0x460c230c
	#NO_APP
	#APP
	.word 0x460d230d
	#NO_APP
	#APP
	.word 0x460e230e
	#NO_APP
	#APP
	.word 0x460f230f
	#NO_APP
	#APP
	.word 0x46102410
	#NO_APP
	#APP
	.word 0x46112411
	#NO_APP
	#APP
	.word 0x46122412
	#NO_APP
	#APP
	.word 0x46132413
	#NO_APP
	#APP
	.word 0x46142514
	#NO_APP
	#APP
	.word 0x46152515
	#NO_APP
	#APP
	.word 0x46162516
	#NO_APP
	#APP
	.word 0x46172517
	#NO_APP
	#APP
	.word 0x46182618
	#NO_APP
	#APP
	.word 0x46192619
	#NO_APP
	#APP
	.word 0x461a261a
	#NO_APP
	#APP
	.word 0x461b261b
	#NO_APP
	#APP
	.word 0x461c271c
	#NO_APP
	#APP
	.word 0x461d271d
	#NO_APP
	#APP
	.word 0x461e271e
	#NO_APP
	#APP
	.word 0x461f271f
	#NO_APP
	#APP
	.word 0x46202800
	#NO_APP
	#APP
	.word 0x46202841
	#NO_APP
	#APP
	.word 0x46202882
	#NO_APP
	#APP
	.word 0x462028C3
	#NO_APP
	#APP
	.word 0x46202904
	#NO_APP
	#APP
	.word 0x46202945
	#NO_APP
	#APP
	.word 0x46202986
	#NO_APP
	#APP
	.word 0x462029C7
	#NO_APP
	#APP
	.word 0x46202A08
	#NO_APP
	#APP
	.word 0x46202A49
	#NO_APP
	#APP
	.word 0x46202A8a
	#NO_APP
	#APP
	.word 0x46202ACb
	#NO_APP
	#APP
	.word 0x46202B0c
	#NO_APP
	#APP
	.word 0x46202B4d
	#NO_APP
	#APP
	.word 0x46202B8e
	#NO_APP
	#APP
	.word 0x46202BCf
	#NO_APP
	#APP
	.word 0x46202C10
	#NO_APP
	#APP
	.word 0x46202C51
	#NO_APP
	#APP
	.word 0x46202C92
	#NO_APP
	#APP
	.word 0x46202CD3
	#NO_APP
	#APP
	.word 0x46202D14
	#NO_APP
	#APP
	.word 0x46202D55
	#NO_APP
	#APP
	.word 0x46202D96
	#NO_APP
	#APP
	.word 0x46202DD7
	#NO_APP
	#APP
	.word 0x46202E18
	#NO_APP
	#APP
	.word 0x46202E59
	#NO_APP
	#APP
	.word 0x46202E9a
	#NO_APP
	#APP
	.word 0x46202EDb
	#NO_APP
	#APP
	.word 0x46202F1c
	#NO_APP
	#APP
	.word 0x46202F5d
	#NO_APP
	#APP
	.word 0x46202F9e
	#NO_APP
	#APP
	.word 0x46202FDf
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	mv1kC1
$tmp67:
	.size	mv1kC1, ($tmp67)-mv1kC1

	.globl	writeUARTChar
	.align	3
	.type	writeUARTChar,@function
	.set	nomips16                # @writeUARTChar
	.ent	writeUARTChar
writeUARTChar:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$2, $1, 24
	j	$BB17_2
	daddiu	$3, $2, 4
$BB17_1:                                # %while.body
                                        #   in Loop: Header=BB17_2 Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB17_2:                                # %while.body
                                        # =>This Inner Loop Header: Depth=1
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB17_1
	nop
# BB#3:                                 # %while.end
	sb	$4, 0($2)
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	writeUARTChar
$tmp71:
	.size	writeUARTChar, ($tmp71)-writeUARTChar

	.globl	writeString
	.align	3
	.type	writeString,@function
	.set	nomips16                # @writeString
	.ent	writeString
writeString:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	lbu	$2, 0($4)
	beq	$2, $zero, $BB18_6
	nop
# BB#1:
	daddiu	$1, $zero, 9
	dsll	$3, $1, 36
	daddiu	$1, $3, 127
	dsll	$1, $1, 24
	daddiu	$5, $1, 4
$BB18_2:                                # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_4 Depth 2
	lw	$1, 0($5)
	j	$BB18_4
	nop
$BB18_3:                                # %while.body.i
                                        #   in Loop: Header=BB18_4 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $3, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB18_4:                                # %while.body.i
                                        #   Parent Loop BB18_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB18_3
	nop
# BB#5:                                 # %writeUARTChar.exit
                                        #   in Loop: Header=BB18_2 Depth=1
	daddiu	$1, $3, 127
	dsll	$1, $1, 24
	sb	$2, 0($1)
	daddiu	$1, $4, 1
	lbu	$2, 1($4)
	bne	$2, $zero, $BB18_2
	move	$4, $1
$BB18_6:                                # %while.end
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	writeString
$tmp75:
	.size	writeString, ($tmp75)-writeString

	.globl	writeUARTCharLoopback
	.align	3
	.type	writeUARTCharLoopback,@function
	.set	nomips16                # @writeUARTCharLoopback
	.ent	writeUARTCharLoopback
writeUARTCharLoopback:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$1, $1, 24
	daddiu	$2, $1, 4128
	addiu	$3, $zero, -1
	lui	$4, 65535
	lui	$5, 255
$BB19_1:                                # %do.body
                                        # =>This Inner Loop Header: Depth=1
	ld	$1, 0($2)
	#APP
	add $v0, $v0, $0
	#NO_APP
	sll	$6, $1, 0
	beq	$6, $3, $BB19_3
	nop
# BB#2:                                 # %do.body
                                        #   in Loop: Header=BB19_1 Depth=1
	and	$1, $6, $4
	sltu	$1, $5, $1
	bne	$1, $zero, $BB19_1
	nop
$BB19_3:                                # %do.end
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4096
	sb	$zero, 0($1)
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	writeUARTCharLoopback
$tmp79:
	.size	writeUARTCharLoopback, ($tmp79)-writeUARTCharLoopback

	.globl	writeStringLoopback
	.align	3
	.type	writeStringLoopback,@function
	.set	nomips16                # @writeStringLoopback
	.ent	writeStringLoopback
writeStringLoopback:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	lbu	$1, 0($4)
	beq	$1, $zero, $BB20_6
	nop
# BB#1:
	daddiu	$1, $zero, 9
	dsll	$2, $1, 36
	daddiu	$1, $2, 127
	dsll	$1, $1, 24
	daddiu	$3, $1, 4128
	addiu	$5, $zero, -1
	lui	$6, 65535
	lui	$7, 255
$BB20_2:                                # %do.body.i.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_3 Depth 2
	move	$8, $4
$BB20_3:                                # %do.body.i
                                        #   Parent Loop BB20_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld	$1, 0($3)
	#APP
	add $v0, $v0, $0
	#NO_APP
	sll	$4, $1, 0
	beq	$4, $5, $BB20_5
	nop
# BB#4:                                 # %do.body.i
                                        #   in Loop: Header=BB20_3 Depth=2
	and	$1, $4, $6
	sltu	$1, $7, $1
	bne	$1, $zero, $BB20_3
	nop
$BB20_5:                                # %writeUARTCharLoopback.exit
                                        #   in Loop: Header=BB20_2 Depth=1
	daddiu	$1, $2, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4096
	sb	$zero, 0($1)
	lbu	$1, 1($8)
	bne	$1, $zero, $BB20_2
	daddiu	$4, $8, 1
$BB20_6:                                # %while.end
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	writeStringLoopback
$tmp83:
	.size	writeStringLoopback, ($tmp83)-writeStringLoopback

	.globl	writeHex
	.align	3
	.type	writeHex,@function
	.set	nomips16                # @writeHex
	.ent	writeHex
writeHex:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	addiu	$2, $zero, 0
	daddiu	$1, $zero, 5
	dsll	$3, $1, 61
	daddiu	$1, $zero, 9
	dsll	$5, $1, 36
	daddiu	$1, $5, 127
	dsll	$1, $1, 24
	daddiu	$6, $1, 4
	addiu	$7, $zero, 16
$BB21_1:                                # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_3 Depth 2
	lw	$1, 0($6)
	j	$BB21_3
	nop
$BB21_2:                                # %while.body.i
                                        #   in Loop: Header=BB21_3 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $5, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB21_3:                                # %while.body.i
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB21_2
	nop
# BB#4:                                 # %writeUARTChar.exit
                                        #   in Loop: Header=BB21_1 Depth=1
	sltu	$1, $4, $3
	dsrl	$9, $4, 60
	daddiu	$8, $9, 55
	ori	$9, $9, 48
	movn	$8, $9, $1
	sll	$1, $8, 0
	daddiu	$8, $5, 127
	dsll	$8, $8, 24
	sb	$1, 0($8)
	addiu	$2, $2, 1
	bne	$2, $7, $BB21_1
	dsll	$4, $4, 4
# BB#5:                                 # %for.end
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	writeHex
$tmp87:
	.size	writeHex, ($tmp87)-writeHex

	.globl	writeDigit
	.align	3
	.type	writeDigit,@function
	.set	nomips16                # @writeDigit
	.ent	writeDigit
writeDigit:
	.frame	$fp,64,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -64
	sd	$fp, 56($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	sb	$zero, 32($fp)
	sd	$zero, 24($fp)
	sd	$zero, 16($fp)
	beq	$4, $zero, $BB22_4
	addiu	$2, $zero, -1
# BB#1:
	lui	$1, 52429
	daddiu	$1, $1, -13107
	dsll	$1, $1, 16
	daddiu	$1, $1, -13107
	dsll	$1, $1, 16
	daddiu	$3, $1, -13107
	daddiu	$5, $zero, 10
	daddiu	$6, $fp, 36
	daddiu	$7, $zero, 9
$BB22_2:                                # %while.body
                                        # =>This Inner Loop Header: Depth=1
	dmultu	$4, $3
	mfhi	$1
	dsrl	$1, $1, 3
	dmult	$1, $5
	mflo	$9
	addiu	$2, $2, 1
	dsll	$8, $2, 32
	dsrl	$10, $8, 32
	sltu	$8, $7, $4
	daddu	$10, $6, $10
	dsubu	$4, $4, $9
	ori	$4, $4, 48
	sb	$4, 0($10)
	bne	$8, $zero, $BB22_2
	move	$4, $1
# BB#3:                                 # %while.end
	beq	$2, $zero, $BB22_7
	addiu	$3, $zero, 0
$BB22_4:                                # %while.body9.lr.ph
	daddiu	$3, $fp, 16
	daddiu	$4, $fp, 36
	move	$5, $2
$BB22_5:                                # %while.body9
                                        # =>This Inner Loop Header: Depth=1
	subu	$1, $2, $5
	dsll	$1, $1, 32
	dsrl	$1, $1, 32
	daddu	$1, $3, $1
	dsll	$6, $5, 32
	dsrl	$6, $6, 32
	daddu	$6, $4, $6
	lbu	$6, 0($6)
	addiu	$5, $5, -1
	bne	$5, $zero, $BB22_5
	sb	$6, 0($1)
# BB#6:
	move	$3, $2
$BB22_7:                                # %while.end15
	dsll	$1, $3, 32
	dsrl	$1, $1, 32
	daddiu	$2, $fp, 16
	daddu	$1, $2, $1
	lbu	$3, 36($fp)
	sb	$3, 0($1)
	lbu	$3, 16($fp)
	beq	$3, $zero, $BB22_13
	nop
# BB#8:
	daddiu	$1, $zero, 9
	dsll	$4, $1, 36
	daddiu	$1, $4, 127
	dsll	$1, $1, 24
	daddiu	$5, $1, 4
$BB22_9:                                # %while.body.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_11 Depth 2
	lw	$1, 0($5)
	j	$BB22_11
	nop
$BB22_10:                               # %while.body.i.i
                                        #   in Loop: Header=BB22_11 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $4, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB22_11:                               # %while.body.i.i
                                        #   Parent Loop BB22_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB22_10
	nop
# BB#12:                                # %writeUARTChar.exit.i
                                        #   in Loop: Header=BB22_9 Depth=1
	daddiu	$1, $4, 127
	dsll	$1, $1, 24
	sb	$3, 0($1)
	daddiu	$1, $2, 1
	lbu	$3, 1($2)
	bne	$3, $zero, $BB22_9
	move	$2, $1
$BB22_13:                               # %writeString.exit
	move	$sp, $fp
	ld	$fp, 56($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 64
	.set	at
	.set	macro
	.set	reorder
	.end	writeDigit
$tmp91:
	.size	writeDigit, ($tmp91)-writeDigit

	.globl	readUARTChar
	.align	3
	.type	readUARTChar,@function
	.set	nomips16                # @readUARTChar
	.ent	readUARTChar
readUARTChar:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$2, $1, 24
	lui	$3, 128
$BB23_1:                                # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	lw	$4, 0($2)
	and	$1, $4, $3
	beq	$1, $zero, $BB23_1
	nop
# BB#2:                                 # %while.end
	sra	$2, $4, 24
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	readUARTChar
$tmp95:
	.size	readUARTChar, ($tmp95)-readUARTChar

	.globl	in
	.align	3
	.type	in,@function
	.set	nomips16                # @in
	.ent	in
in:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	and $t0, $a0, $a0
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	in
$tmp99:
	.size	in, ($tmp99)-in

	.globl	out
	.align	3
	.type	out,@function
	.set	nomips16                # @out
	.ent	out
out:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	and $v0, $t0, $t0
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	out
$tmp103:
	.size	out, ($tmp103)-out

	.globl	ll
	.align	3
	.type	ll,@function
	.set	nomips16                # @ll
	.ent	ll
ll:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	ll $v0, 0($a0)
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	ll
$tmp107:
	.size	ll, ($tmp107)-ll

	.globl	sc
	.align	3
	.type	sc,@function
	.set	nomips16                # @sc
	.ent	sc
sc:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	sc $a1, 0($a0)
	#NO_APP
	#APP
	move $v0, $a1
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	sc
$tmp111:
	.size	sc, ($tmp111)-sc

	.globl	testNset
	.align	3
	.type	testNset,@function
	.set	nomips16                # @testNset
	.ent	testNset
testNset:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	ll $v0, 0($a0)
	#NO_APP
	#APP
	sc $a1, 0($a0)
	#NO_APP
	#APP
	move $v0, $a1
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	testNset
$tmp115:
	.size	testNset, ($tmp115)-testNset

	.globl	getCount
	.align	3
	.type	getCount,@function
	.set	nomips16                # @getCount
	.ent	getCount
getCount:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	mfc0 $2, $9
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	getCount
$tmp119:
	.size	getCount, ($tmp119)-getCount

	.globl	debugTlb
	.align	3
	.type	debugTlb,@function
	.set	nomips16                # @debugTlb
	.ent	debugTlb
debugTlb:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	mtc0 $0, $25
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	debugTlb
$tmp123:
	.size	debugTlb, ($tmp123)-debugTlb

	.globl	debugRegs
	.align	3
	.type	debugRegs,@function
	.set	nomips16                # @debugRegs
	.ent	debugRegs
debugRegs:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	mtc0 $0, $26
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	debugRegs
$tmp127:
	.size	debugRegs, ($tmp127)-debugRegs

	.globl	cp0Regs
	.align	3
	.type	cp0Regs,@function
	.set	nomips16                # @cp0Regs
	.ent	cp0Regs
cp0Regs:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	mtc0 $0, $27
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	cp0Regs
$tmp131:
	.size	cp0Regs, ($tmp131)-cp0Regs

	.globl	causeTrap
	.align	3
	.type	causeTrap,@function
	.set	nomips16                # @causeTrap
	.ent	causeTrap
causeTrap:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	addi $v0, $0, 10
	#NO_APP
	#APP
	addi $a0, $0, 0x98
	#NO_APP
	#APP
	dsll32 $a0,$a0,24
	#NO_APP
	#APP
	tgei $v0, 5
	#NO_APP
	#APP
	sd $0, 10($a0)
	#NO_APP
	#APP
	addi $v0, $0, 20
	#NO_APP
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	causeTrap
$tmp135:
	.size	causeTrap, ($tmp135)-causeTrap

	.globl	setInterrupts
	.align	3
	.type	setInterrupts,@function
	.set	nomips16                # @setInterrupts
	.ent	setInterrupts
setInterrupts:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	#APP
	mfc0 $a0, $12
	#NO_APP
	#APP
	ori $a0, $a0, 0xFF01
	#NO_APP
	#APP
	mtc0 $a0, $12
	#NO_APP
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4128
	addiu	$2, $zero, 1
	sb	$2, 0($1)
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	setInterrupts
$tmp139:
	.size	setInterrupts, ($tmp139)-setInterrupts

	.globl	drawRect
	.align	3
	.type	drawRect,@function
	.set	nomips16                # @drawRect
	.ent	drawRect
drawRect:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	beq	$5, $zero, $BB35_7
	nop
# BB#1:                                 # %for.cond.preheader
	slti	$1, $9, 1
	bne	$1, $zero, $BB35_17
	nop
# BB#2:                                 # %for.cond2.preheader.lr.ph
	addiu	$2, $zero, 0
	slti	$3, $8, 1
$BB35_3:                                # %for.cond2.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_4 Depth 2
	bne	$3, $zero, $BB35_5
	move	$4, $8
$BB35_4:                                # %for.body5
                                        #   Parent Loop BB35_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	addiu	$4, $4, -1
	bne	$4, $zero, $BB35_4
	nop
$BB35_5:                                # %for.inc11
                                        #   in Loop: Header=BB35_3 Depth=1
	addiu	$2, $2, 1
	bne	$2, $9, $BB35_3
	nop
# BB#6:                                 # %for.inc11
	j	$BB35_17
	nop
$BB35_7:                                # %for.cond14.preheader
	blez	$8, $BB35_12
	nop
# BB#8:
	move	$2, $8
$BB35_9:                                # %for.body17
                                        # =>This Inner Loop Header: Depth=1
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	addiu	$2, $2, -1
	bne	$2, $zero, $BB35_9
	nop
# BB#10:                                # %for.cond25.preheader
	blez	$8, $BB35_12
	nop
$BB35_11:                               # %for.body28
                                        # =>This Inner Loop Header: Depth=1
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	addiu	$8, $8, -1
	bne	$8, $zero, $BB35_11
	nop
$BB35_12:                               # %for.cond39.preheader
	blez	$9, $BB35_17
	nop
# BB#13:
	move	$2, $9
$BB35_14:                               # %for.body42
                                        # =>This Inner Loop Header: Depth=1
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	addiu	$2, $2, -1
	bne	$2, $zero, $BB35_14
	nop
# BB#15:                                # %for.cond51.preheader
	blez	$9, $BB35_17
	nop
$BB35_16:                               # %for.body54
                                        # =>This Inner Loop Header: Depth=1
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	addiu	$9, $9, -1
	bne	$9, $zero, $BB35_16
	nop
$BB35_17:                               # %if.end
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	drawRect
$tmp143:
	.size	drawRect, ($tmp143)-drawRect

	.globl	draw3DRect
	.align	3
	.type	draw3DRect,@function
	.set	nomips16                # @draw3DRect
	.ent	draw3DRect
draw3DRect:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	addiu	$3, $7, -2
	slti	$2, $3, 1
	bne	$2, $zero, $BB36_2
	nop
$BB36_1:                                # %for.body5.i
                                        # =>This Inner Loop Header: Depth=1
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	addiu	$3, $3, -1
	bne	$3, $zero, $BB36_1
	nop
$BB36_2:                                # %for.inc11.i
	addiu	$3, $8, -2
	slti	$1, $3, 1
	bne	$1, $zero, $BB36_9
	nop
# BB#3:                                 # %for.cond2.preheader.i33.preheader
	move	$4, $3
$BB36_4:                                # %for.cond2.preheader.i33
                                        # =>This Inner Loop Header: Depth=1
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	addiu	$4, $4, -1
	bne	$4, $zero, $BB36_4
	nop
# BB#5:                                 # %for.cond2.preheader.i46.preheader
	addiu	$4, $7, -2
	addiu	$5, $zero, 0
$BB36_6:                                # %for.cond2.preheader.i46
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_7 Depth 2
	bne	$2, $zero, $BB36_8
	move	$6, $4
$BB36_7:                                # %for.body5.i50
                                        #   Parent Loop BB36_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	addiu	$6, $6, -1
	bne	$6, $zero, $BB36_7
	nop
$BB36_8:                                # %for.inc11.i53
                                        #   in Loop: Header=BB36_6 Depth=1
	addiu	$5, $5, 1
	bne	$5, $3, $BB36_6
	nop
$BB36_9:                                # %drawRect.exit54
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	draw3DRect
$tmp147:
	.size	draw3DRect, ($tmp147)-draw3DRect

	.globl	malloc
	.align	3
	.type	malloc,@function
	.set	nomips16                # @malloc
	.ent	malloc
malloc:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	lui	$1, %hi(%neg(%gp_rel(malloc)))
	daddu	$1, $1, $25
	daddiu	$1, $1, %lo(%neg(%gp_rel(malloc)))
	ld	$3, %got_disp(heap)($1)
	ld	$2, 0($3)
	daddiu	$5, $zero, 19
	dsll	$1, $5, 31
	daddiu	$1, $1, 3
	dsll	$1, $1, 28
	daddiu	$1, $1, -1
	sltu	$1, $1, $2
	bne	$1, $zero, $BB37_2
	nop
# BB#1:                                 # %if.then
	j	$BB37_3
	daddu	$4, $2, $4
$BB37_2:
	dsll	$1, $5, 35
	daddiu	$1, $1, 1
	dsll	$4, $1, 24
$BB37_3:                                # %if.end
	sd	$4, 0($3)
	daddiu	$1, $zero, -16
	and	$2, $2, $1
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	malloc
$tmp151:
	.size	malloc, ($tmp151)-malloc

	.globl	free
	.align	3
	.type	free,@function
	.set	nomips16                # @free
	.ent	free
free:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	free
$tmp155:
	.size	free, ($tmp155)-free

	.globl	freeChar
	.align	3
	.type	freeChar,@function
	.set	nomips16                # @freeChar
	.ent	freeChar
freeChar:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	addiu	$2, $zero, 0
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	freeChar
$tmp159:
	.size	freeChar, ($tmp159)-freeChar

	.globl	freeInt
	.align	3
	.type	freeInt,@function
	.set	nomips16                # @freeInt
	.ent	freeInt
freeInt:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	addiu	$2, $zero, 0
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	freeInt
$tmp163:
	.size	freeInt, ($tmp163)-freeInt

	.globl	randomIndexArray
	.align	3
	.type	randomIndexArray,@function
	.set	nomips16                # @randomIndexArray
	.ent	randomIndexArray
randomIndexArray:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	lui	$1, %hi(%neg(%gp_rel(randomIndexArray)))
	daddu	$1, $1, $25
	daddiu	$1, $1, %lo(%neg(%gp_rel(randomIndexArray)))
	ld	$5, %got_disp(heap)($1)
	ld	$2, 0($5)
	daddiu	$6, $zero, 19
	dsll	$1, $6, 31
	daddiu	$1, $1, 3
	dsll	$1, $1, 28
	daddiu	$1, $1, -1
	sltu	$1, $1, $2
	bne	$1, $zero, $BB41_2
	sll	$3, $4, 0
# BB#1:                                 # %if.then.i
	dsll	$1, $3, 2
	j	$BB41_3
	daddu	$6, $2, $1
$BB41_2:
	dsll	$1, $6, 35
	daddiu	$1, $1, 1
	dsll	$6, $1, 24
$BB41_3:                                # %malloc.exit
	daddiu	$1, $zero, -16
	and	$2, $2, $1
	slti	$1, $4, 1
	bne	$1, $zero, $BB41_6
	sd	$6, 0($5)
# BB#4:
	daddiu	$5, $zero, 0
$BB41_5:                                # %for.body
                                        # =>This Inner Loop Header: Depth=1
	#APP
	mfc0 $1, $9
	#NO_APP
	div	$zero, $1, $4
	mfhi	$1
	dsll	$6, $5, 2
	daddu	$6, $2, $6
	sw	$1, 0($6)
	daddiu	$5, $5, 1
	slt	$1, $5, $3
	bne	$1, $zero, $BB41_5
	nop
$BB41_6:                                # %for.end
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	randomIndexArray
$tmp167:
	.size	randomIndexArray, ($tmp167)-randomIndexArray

	.globl	randomArray
	.align	3
	.type	randomArray,@function
	.set	nomips16                # @randomArray
	.ent	randomArray
randomArray:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	lui	$1, %hi(%neg(%gp_rel(randomArray)))
	daddu	$1, $1, $25
	daddiu	$1, $1, %lo(%neg(%gp_rel(randomArray)))
	ld	$2, %got_disp(heap)($1)
	ld	$3, 0($2)
	daddiu	$5, $zero, 19
	dsll	$1, $5, 31
	daddiu	$1, $1, 3
	dsll	$1, $1, 28
	daddiu	$1, $1, -1
	sltu	$1, $1, $3
	bne	$1, $zero, $BB42_2
	nop
# BB#1:                                 # %if.then.i
	sll	$1, $4, 0
	j	$BB42_3
	daddu	$5, $3, $1
$BB42_2:
	dsll	$1, $5, 35
	daddiu	$1, $1, 1
	dsll	$5, $1, 24
$BB42_3:                                # %malloc.exit
	daddiu	$1, $zero, -16
	and	$1, $3, $1
	cincbase	$c1, $c0, $1
	slti	$1, $4, 1
	bne	$1, $zero, $BB42_6
	sd	$5, 0($2)
# BB#4:
	addiu	$2, $zero, 0
	addiu	$3, $zero, 0
$BB42_5:                                # %for.body
                                        # =>This Inner Loop Header: Depth=1
	sll	$1, $2, 0
	cincbase	$c2, $c1, $1
	csb	$3, $zero, 0($c2)
	addiu	$2, $2, 1
	bne	$4, $2, $BB42_5
	addiu	$3, $3, -1
$BB42_6:                                # %for.end
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	randomArray
$tmp171:
	.size	randomArray, ($tmp171)-randomArray

	.globl	raise
	.align	3
	.type	raise,@function
	.set	nomips16                # @raise
	.ent	raise
raise:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	slti	$1, $5, 1
	bne	$1, $zero, $BB43_2
	addiu	$2, $zero, 1
$BB43_1:                                # %for.body
                                        # =>This Inner Loop Header: Depth=1
	addiu	$5, $5, -1
	bne	$5, $zero, $BB43_1
	mul	$2, $2, $4
$BB43_2:                                # %for.end
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	raise
$tmp175:
	.size	raise, ($tmp175)-raise

	.globl	arrayBench
	.align	3
	.type	arrayBench,@function
	.set	nomips16                # @arrayBench
	.ent	arrayBench
arrayBench:
	.frame	$fp,128,$ra
	.mask 	0x00000000,0
	.fmask	0xc0ff0000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -128
	sd	$ra, 120($sp)           # 8-byte Folded Spill
	sd	$fp, 112($sp)           # 8-byte Folded Spill
	sd	$23, 104($sp)           # 8-byte Folded Spill
	sd	$22, 96($sp)            # 8-byte Folded Spill
	sd	$21, 88($sp)            # 8-byte Folded Spill
	sd	$20, 80($sp)            # 8-byte Folded Spill
	sd	$19, 72($sp)            # 8-byte Folded Spill
	sd	$18, 64($sp)            # 8-byte Folded Spill
	sd	$17, 56($sp)            # 8-byte Folded Spill
	sd	$16, 48($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	lui	$1, %hi(%neg(%gp_rel(arrayBench)))
	daddu	$1, $1, $25
	daddiu	$2, $1, %lo(%neg(%gp_rel(arrayBench)))
	daddiu	$4, $zero, 0
	sd	$zero, 40($fp)
	sd	$zero, 32($fp)
	sd	$zero, 24($fp)
	sd	$zero, 16($fp)
	sd	$zero, 8($fp)
	sd	$zero, 0($fp)
	addiu	$5, $zero, 0
	addiu	$6, $zero, 1
	daddiu	$1, $zero, 19
	dsll	$7, $1, 31
	daddiu	$3, $7, 3
	dsll	$3, $3, 28
	daddiu	$8, $3, -1
	dsll	$9, $1, 35
	daddiu	$1, $9, 1
	dsll	$10, $1, 24
	daddiu	$11, $zero, -16
	daddiu	$1, $zero, 9
	dsll	$12, $1, 36
	daddiu	$1, $12, 127
	dsll	$1, $1, 24
	daddiu	$13, $1, 4
	addiu	$14, $zero, 32
	addiu	$15, $zero, 115
	addiu	$17, $zero, 58
	daddiu	$1, $zero, 5
	dsll	$18, $1, 61
	addiu	$19, $zero, 16
	addiu	$22, $zero, 10
$BB44_1:                                # %for.body6
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_4 Depth 2
                                        #     Child Loop BB44_9 Depth 2
                                        #     Child Loop BB44_13 Depth 2
                                        #     Child Loop BB44_16 Depth 2
                                        #     Child Loop BB44_19 Depth 2
                                        #     Child Loop BB44_22 Depth 2
                                        #     Child Loop BB44_25 Depth 2
                                        #     Child Loop BB44_28 Depth 2
                                        #     Child Loop BB44_31 Depth 2
                                        #     Child Loop BB44_33 Depth 2
                                        #       Child Loop BB44_35 Depth 3
                                        #     Child Loop BB44_39 Depth 2
                                        #     Child Loop BB44_42 Depth 2
                                        #     Child Loop BB44_45 Depth 2
                                        #     Child Loop BB44_48 Depth 2
                                        #     Child Loop BB44_51 Depth 2
                                        #     Child Loop BB44_54 Depth 2
                                        #     Child Loop BB44_56 Depth 2
                                        #       Child Loop BB44_58 Depth 3
                                        #     Child Loop BB44_62 Depth 2
	ld	$1, %got_disp(heap)($2)
	ld	$3, 0($1)
	sltu	$1, $8, $3
	sll	$ra, $6, 0
	bne	$1, $zero, $BB44_3
	move	$24, $10
# BB#2:                                 # %if.then.i.i
                                        #   in Loop: Header=BB44_1 Depth=1
	dsll	$1, $ra, 2
	daddu	$24, $3, $1
$BB44_3:                                # %malloc.exit.i
                                        #   in Loop: Header=BB44_1 Depth=1
	ld	$1, %got_disp(heap)($2)
	sd	$24, 0($1)
	and	$24, $3, $11
	slti	$16, $6, 1
	bne	$16, $zero, $BB44_5
	daddiu	$3, $zero, 0
$BB44_4:                                # %for.body.i
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#APP
	mfc0 $1, $9
	#NO_APP
	div	$zero, $1, $6
	mfhi	$1
	dsll	$25, $3, 2
	daddu	$25, $24, $25
	sw	$1, 0($25)
	daddiu	$3, $3, 1
	slt	$1, $3, $ra
	bne	$1, $zero, $BB44_4
	nop
$BB44_5:                                # %randomIndexArray.exit
                                        #   in Loop: Header=BB44_1 Depth=1
	#APP
	mfc0 $25, $9
	#NO_APP
	ld	$1, %got_disp(heap)($2)
	ld	$3, 0($1)
	daddiu	$1, $7, 3
	dsll	$1, $1, 28
	daddiu	$1, $1, -1
	sltu	$1, $1, $3
	bne	$1, $zero, $BB44_7
	nop
# BB#6:                                 # %if.then.i
                                        #   in Loop: Header=BB44_1 Depth=1
	j	$BB44_8
	daddu	$20, $3, $ra
$BB44_7:                                #   in Loop: Header=BB44_1 Depth=1
	daddiu	$1, $9, 1
	dsll	$20, $1, 24
$BB44_8:                                # %malloc.exit
                                        #   in Loop: Header=BB44_1 Depth=1
	and	$1, $3, $11
	cincbase	$c1, $c0, $1
	ld	$1, %got_disp(heap)($2)
	sd	$20, 0($1)
	bne	$16, $zero, $BB44_11
	nop
	
	daddiu	$20, $24, 0                    # Start address
	dsll $3, $6, 2                        # Calculate the termination address
	daddu $3, $24, $3
$BB44_9:                                # %for.body13
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#sll	$1, $20, 0
	#dsll	$1, $20, 2
	lw	$1, 0($20)                        # Load index
	#cincbase	$c2, $c1, $1
	daddiu	$20, $20, 4                    # Calculate next index into array of indices
	clb	$1, $1, 0($c1)                    # Load byte
	bne	$3, $20, $BB44_9                  # Branch back if we haven't reached the termination address
	daddu	$21, $1, $21                    # Sum the byte
# BB#10:                                # %for.cond10.for.end21_crit_edge
                                        #   in Loop: Header=BB44_1 Depth=1
	sll	$3, $21, 0
$BB44_11:                               # %for.end21
                                        #   in Loop: Header=BB44_1 Depth=1
	#APP
	mfc0 $1, $9
	#NO_APP
	subu	$24, $1, $25
	slt	$16, $zero, $24
	dsll	$25, $16, 32
	lw	$1, 0($13)
	j	$BB44_13
	nop
$BB44_12:                               # %while.body.i.i91
                                        #   in Loop: Header=BB44_13 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $12, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB44_13:                               # %while.body.i.i91
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_12
	nop
# BB#14:                                # %writeUARTChar.exit.i94
                                        #   in Loop: Header=BB44_1 Depth=1
	daddiu	$1, $12, 127
	dsll	$20, $1, 24
	sb	$14, 0($20)
	j	$BB44_16
	daddiu	$21, $20, 4
$BB44_15:                               # %while.body.i.i91.1
                                        #   in Loop: Header=BB44_16 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB44_16:                               # %while.body.i.i91.1
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($21)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_15
	nop
# BB#17:                                # %writeUARTChar.exit.i94.1
                                        #   in Loop: Header=BB44_1 Depth=1
	sb	$15, 0($20)
	lw	$1, 0($21)
	j	$BB44_19
	nop
$BB44_18:                               # %while.body.i.i91.2
                                        #   in Loop: Header=BB44_19 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $12, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB44_19:                               # %while.body.i.i91.2
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_18
	nop
# BB#20:                                # %writeUARTChar.exit.i94.2
                                        #   in Loop: Header=BB44_1 Depth=1
	daddiu	$1, $12, 127
	dsll	$20, $1, 24
	addiu	$1, $zero, 105
	sb	$1, 0($20)
	j	$BB44_22
	daddiu	$21, $20, 4
$BB44_21:                               # %while.body.i.i91.3
                                        #   in Loop: Header=BB44_22 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB44_22:                               # %while.body.i.i91.3
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($21)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_21
	nop
# BB#23:                                # %writeUARTChar.exit.i94.3
                                        #   in Loop: Header=BB44_1 Depth=1
	addiu	$1, $zero, 122
	sb	$1, 0($20)
	lw	$1, 0($21)
	j	$BB44_25
	nop
$BB44_24:                               # %while.body.i.i91.4
                                        #   in Loop: Header=BB44_25 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $12, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB44_25:                               # %while.body.i.i91.4
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_24
	nop
# BB#26:                                # %writeUARTChar.exit.i94.4
                                        #   in Loop: Header=BB44_1 Depth=1
	daddiu	$1, $12, 127
	dsll	$20, $1, 24
	addiu	$1, $zero, 101
	sb	$1, 0($20)
	j	$BB44_28
	daddiu	$21, $20, 4
$BB44_27:                               # %while.body.i.i91.5
                                        #   in Loop: Header=BB44_28 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB44_28:                               # %while.body.i.i91.5
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($21)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_27
	nop
# BB#29:                                # %writeUARTChar.exit.i94.5
                                        #   in Loop: Header=BB44_1 Depth=1
	sb	$17, 0($20)
	lw	$1, 0($21)
	j	$BB44_31
	nop
$BB44_30:                               # %while.body.i.i91.6
                                        #   in Loop: Header=BB44_31 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $12, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB44_31:                               # %while.body.i.i91.6
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_30
	nop
# BB#32:                                # %writeUARTChar.exit.i94.6
                                        #   in Loop: Header=BB44_1 Depth=1
	sll	$24, $24, 0
	dsrl	$25, $25, 32
	daddiu	$1, $12, 127
	dsll	$20, $1, 24
	sb	$14, 0($20)
	addiu	$21, $zero, 0
	movz	$24, $zero, $16
$BB44_33:                               # %for.body.i106
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_35 Depth 3
	j	$BB44_35
	daddiu	$1, $20, 4
$BB44_34:                               # %while.body.i.i109
                                        #   in Loop: Header=BB44_35 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $12, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB44_35:                               # %while.body.i.i109
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_34
	nop
# BB#36:                                # %writeUARTChar.exit.i113
                                        #   in Loop: Header=BB44_33 Depth=2
	sltu	$1, $ra, $18
	dsrl	$23, $ra, 60
	daddiu	$16, $23, 55
	ori	$23, $23, 48
	movn	$16, $23, $1
	sll	$1, $16, 0
	daddiu	$16, $12, 127
	dsll	$16, $16, 24
	sb	$1, 0($16)
	addiu	$21, $21, 1
	bne	$21, $19, $BB44_33
	dsll	$ra, $ra, 4
# BB#37:                                # %while.body.i118.loopexit
                                        #   in Loop: Header=BB44_1 Depth=1
	j	$BB44_39
	daddiu	$1, $16, 4
$BB44_38:                               # %while.body.i.i121
                                        #   in Loop: Header=BB44_39 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $12, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB44_39:                               # %while.body.i.i121
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_38
	nop
# BB#40:                                # %writeUARTChar.exit.i124
                                        #   in Loop: Header=BB44_1 Depth=1
	daddiu	$1, $12, 127
	dsll	$16, $1, 24
	sb	$14, 0($16)
	j	$BB44_42
	daddiu	$20, $16, 4
$BB44_41:                               # %while.body.i.i121.1
                                        #   in Loop: Header=BB44_42 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB44_42:                               # %while.body.i.i121.1
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($20)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_41
	nop
# BB#43:                                # %writeUARTChar.exit.i124.1
                                        #   in Loop: Header=BB44_1 Depth=1
	sb	$15, 0($16)
	lw	$1, 0($20)
	j	$BB44_45
	nop
$BB44_44:                               # %while.body.i.i121.2
                                        #   in Loop: Header=BB44_45 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $12, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB44_45:                               # %while.body.i.i121.2
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_44
	nop
# BB#46:                                # %writeUARTChar.exit.i124.2
                                        #   in Loop: Header=BB44_1 Depth=1
	daddiu	$1, $12, 127
	dsll	$16, $1, 24
	addiu	$1, $zero, 117
	sb	$1, 0($16)
	j	$BB44_48
	daddiu	$20, $16, 4
$BB44_47:                               # %while.body.i.i121.3
                                        #   in Loop: Header=BB44_48 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB44_48:                               # %while.body.i.i121.3
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($20)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_47
	nop
# BB#49:                                # %writeUARTChar.exit.i124.3
                                        #   in Loop: Header=BB44_1 Depth=1
	addiu	$1, $zero, 109
	sb	$1, 0($16)
	lw	$1, 0($20)
	j	$BB44_51
	nop
$BB44_50:                               # %while.body.i.i121.4
                                        #   in Loop: Header=BB44_51 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $12, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB44_51:                               # %while.body.i.i121.4
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_50
	nop
# BB#52:                                # %writeUARTChar.exit.i124.4
                                        #   in Loop: Header=BB44_1 Depth=1
	daddiu	$1, $12, 127
	dsll	$16, $1, 24
	sb	$17, 0($16)
	j	$BB44_54
	daddiu	$20, $16, 4
$BB44_53:                               # %while.body.i.i121.5
                                        #   in Loop: Header=BB44_54 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB44_54:                               # %while.body.i.i121.5
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($20)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_53
	nop
# BB#55:                                # %writeUARTChar.exit.i124.5
                                        #   in Loop: Header=BB44_1 Depth=1
	sb	$14, 0($16)
	addiu	$16, $zero, 0
$BB44_56:                               # %for.body.i136
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_58 Depth 3
	daddiu	$1, $12, 127
	dsll	$20, $1, 24
	j	$BB44_58
	daddiu	$21, $20, 4
$BB44_57:                               # %while.body.i.i139
                                        #   in Loop: Header=BB44_58 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB44_58:                               # %while.body.i.i139
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($21)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_57
	nop
# BB#59:                                # %writeUARTChar.exit.i143
                                        #   in Loop: Header=BB44_56 Depth=2
	sltu	$1, $3, $18
	dsrl	$23, $3, 60
	daddiu	$21, $23, 55
	ori	$23, $23, 48
	movn	$21, $23, $1
	sll	$1, $21, 0
	sb	$1, 0($20)
	addiu	$16, $16, 1
	bne	$16, $19, $BB44_56
	dsll	$3, $3, 4
# BB#60:                                # %while.body.i148.loopexit
                                        #   in Loop: Header=BB44_1 Depth=1
	daddiu	$1, $12, 127
	dsll	$3, $1, 24
	j	$BB44_62
	daddiu	$16, $3, 4
$BB44_61:                               # %while.body.i.i151
                                        #   in Loop: Header=BB44_62 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB44_62:                               # %while.body.i.i151
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($16)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_61
	nop
# BB#63:                                # %writeUARTChar.exit.i154
                                        #   in Loop: Header=BB44_1 Depth=1
	ddiv	$zero, $24, $25
	mflo	$1
	sb	$22, 0($3)
	dsll	$4, $4, 3
	daddiu	$3, $fp, 0
	daddu	$24, $3, $4
	ld	$4, 0($24)
	daddu	$1, $4, $1
	mul	$6, $6, $22
	addiu	$5, $5, 1
	sd	$1, 0($24)
	addiu	$1, $zero, 6
	bne	$5, $1, $BB44_1
	sll	$4, $5, 0
# BB#64:                                # %while.body.i159.preheader
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$4, $1, 24
	j	$BB44_66
	daddiu	$5, $4, 4
$BB44_65:                               # %while.body.i.i162
                                        #   in Loop: Header=BB44_66 Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB44_66:                               # %while.body.i.i162
                                        # =>This Inner Loop Header: Depth=1
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_65
	nop
# BB#67:                                # %writeUARTChar.exit.i165
	addiu	$1, $zero, 10
	sb	$1, 0($4)
	lw	$1, 0($5)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB44_70
	nop
# BB#68:
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$1, $1, 24
	daddiu	$4, $1, 4
$BB44_69:                               # %while.body.i.i162.1
                                        # =>This Inner Loop Header: Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
	lw	$1, 0($4)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_69
	nop
$BB44_70:                               # %writeUARTChar.exit.i165.1
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$4, $1, 24
	addiu	$1, $zero, 83
	sb	$1, 0($4)
	j	$BB44_72
	daddiu	$5, $4, 4
$BB44_71:                               # %while.body.i.i162.2
                                        #   in Loop: Header=BB44_72 Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB44_72:                               # %while.body.i.i162.2
                                        # =>This Inner Loop Header: Depth=1
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_71
	nop
# BB#73:                                # %writeUARTChar.exit.i165.2
	addiu	$1, $zero, 117
	sb	$1, 0($4)
	lw	$1, 0($5)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB44_76
	nop
# BB#74:
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$1, $1, 24
	daddiu	$4, $1, 4
$BB44_75:                               # %while.body.i.i162.3
                                        # =>This Inner Loop Header: Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
	lw	$1, 0($4)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_75
	nop
$BB44_76:                               # %writeUARTChar.exit.i165.3
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$4, $1, 24
	addiu	$5, $zero, 109
	sb	$5, 0($4)
	j	$BB44_78
	daddiu	$6, $4, 4
$BB44_77:                               # %while.body.i.i162.4
                                        #   in Loop: Header=BB44_78 Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB44_78:                               # %while.body.i.i162.4
                                        # =>This Inner Loop Header: Depth=1
	lw	$1, 0($6)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_77
	nop
# BB#79:                                # %writeUARTChar.exit.i165.4
	sb	$5, 0($4)
	lw	$1, 0($6)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB44_82
	nop
# BB#80:
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$1, $1, 24
	daddiu	$4, $1, 4
$BB44_81:                               # %while.body.i.i162.5
                                        # =>This Inner Loop Header: Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
	lw	$1, 0($4)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_81
	nop
$BB44_82:                               # %writeUARTChar.exit.i165.5
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$4, $1, 24
	addiu	$1, $zero, 97
	sb	$1, 0($4)
	j	$BB44_84
	daddiu	$5, $4, 4
$BB44_83:                               # %while.body.i.i162.6
                                        #   in Loop: Header=BB44_84 Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB44_84:                               # %while.body.i.i162.6
                                        # =>This Inner Loop Header: Depth=1
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_83
	nop
# BB#85:                                # %writeUARTChar.exit.i165.6
	addiu	$1, $zero, 114
	sb	$1, 0($4)
	lw	$1, 0($5)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB44_88
	nop
# BB#86:
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$1, $1, 24
	daddiu	$4, $1, 4
$BB44_87:                               # %while.body.i.i162.7
                                        # =>This Inner Loop Header: Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
	lw	$1, 0($4)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_87
	nop
$BB44_88:                               # %writeUARTChar.exit.i165.7
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$5, $1, 24
	addiu	$1, $zero, 121
	sb	$1, 0($5)
	j	$BB44_90
	daddiu	$6, $5, 4
$BB44_89:                               # %while.body.i.i162.8
                                        #   in Loop: Header=BB44_90 Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB44_90:                               # %while.body.i.i162.8
                                        # =>This Inner Loop Header: Depth=1
	lw	$1, 0($6)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_89
	nop
# BB#91:                                # %writeUARTChar.exit.i165.8
	addiu	$4, $zero, 58
	sb	$4, 0($5)
	lw	$1, 0($6)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB44_94
	nop
# BB#92:
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$1, $1, 24
	daddiu	$5, $1, 4
$BB44_93:                               # %while.body.i.i162.9
                                        # =>This Inner Loop Header: Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_93
	nop
$BB44_94:                               # %writeUARTChar.exit.i165.9
	daddiu	$1, $zero, 9
	dsll	$5, $1, 36
	daddiu	$1, $5, 127
	dsll	$6, $1, 24
	addiu	$7, $zero, 10
	sb	$7, 0($6)
	addiu	$8, $zero, 0
	addiu	$9, $zero, 115
	addiu	$10, $zero, 105
	addiu	$11, $zero, 122
	addiu	$12, $zero, 101
	addiu	$13, $zero, 32
	daddiu	$1, $zero, 5
	dsll	$14, $1, 61
	addiu	$15, $zero, 16
	addiu	$24, $zero, 116
	addiu	$25, $zero, 109
	addiu	$16, $zero, 48
	addiu	$17, $zero, 120
	addiu	$18, $zero, 6
$BB44_95:                               # %for.body43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_97 Depth 2
                                        #     Child Loop BB44_100 Depth 2
                                        #     Child Loop BB44_103 Depth 2
                                        #     Child Loop BB44_106 Depth 2
                                        #     Child Loop BB44_109 Depth 2
                                        #     Child Loop BB44_112 Depth 2
                                        #     Child Loop BB44_114 Depth 2
                                        #     Child Loop BB44_116 Depth 2
                                        #       Child Loop BB44_118 Depth 3
                                        #     Child Loop BB44_122 Depth 2
                                        #     Child Loop BB44_125 Depth 2
                                        #     Child Loop BB44_128 Depth 2
                                        #     Child Loop BB44_131 Depth 2
                                        #     Child Loop BB44_134 Depth 2
                                        #     Child Loop BB44_137 Depth 2
                                        #     Child Loop BB44_140 Depth 2
                                        #     Child Loop BB44_143 Depth 2
                                        #     Child Loop BB44_145 Depth 2
                                        #       Child Loop BB44_147 Depth 3
                                        #     Child Loop BB44_150 Depth 2
                                        #       Child Loop BB44_152 Depth 3
	sll	$1, $8, 0
	dsll	$1, $1, 3
	daddu	$1, $3, $1
	ld	$19, 0($1)
	j	$BB44_97
	daddiu	$1, $6, 4
$BB44_96:                               # %while.body.i.i173
                                        #   in Loop: Header=BB44_97 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $5, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB44_97:                               # %while.body.i.i173
                                        #   Parent Loop BB44_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_96
	nop
# BB#98:                                # %writeUARTChar.exit.i176
                                        #   in Loop: Header=BB44_95 Depth=1
	daddiu	$1, $5, 127
	dsll	$20, $1, 24
	sb	$9, 0($20)
	j	$BB44_100
	daddiu	$21, $20, 4
$BB44_99:                               # %while.body.i.i173.1
                                        #   in Loop: Header=BB44_100 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB44_100:                              # %while.body.i.i173.1
                                        #   Parent Loop BB44_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($21)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_99
	nop
# BB#101:                               # %writeUARTChar.exit.i176.1
                                        #   in Loop: Header=BB44_95 Depth=1
	sb	$10, 0($20)
	lw	$1, 0($21)
	j	$BB44_103
	nop
$BB44_102:                              # %while.body.i.i173.2
                                        #   in Loop: Header=BB44_103 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $5, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB44_103:                              # %while.body.i.i173.2
                                        #   Parent Loop BB44_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_102
	nop
# BB#104:                               # %writeUARTChar.exit.i176.2
                                        #   in Loop: Header=BB44_95 Depth=1
	daddiu	$1, $5, 127
	dsll	$20, $1, 24
	sb	$11, 0($20)
	j	$BB44_106
	daddiu	$21, $20, 4
$BB44_105:                              # %while.body.i.i173.3
                                        #   in Loop: Header=BB44_106 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB44_106:                              # %while.body.i.i173.3
                                        #   Parent Loop BB44_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($21)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_105
	nop
# BB#107:                               # %writeUARTChar.exit.i176.3
                                        #   in Loop: Header=BB44_95 Depth=1
	sb	$12, 0($20)
	lw	$1, 0($21)
	j	$BB44_109
	nop
$BB44_108:                              # %while.body.i.i173.4
                                        #   in Loop: Header=BB44_109 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $5, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB44_109:                              # %while.body.i.i173.4
                                        #   Parent Loop BB44_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_108
	nop
# BB#110:                               # %writeUARTChar.exit.i176.4
                                        #   in Loop: Header=BB44_95 Depth=1
	daddiu	$1, $5, 127
	dsll	$20, $1, 24
	sb	$4, 0($20)
	j	$BB44_112
	daddiu	$21, $20, 4
$BB44_111:                              # %while.body.i.i173.5
                                        #   in Loop: Header=BB44_112 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB44_112:                              # %while.body.i.i173.5
                                        #   Parent Loop BB44_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($21)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_111
	nop
# BB#113:                               # %writeUARTChar.exit.i176.5
                                        #   in Loop: Header=BB44_95 Depth=1
	sb	$13, 0($20)
	daddiu	$21, $zero, 1
	addiu	$20, $zero, 0
	addiu	$22, $zero, 1
	blez	$8, $BB44_116
	addiu	$23, $zero, 0
$BB44_114:                              # %for.body.i181
                                        #   Parent Loop BB44_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addiu	$23, $23, 1
	bne	$8, $23, $BB44_114
	mul	$22, $22, $7
# BB#115:                               # %raise.exit.loopexit
                                        #   in Loop: Header=BB44_95 Depth=1
	sll	$21, $22, 0
$BB44_116:                              # %for.body.i203
                                        #   Parent Loop BB44_95 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_118 Depth 3
	daddiu	$1, $5, 127
	dsll	$22, $1, 24
	j	$BB44_118
	daddiu	$23, $22, 4
$BB44_117:                              # %while.body.i.i206
                                        #   in Loop: Header=BB44_118 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB44_118:                              # %while.body.i.i206
                                        #   Parent Loop BB44_95 Depth=1
                                        #     Parent Loop BB44_116 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($23)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_117
	nop
# BB#119:                               # %writeUARTChar.exit.i210
                                        #   in Loop: Header=BB44_116 Depth=2
	sltu	$1, $21, $14
	dsrl	$ra, $21, 60
	daddiu	$23, $ra, 55
	ori	$ra, $ra, 48
	movn	$23, $ra, $1
	sll	$1, $23, 0
	sb	$1, 0($22)
	addiu	$20, $20, 1
	bne	$20, $15, $BB44_116
	dsll	$21, $21, 4
# BB#120:                               # %while.body.i185.loopexit
                                        #   in Loop: Header=BB44_95 Depth=1
	daddiu	$1, $5, 127
	dsll	$20, $1, 24
	j	$BB44_122
	daddiu	$21, $20, 4
$BB44_121:                              # %while.body.i.i188
                                        #   in Loop: Header=BB44_122 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB44_122:                              # %while.body.i.i188
                                        #   Parent Loop BB44_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($21)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_121
	nop
# BB#123:                               # %writeUARTChar.exit.i191
                                        #   in Loop: Header=BB44_95 Depth=1
	sb	$24, 0($20)
	lw	$1, 0($21)
	j	$BB44_125
	nop
$BB44_124:                              # %while.body.i.i188.1
                                        #   in Loop: Header=BB44_125 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $5, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB44_125:                              # %while.body.i.i188.1
                                        #   Parent Loop BB44_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_124
	nop
# BB#126:                               # %writeUARTChar.exit.i191.1
                                        #   in Loop: Header=BB44_95 Depth=1
	daddiu	$1, $5, 127
	dsll	$20, $1, 24
	sb	$10, 0($20)
	j	$BB44_128
	daddiu	$21, $20, 4
$BB44_127:                              # %while.body.i.i188.2
                                        #   in Loop: Header=BB44_128 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB44_128:                              # %while.body.i.i188.2
                                        #   Parent Loop BB44_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($21)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_127
	nop
# BB#129:                               # %writeUARTChar.exit.i191.2
                                        #   in Loop: Header=BB44_95 Depth=1
	sb	$25, 0($20)
	lw	$1, 0($21)
	j	$BB44_131
	nop
$BB44_130:                              # %while.body.i.i188.3
                                        #   in Loop: Header=BB44_131 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $5, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB44_131:                              # %while.body.i.i188.3
                                        #   Parent Loop BB44_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_130
	nop
# BB#132:                               # %writeUARTChar.exit.i191.3
                                        #   in Loop: Header=BB44_95 Depth=1
	daddiu	$1, $5, 127
	dsll	$20, $1, 24
	sb	$12, 0($20)
	j	$BB44_134
	daddiu	$21, $20, 4
$BB44_133:                              # %while.body.i.i188.4
                                        #   in Loop: Header=BB44_134 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB44_134:                              # %while.body.i.i188.4
                                        #   Parent Loop BB44_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($21)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_133
	nop
# BB#135:                               # %writeUARTChar.exit.i191.4
                                        #   in Loop: Header=BB44_95 Depth=1
	sb	$4, 0($20)
	lw	$1, 0($21)
	j	$BB44_137
	nop
$BB44_136:                              # %while.body.i.i188.5
                                        #   in Loop: Header=BB44_137 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $5, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB44_137:                              # %while.body.i.i188.5
                                        #   Parent Loop BB44_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_136
	nop
# BB#138:                               # %writeUARTChar.exit.i191.5
                                        #   in Loop: Header=BB44_95 Depth=1
	daddiu	$1, $5, 127
	dsll	$20, $1, 24
	sb	$13, 0($20)
	j	$BB44_140
	daddiu	$21, $20, 4
$BB44_139:                              # %while.body.i.i188.6
                                        #   in Loop: Header=BB44_140 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB44_140:                              # %while.body.i.i188.6
                                        #   Parent Loop BB44_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($21)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_139
	nop
# BB#141:                               # %writeUARTChar.exit.i191.6
                                        #   in Loop: Header=BB44_95 Depth=1
	sb	$16, 0($20)
	lw	$1, 0($21)
	j	$BB44_143
	nop
$BB44_142:                              # %while.body.i.i188.7
                                        #   in Loop: Header=BB44_143 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $5, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB44_143:                              # %while.body.i.i188.7
                                        #   Parent Loop BB44_95 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_142
	nop
# BB#144:                               # %writeUARTChar.exit.i191.7
                                        #   in Loop: Header=BB44_95 Depth=1
	daddiu	$1, $5, 127
	dsll	$20, $1, 24
	sb	$17, 0($20)
	addiu	$22, $zero, 0
$BB44_145:                              # %for.body.i79
                                        #   Parent Loop BB44_95 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_147 Depth 3
	j	$BB44_147
	daddiu	$1, $20, 4
$BB44_146:                              # %while.body.i.i82
                                        #   in Loop: Header=BB44_147 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $5, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB44_147:                              # %while.body.i.i82
                                        #   Parent Loop BB44_95 Depth=1
                                        #     Parent Loop BB44_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_146
	nop
# BB#148:                               # %writeUARTChar.exit.i84
                                        #   in Loop: Header=BB44_145 Depth=2
	sltu	$1, $19, $14
	dsrl	$23, $19, 60
	daddiu	$21, $23, 55
	ori	$23, $23, 48
	movn	$21, $23, $1
	sll	$1, $21, 0
	daddiu	$21, $5, 127
	dsll	$21, $21, 24
	ld	$23, %got_page($.str6)($2)
	sb	$1, 0($21)
	addiu	$22, $22, 1
	bne	$22, $15, $BB44_145
	dsll	$19, $19, 4
# BB#149:                               #   in Loop: Header=BB44_95 Depth=1
	addiu	$19, $zero, 32
	daddiu	$20, $23, %got_ofst($.str6)
$BB44_150:                              # %while.body.i
                                        #   Parent Loop BB44_95 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_152 Depth 3
	j	$BB44_152
	daddiu	$1, $21, 4
$BB44_151:                              # %while.body.i.i
                                        #   in Loop: Header=BB44_152 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $5, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB44_152:                              # %while.body.i.i
                                        #   Parent Loop BB44_95 Depth=1
                                        #     Parent Loop BB44_150 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB44_151
	nop
# BB#153:                               # %writeUARTChar.exit.i
                                        #   in Loop: Header=BB44_150 Depth=2
	daddiu	$1, $5, 127
	dsll	$1, $1, 24
	sb	$19, 0($1)
	daddiu	$1, $20, 1
	lbu	$19, 1($20)
	bne	$19, $zero, $BB44_150
	move	$20, $1
# BB#154:                               # %writeString.exit
                                        #   in Loop: Header=BB44_95 Depth=1
	addiu	$8, $8, 1
	bne	$8, $18, $BB44_95
	nop
# BB#155:                               # %for.end50
	addiu	$2, $zero, 0
	move	$sp, $fp
	ld	$16, 48($sp)            # 8-byte Folded Reload
	ld	$17, 56($sp)            # 8-byte Folded Reload
	ld	$18, 64($sp)            # 8-byte Folded Reload
	ld	$19, 72($sp)            # 8-byte Folded Reload
	ld	$20, 80($sp)            # 8-byte Folded Reload
	ld	$21, 88($sp)            # 8-byte Folded Reload
	ld	$22, 96($sp)            # 8-byte Folded Reload
	ld	$23, 104($sp)           # 8-byte Folded Reload
	ld	$fp, 112($sp)           # 8-byte Folded Reload
	ld	$ra, 120($sp)           # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 128
	.set	at
	.set	macro
	.set	reorder
	.end	arrayBench
$tmp179:
	.size	arrayBench, ($tmp179)-arrayBench

	.globl	swap
	.align	3
	.type	swap,@function
	.set	nomips16                # @swap
	.ent	swap
swap:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	sll	$1, $4, 0
	cincbase	$c2, $c1, $1
	clb	$1, $zero, 0($c2)
	sll	$2, $5, 0
	cincbase	$c1, $c1, $2
	clb	$2, $zero, 0($c1)
	csb	$2, $zero, 0($c2)
	csb	$1, $zero, 0($c1)
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	swap
$tmp183:
	.size	swap, ($tmp183)-swap

	.globl	choose_pivot
	.align	3
	.type	choose_pivot,@function
	.set	nomips16                # @choose_pivot
	.ent	choose_pivot
choose_pivot:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	daddu	$1, $5, $4
	dsrl	$2, $1, 63
	daddu	$1, $1, $2
	dsrl	$1, $1, 1
	sll	$2, $1, 0
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	choose_pivot
$tmp187:
	.size	choose_pivot, ($tmp187)-choose_pivot

	.globl	quicksort
	.align	3
	.type	quicksort,@function
	.set	nomips16                # @quicksort
	.ent	quicksort
quicksort:
	.frame	$fp,96,$ra
	.mask 	0x00000000,0
	.fmask	0xd01f0000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -96
	sd	$ra, 88($sp)            # 8-byte Folded Spill
	sd	$fp, 80($sp)            # 8-byte Folded Spill
	sd	$gp, 72($sp)            # 8-byte Folded Spill
	sd	$20, 64($sp)            # 8-byte Folded Spill
	sd	$19, 56($sp)            # 8-byte Folded Spill
	sd	$18, 48($sp)            # 8-byte Folded Spill
	sd	$17, 40($sp)            # 8-byte Folded Spill
	sd	$16, 32($sp)            # 8-byte Folded Spill
	csc	$c16, $sp, 0($c0)       # 32-byte Folded Spill
	move	$fp, $sp
	lui	$1, %hi(%neg(%gp_rel(quicksort)))
	daddu	$2, $1, $25
	move	$16, $5
	cincbase	$c16, $c1, $zero
	slt	$1, $4, $16
	beq	$1, $zero, $BB47_16
	nop
# BB#1:                                 # %if.then.lr.ph
	daddiu	$18, $2, %lo(%neg(%gp_rel(quicksort)))
	sll	$19, $16, 0
	ld	$17, %call16(quicksort)($18)
$BB47_2:                                # %if.then
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_4 Depth 2
                                        #       Child Loop BB47_5 Depth 3
                                        #       Child Loop BB47_8 Depth 3
	sll	$1, $4, 0
	daddu	$2, $1, $19
	dsrl	$3, $2, 63
	daddu	$2, $2, $3
	dsrl	$2, $2, 1
	sll	$2, $2, 0
	cincbase	$c2, $c16, $2
	clb	$2, $zero, 0($c2)
	cincbase	$c1, $c16, $1
	clb	$1, $zero, 0($c1)
	csb	$2, $zero, 0($c1)
	csb	$1, $zero, 0($c2)
	clb	$2, $zero, 0($c1)
	slt	$1, $4, $16
	beq	$1, $zero, $BB47_14
	nop
# BB#3:                                 # %while.cond4.preheader.lr.ph
                                        #   in Loop: Header=BB47_2 Depth=1
	addiu	$3, $4, 1
	move	$20, $16
$BB47_4:                                # %while.cond4.preheader
                                        #   Parent Loop BB47_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_5 Depth 3
                                        #       Child Loop BB47_8 Depth 3
	move	$5, $3
$BB47_5:                                # %while.cond4
                                        #   Parent Loop BB47_2 Depth=1
                                        #     Parent Loop BB47_4 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	move	$3, $5
	slt	$1, $16, $3
	bne	$1, $zero, $BB47_7
	nop
# BB#6:                                 # %land.rhs
                                        #   in Loop: Header=BB47_5 Depth=3
	sll	$1, $3, 0
	cincbase	$c2, $c16, $1
	clb	$1, $zero, 0($c2)
	sll	$5, $2, 24
	sra	$5, $5, 24
	slt	$1, $5, $1
	beq	$1, $zero, $BB47_5
	addiu	$5, $3, 1
$BB47_7:                                #   in Loop: Header=BB47_4 Depth=2
	move	$5, $20
$BB47_8:                                # %while.cond14
                                        #   Parent Loop BB47_2 Depth=1
                                        #     Parent Loop BB47_4 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	move	$20, $5
	slt	$1, $20, $4
	bne	$1, $zero, $BB47_10
	nop
# BB#9:                                 # %land.rhs17
                                        #   in Loop: Header=BB47_8 Depth=3
	sll	$1, $20, 0
	cincbase	$c2, $c16, $1
	clb	$1, $zero, 0($c2)
	sll	$5, $2, 24
	sra	$5, $5, 24
	slt	$1, $5, $1
	bne	$1, $zero, $BB47_8
	addiu	$5, $20, -1
$BB47_10:                               # %while.end26
                                        #   in Loop: Header=BB47_4 Depth=2
	slt	$1, $3, $20
	beq	$1, $zero, $BB47_12
	nop
# BB#11:                                # %if.then29
                                        #   in Loop: Header=BB47_4 Depth=2
	sll	$1, $3, 0
	cincbase	$c2, $c16, $1
	clb	$1, $zero, 0($c2)
	sll	$5, $20, 0
	cincbase	$c3, $c16, $5
	clb	$5, $zero, 0($c3)
	csb	$5, $zero, 0($c2)
	csb	$1, $zero, 0($c3)
$BB47_12:                               # %while.cond.backedge
                                        #   in Loop: Header=BB47_4 Depth=2
	slt	$1, $20, $3
	beq	$1, $zero, $BB47_4
	nop
# BB#13:                                # %while.cond.while.end30_crit_edge
                                        #   in Loop: Header=BB47_2 Depth=1
	clb	$2, $zero, 0($c1)
	j	$BB47_15
	nop
$BB47_14:                               #   in Loop: Header=BB47_2 Depth=1
	move	$20, $16
$BB47_15:                               # %while.end30
                                        #   in Loop: Header=BB47_2 Depth=1
	sll	$1, $20, 0
	cincbase	$c2, $c16, $1
	clb	$1, $zero, 0($c2)
	csb	$1, $zero, 0($c1)
	csb	$2, $zero, 0($c2)
	addiu	$5, $20, -1
	move	$25, $17
	cincbase	$c1, $c16, $zero
	jalr	$25
	move	$gp, $18
	addiu	$4, $20, 1
	slt	$1, $4, $16
	bne	$1, $zero, $BB47_2
	nop
$BB47_16:                               # %if.end32
	move	$sp, $fp
	clc	$c16, $sp, 0($c0)       # 32-byte Folded Reload
	ld	$16, 32($sp)            # 8-byte Folded Reload
	ld	$17, 40($sp)            # 8-byte Folded Reload
	ld	$18, 48($sp)            # 8-byte Folded Reload
	ld	$19, 56($sp)            # 8-byte Folded Reload
	ld	$20, 64($sp)            # 8-byte Folded Reload
	ld	$gp, 72($sp)            # 8-byte Folded Reload
	ld	$fp, 80($sp)            # 8-byte Folded Reload
	ld	$ra, 88($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 96
	.set	at
	.set	macro
	.set	reorder
	.end	quicksort
$tmp191:
	.size	quicksort, ($tmp191)-quicksort

	.globl	sumArray
	.align	3
	.type	sumArray,@function
	.set	nomips16                # @sumArray
	.ent	sumArray
sumArray:
	.frame	$fp,32,$ra
	.mask 	0x00000000,0
	.fmask	0x40000000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -32
	sd	$fp, 24($sp)            # 8-byte Folded Spill
	move	$fp, $sp
	slti	$1, $4, 1
	bne	$1, $zero, $BB48_3
	addiu	$2, $zero, 0
# BB#1:
	addiu	$3, $zero, 1
$BB48_2:                                # %for.body
                                        # =>This Inner Loop Header: Depth=1
	addiu	$1, $3, -1
	sll	$1, $1, 0
	cincbase	$c2, $c1, $1
	clb	$1, $zero, 0($c2)
	addu	$2, $1, $2
	sll	$1, $3, 0
	slt	$1, $1, $4
	bne	$1, $zero, $BB48_2
	addiu	$3, $3, 1
$BB48_3:                                # %for.end
	move	$sp, $fp
	ld	$fp, 24($sp)            # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	sumArray
$tmp195:
	.size	sumArray, ($tmp195)-sumArray

	.globl	doQuicksort
	.align	3
	.type	doQuicksort,@function
	.set	nomips16                # @doQuicksort
	.ent	doQuicksort
doQuicksort:
	.frame	$fp,224,$ra
	.mask 	0x00000000,0
	.fmask	0xd0ff0000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -224
	sd	$ra, 216($sp)           # 8-byte Folded Spill
	sd	$fp, 208($sp)           # 8-byte Folded Spill
	sd	$gp, 200($sp)           # 8-byte Folded Spill
	sd	$23, 192($sp)           # 8-byte Folded Spill
	sd	$22, 184($sp)           # 8-byte Folded Spill
	sd	$21, 176($sp)           # 8-byte Folded Spill
	sd	$20, 168($sp)           # 8-byte Folded Spill
	sd	$19, 160($sp)           # 8-byte Folded Spill
	sd	$18, 152($sp)           # 8-byte Folded Spill
	sd	$17, 144($sp)           # 8-byte Folded Spill
	sd	$16, 136($sp)           # 8-byte Folded Spill
	csc	$c16, $sp, 96($c0)      # 32-byte Folded Spill
	move	$fp, $sp
	lui	$1, %hi(%neg(%gp_rel(doQuicksort)))
	daddu	$2, $1, $25
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$3, $1, 24
	j	$BB49_2
	daddiu	$4, $3, 4
$BB49_1:                                # %while.body.i.i
                                        #   in Loop: Header=BB49_2 Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB49_2:                                # %while.body.i.i
                                        # =>This Inner Loop Header: Depth=1
	lw	$1, 0($4)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_1
	nop
# BB#3:                                 # %writeUARTChar.exit.i
	addiu	$18, $zero, 97
	sb	$18, 0($3)
	lw	$1, 0($4)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB49_6
	nop
# BB#4:
	daddiu	$1, $zero, 9
	dsll	$1, $1, 36
	daddiu	$1, $1, 127
	dsll	$1, $1, 24
	daddiu	$3, $1, 4
$BB49_5:                                # %while.body.i.i.1
                                        # =>This Inner Loop Header: Depth=1
	#APP
	add $v0, $v0, $0
	#NO_APP
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_5
	nop
$BB49_6:                                # %writeUARTChar.exit.i.1
	daddiu	$3, $2, %lo(%neg(%gp_rel(doQuicksort)))
	sd	$3, 88($fp)             # 8-byte Folded Spill
	daddiu	$1, $zero, 9
	dsll	$22, $1, 36
	daddiu	$1, $22, 127
	dsll	$2, $1, 24
	sd	$2, 56($fp)             # 8-byte Folded Spill
	addiu	$1, $zero, 49
	sb	$1, 0($2)
	addiu	$20, $zero, 100
	daddiu	$5, $zero, 100
	daddiu	$1, $zero, 19
	dsll	$2, $1, 31
	sd	$2, 48($fp)             # 8-byte Folded Spill
	daddiu	$2, $2, 3
	dsll	$2, $2, 28
	sd	$2, 40($fp)             # 8-byte Folded Spill
	ld	$4, %got_disp(heap)($3)
	sd	$4, 32($fp)             # 8-byte Folded Spill
	dsll	$1, $1, 35
	sd	$1, 24($fp)             # 8-byte Folded Spill
	daddiu	$1, $1, 1
	dsll	$1, $1, 24
	sd	$1, 16($fp)             # 8-byte Folded Spill
	ld	$1, %call16(quicksort)($3)
	sd	$1, 72($fp)             # 8-byte Folded Spill
	ld	$1, %call16(writeDigit)($3)
	sd	$1, 64($fp)             # 8-byte Folded Spill
	daddiu	$1, $zero, 5
	dsll	$1, $1, 61
	sd	$1, 8($fp)              # 8-byte Folded Spill
	lui	$1, 15
	ori	$1, $1, 16960
	sw	$1, 4($fp)              # 4-byte Folded Spill
$BB49_7:                                # %for.cond2.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_9 Depth 2
                                        #     Child Loop BB49_12 Depth 2
                                        #     Child Loop BB49_16 Depth 2
                                        #     Child Loop BB49_18 Depth 2
                                        #     Child Loop BB49_23 Depth 2
                                        #     Child Loop BB49_26 Depth 2
                                        #     Child Loop BB49_31 Depth 2
                                        #     Child Loop BB49_33 Depth 2
                                        #     Child Loop BB49_37 Depth 2
                                        #     Child Loop BB49_40 Depth 2
                                        #     Child Loop BB49_43 Depth 2
                                        #     Child Loop BB49_46 Depth 2
                                        #     Child Loop BB49_49 Depth 2
                                        #     Child Loop BB49_51 Depth 2
                                        #     Child Loop BB49_54 Depth 2
                                        #     Child Loop BB49_57 Depth 2
                                        #     Child Loop BB49_60 Depth 2
                                        #     Child Loop BB49_62 Depth 2
                                        #     Child Loop BB49_65 Depth 2
                                        #     Child Loop BB49_68 Depth 2
                                        #     Child Loop BB49_71 Depth 2
                                        #     Child Loop BB49_74 Depth 2
                                        #     Child Loop BB49_76 Depth 2
                                        #       Child Loop BB49_78 Depth 3
                                        #     Child Loop BB49_82 Depth 2
                                        #     Child Loop BB49_85 Depth 2
                                        #     Child Loop BB49_88 Depth 2
                                        #     Child Loop BB49_91 Depth 2
                                        #     Child Loop BB49_94 Depth 2
                                        #     Child Loop BB49_97 Depth 2
                                        #     Child Loop BB49_100 Depth 2
                                        #     Child Loop BB49_103 Depth 2
                                        #     Child Loop BB49_106 Depth 2
                                        #     Child Loop BB49_109 Depth 2
                                        #     Child Loop BB49_111 Depth 2
                                        #     Child Loop BB49_114 Depth 2
                                        #     Child Loop BB49_117 Depth 2
                                        #     Child Loop BB49_120 Depth 2
                                        #     Child Loop BB49_123 Depth 2
                                        #     Child Loop BB49_125 Depth 2
                                        #     Child Loop BB49_128 Depth 2
	j	$BB49_9
	ld	$1, 56($fp)
$BB49_8:                                # %while.body.i.i40
                                        #   in Loop: Header=BB49_9 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $22, 127
	dsll	$1, $1, 24
$BB49_9:                                # %while.body.i.i40
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	daddiu	$1, $1, 4
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_8
	nop
# BB#10:                                # %writeUARTChar.exit.i43
                                        #   in Loop: Header=BB49_7 Depth=1
	daddiu	$1, $22, 127
	dsll	$2, $1, 24
	sb	$18, 0($2)
	j	$BB49_12
	daddiu	$3, $2, 4
$BB49_11:                               # %while.body.i.i40.1
                                        #   in Loop: Header=BB49_12 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB49_12:                               # %while.body.i.i40.1
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_11
	nop
# BB#13:                                # %writeUARTChar.exit.i43.1
                                        #   in Loop: Header=BB49_7 Depth=1
	addiu	$1, $zero, 51
	sb	$1, 0($2)
	ld	$2, 0($4)
	ld	$1, 40($fp)             # 8-byte Folded Reload
	sltu	$1, $2, $1
	beq	$1, $zero, $BB49_15
	ld	$3, 16($fp)
# BB#14:                                # %if.then.i.i
                                        #   in Loop: Header=BB49_7 Depth=1
	daddu	$3, $2, $5
$BB49_15:                               # %malloc.exit.i
                                        #   in Loop: Header=BB49_7 Depth=1
	sd	$5, 80($fp)             # 8-byte Folded Spill
	daddiu	$1, $zero, -16
	and	$1, $2, $1
	cincbase	$c16, $c0, $1
	sd	$3, 0($4)
	move	$17, $4
	slti	$21, $20, 1
	addiu	$2, $zero, 0
	bne	$21, $zero, $BB49_17
	addiu	$3, $zero, 0
$BB49_16:                               # %for.body.i
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	sll	$1, $2, 0
	cincbase	$c1, $c16, $1
	csb	$3, $zero, 0($c1)
	addiu	$2, $2, 1
	bne	$20, $2, $BB49_16
	addiu	$3, $3, -1
$BB49_17:                               # %randomArray.exit
                                        #   in Loop: Header=BB49_7 Depth=1
	addiu	$19, $20, -1
	#APP
	mfc0 $16, $9
	#NO_APP
	addiu	$23, $zero, 0
	ld	$25, 72($fp)            # 8-byte Folded Reload
	cincbase	$c1, $c16, $zero
	addiu	$4, $zero, 0
	move	$5, $19
	jalr	$25
	ld	$gp, 88($fp)
	bne	$21, $zero, $BB49_19
	addiu	$2, $zero, 0
$BB49_18:                               # %for.body.i62
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	sll	$1, $2, 0
	cincbase	$c1, $c16, $1
	clb	$1, $zero, 0($c1)
	addiu	$2, $2, 1
	bne	$20, $2, $BB49_18
	addu	$23, $1, $23
$BB49_19:                               # %sumArray.exit
                                        #   in Loop: Header=BB49_7 Depth=1
	#APP
	mfc0 $2, $9
	#NO_APP
	sltu	$1, $16, $2
	daddiu	$5, $zero, 0
	beq	$1, $zero, $BB49_21
	move	$4, $17
# BB#20:                                # %if.then
                                        #   in Loop: Header=BB49_7 Depth=1
	sll	$1, $16, 0
	sll	$2, $2, 0
	dsubu	$5, $2, $1
$BB49_21:                               # %if.end
                                        #   in Loop: Header=BB49_7 Depth=1
	daddiu	$1, $22, 127
	dsll	$2, $1, 24
	j	$BB49_23
	daddiu	$3, $2, 4
$BB49_22:                               # %while.body.i.i40.1117
                                        #   in Loop: Header=BB49_23 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB49_23:                               # %while.body.i.i40.1117
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_22
	nop
# BB#24:                                # %writeUARTChar.exit.i43.1119
                                        #   in Loop: Header=BB49_7 Depth=1
	sb	$18, 0($2)
	lw	$1, 0($3)
	j	$BB49_26
	nop
$BB49_25:                               # %while.body.i.i40.1.1
                                        #   in Loop: Header=BB49_26 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $22, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB49_26:                               # %while.body.i.i40.1.1
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_25
	nop
# BB#27:                                # %writeUARTChar.exit.i43.1.1
                                        #   in Loop: Header=BB49_7 Depth=1
	daddiu	$1, $22, 127
	dsll	$1, $1, 24
	addiu	$2, $zero, 51
	sb	$2, 0($1)
	ld	$1, 48($fp)             # 8-byte Folded Reload
	daddiu	$1, $1, 3
	dsll	$1, $1, 28
	daddiu	$1, $1, -1
	ld	$2, 0($4)
	sltu	$1, $1, $2
	bne	$1, $zero, $BB49_29
	nop
# BB#28:                                # %if.then.i.i.1
                                        #   in Loop: Header=BB49_7 Depth=1
	ld	$1, 80($fp)             # 8-byte Folded Reload
	j	$BB49_30
	daddu	$3, $2, $1
$BB49_29:                               #   in Loop: Header=BB49_7 Depth=1
	ld	$1, 24($fp)             # 8-byte Folded Reload
	daddiu	$1, $1, 1
	dsll	$3, $1, 24
$BB49_30:                               # %malloc.exit.i.1
                                        #   in Loop: Header=BB49_7 Depth=1
	move	$18, $5
	daddiu	$1, $zero, -16
	and	$1, $2, $1
	cincbase	$c16, $c0, $1
	sd	$3, 0($4)
	addiu	$2, $zero, 0
	bne	$21, $zero, $BB49_32
	addiu	$3, $zero, 0
$BB49_31:                               # %for.body.i.1
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	sll	$1, $2, 0
	cincbase	$c1, $c16, $1
	csb	$3, $zero, 0($c1)
	addiu	$2, $2, 1
	bne	$20, $2, $BB49_31
	addiu	$3, $3, -1
$BB49_32:                               # %randomArray.exit.1
                                        #   in Loop: Header=BB49_7 Depth=1
	#APP
	mfc0 $17, $9
	#NO_APP
	addiu	$16, $zero, 0
	ld	$25, 72($fp)            # 8-byte Folded Reload
	cincbase	$c1, $c16, $zero
	addiu	$4, $zero, 0
	move	$5, $19
	jalr	$25
	ld	$gp, 88($fp)
	bne	$21, $zero, $BB49_34
	addiu	$2, $zero, 0
$BB49_33:                               # %for.body.i62.1
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	sll	$1, $2, 0
	cincbase	$c1, $c16, $1
	clb	$1, $zero, 0($c1)
	addiu	$2, $2, 1
	bne	$20, $2, $BB49_33
	addu	$16, $1, $16
$BB49_34:                               # %sumArray.exit.1
                                        #   in Loop: Header=BB49_7 Depth=1
	#APP
	mfc0 $2, $9
	#NO_APP
	sltu	$1, $17, $2
	addiu	$19, $zero, 32
	beq	$1, $zero, $BB49_36
	move	$5, $18
# BB#35:                                # %if.then.1
                                        #   in Loop: Header=BB49_7 Depth=1
	sll	$1, $17, 0
	dsubu	$1, $5, $1
	sll	$2, $2, 0
	daddu	$5, $1, $2
$BB49_36:                               # %if.end.1
                                        #   in Loop: Header=BB49_7 Depth=1
	daddiu	$1, $22, 127
	dsll	$2, $1, 24
	daddiu	$3, $2, 4
	lw	$1, 0($3)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB49_38
	addiu	$18, $zero, 58
$BB49_37:                               # %while.body.i.i80
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_37
	nop
$BB49_38:                               # %writeUARTChar.exit.i83
                                        #   in Loop: Header=BB49_7 Depth=1
	sb	$19, 0($2)
	lw	$1, 0($3)
	j	$BB49_40
	nop
$BB49_39:                               # %while.body.i.i80.1
                                        #   in Loop: Header=BB49_40 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $22, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB49_40:                               # %while.body.i.i80.1
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_39
	nop
# BB#41:                                # %writeUARTChar.exit.i83.1
                                        #   in Loop: Header=BB49_7 Depth=1
	daddiu	$1, $22, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 115
	sb	$1, 0($2)
	j	$BB49_43
	daddiu	$3, $2, 4
$BB49_42:                               # %while.body.i.i80.2
                                        #   in Loop: Header=BB49_43 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB49_43:                               # %while.body.i.i80.2
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_42
	nop
# BB#44:                                # %writeUARTChar.exit.i83.2
                                        #   in Loop: Header=BB49_7 Depth=1
	addiu	$1, $zero, 105
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB49_46
	nop
$BB49_45:                               # %while.body.i.i80.3
                                        #   in Loop: Header=BB49_46 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $22, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB49_46:                               # %while.body.i.i80.3
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_45
	nop
# BB#47:                                # %writeUARTChar.exit.i83.3
                                        #   in Loop: Header=BB49_7 Depth=1
	daddiu	$1, $22, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 122
	sb	$1, 0($2)
	j	$BB49_49
	daddiu	$3, $2, 4
$BB49_48:                               # %while.body.i.i80.4
                                        #   in Loop: Header=BB49_49 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB49_49:                               # %while.body.i.i80.4
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_48
	nop
# BB#50:                                # %writeUARTChar.exit.i83.4
                                        #   in Loop: Header=BB49_7 Depth=1
	addiu	$1, $zero, 101
	sb	$1, 0($2)
	lw	$1, 0($3)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB49_52
	ld	$4, 80($fp)
$BB49_51:                               # %while.body.i.i80.5
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $22, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_51
	nop
$BB49_52:                               # %writeUARTChar.exit.i83.5
                                        #   in Loop: Header=BB49_7 Depth=1
	move	$21, $5
	daddiu	$1, $22, 127
	dsll	$2, $1, 24
	sb	$18, 0($2)
	j	$BB49_54
	daddiu	$17, $2, 4
$BB49_53:                               # %while.body.i.i80.6
                                        #   in Loop: Header=BB49_54 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB49_54:                               # %while.body.i.i80.6
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($17)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_53
	nop
# BB#55:                                # %writeUARTChar.exit.i83.6
                                        #   in Loop: Header=BB49_7 Depth=1
	sb	$19, 0($2)
	ld	$25, 64($fp)            # 8-byte Folded Reload
	jalr	$25
	ld	$gp, 88($fp)
	lw	$1, 0($17)
	j	$BB49_57
	nop
$BB49_56:                               # %while.body.i.i91
                                        #   in Loop: Header=BB49_57 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $22, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB49_57:                               # %while.body.i.i91
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_56
	nop
# BB#58:                                # %writeUARTChar.exit.i94
                                        #   in Loop: Header=BB49_7 Depth=1
	daddiu	$1, $22, 127
	dsll	$2, $1, 24
	sb	$19, 0($2)
	j	$BB49_60
	daddiu	$3, $2, 4
$BB49_59:                               # %while.body.i.i91.1
                                        #   in Loop: Header=BB49_60 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB49_60:                               # %while.body.i.i91.1
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_59
	nop
# BB#61:                                # %writeUARTChar.exit.i94.1
                                        #   in Loop: Header=BB49_7 Depth=1
	sb	$19, 0($2)
	lw	$1, 0($3)
	andi	$1, $1, 65535
	ld	$7, 8($fp)              # 8-byte Folded Reload
	bne	$1, $zero, $BB49_63
	addiu	$8, $zero, 16
$BB49_62:                               # %while.body.i.i91.2
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $22, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_62
	nop
$BB49_63:                               # %writeUARTChar.exit.i94.2
                                        #   in Loop: Header=BB49_7 Depth=1
	daddiu	$1, $22, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 115
	sb	$1, 0($2)
	j	$BB49_65
	daddiu	$3, $2, 4
$BB49_64:                               # %while.body.i.i91.3
                                        #   in Loop: Header=BB49_65 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB49_65:                               # %while.body.i.i91.3
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_64
	nop
# BB#66:                                # %writeUARTChar.exit.i94.3
                                        #   in Loop: Header=BB49_7 Depth=1
	addiu	$1, $zero, 117
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB49_68
	nop
$BB49_67:                               # %while.body.i.i91.4
                                        #   in Loop: Header=BB49_68 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $22, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB49_68:                               # %while.body.i.i91.4
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_67
	nop
# BB#69:                                # %writeUARTChar.exit.i94.4
                                        #   in Loop: Header=BB49_7 Depth=1
	daddiu	$1, $22, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 109
	sb	$1, 0($2)
	j	$BB49_71
	daddiu	$3, $2, 4
$BB49_70:                               # %while.body.i.i91.5
                                        #   in Loop: Header=BB49_71 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB49_71:                               # %while.body.i.i91.5
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_70
	nop
# BB#72:                                # %writeUARTChar.exit.i94.5
                                        #   in Loop: Header=BB49_7 Depth=1
	sb	$18, 0($2)
	lw	$1, 0($3)
	j	$BB49_74
	nop
$BB49_73:                               # %while.body.i.i91.6
                                        #   in Loop: Header=BB49_74 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $22, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB49_74:                               # %while.body.i.i91.6
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_73
	nop
# BB#75:                                # %writeUARTChar.exit.i94.6
                                        #   in Loop: Header=BB49_7 Depth=1
	addu	$1, $16, $23
	daddiu	$2, $22, 127
	dsll	$2, $2, 24
	sb	$19, 0($2)
	sll	$3, $1, 0
	addiu	$4, $zero, 0
$BB49_76:                               # %for.body.i99
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_78 Depth 3
	j	$BB49_78
	daddiu	$1, $2, 4
$BB49_77:                               # %while.body.i.i102
                                        #   in Loop: Header=BB49_78 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $22, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB49_78:                               # %while.body.i.i102
                                        #   Parent Loop BB49_7 Depth=1
                                        #     Parent Loop BB49_76 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_77
	nop
# BB#79:                                # %writeUARTChar.exit.i105
                                        #   in Loop: Header=BB49_76 Depth=2
	sltu	$1, $3, $7
	dsrl	$6, $3, 60
	daddiu	$5, $6, 55
	ori	$6, $6, 48
	movn	$5, $6, $1
	sll	$1, $5, 0
	daddiu	$5, $22, 127
	dsll	$5, $5, 24
	sb	$1, 0($5)
	addiu	$4, $4, 1
	bne	$4, $8, $BB49_76
	dsll	$3, $3, 4
# BB#80:                                # %while.body.i66.loopexit
                                        #   in Loop: Header=BB49_7 Depth=1
	j	$BB49_82
	daddiu	$1, $5, 4
$BB49_81:                               # %while.body.i.i69
                                        #   in Loop: Header=BB49_82 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $22, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB49_82:                               # %while.body.i.i69
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_81
	nop
# BB#83:                                # %writeUARTChar.exit.i72
                                        #   in Loop: Header=BB49_7 Depth=1
	daddiu	$1, $22, 127
	dsll	$2, $1, 24
	sb	$19, 0($2)
	j	$BB49_85
	daddiu	$3, $2, 4
$BB49_84:                               # %while.body.i.i69.1
                                        #   in Loop: Header=BB49_85 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB49_85:                               # %while.body.i.i69.1
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_84
	nop
# BB#86:                                # %writeUARTChar.exit.i72.1
                                        #   in Loop: Header=BB49_7 Depth=1
	sb	$19, 0($2)
	lw	$1, 0($3)
	j	$BB49_88
	nop
$BB49_87:                               # %while.body.i.i69.2
                                        #   in Loop: Header=BB49_88 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $22, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB49_88:                               # %while.body.i.i69.2
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_87
	nop
# BB#89:                                # %writeUARTChar.exit.i72.2
                                        #   in Loop: Header=BB49_7 Depth=1
	daddiu	$1, $22, 127
	dsll	$2, $1, 24
	sb	$19, 0($2)
	j	$BB49_91
	daddiu	$3, $2, 4
$BB49_90:                               # %while.body.i.i69.3
                                        #   in Loop: Header=BB49_91 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB49_91:                               # %while.body.i.i69.3
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_90
	nop
# BB#92:                                # %writeUARTChar.exit.i72.3
                                        #   in Loop: Header=BB49_7 Depth=1
	addiu	$1, $zero, 116
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB49_94
	nop
$BB49_93:                               # %while.body.i.i69.4
                                        #   in Loop: Header=BB49_94 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $22, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB49_94:                               # %while.body.i.i69.4
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_93
	nop
# BB#95:                                # %writeUARTChar.exit.i72.4
                                        #   in Loop: Header=BB49_7 Depth=1
	daddiu	$1, $22, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 105
	sb	$1, 0($2)
	j	$BB49_97
	daddiu	$3, $2, 4
$BB49_96:                               # %while.body.i.i69.5
                                        #   in Loop: Header=BB49_97 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB49_97:                               # %while.body.i.i69.5
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_96
	nop
# BB#98:                                # %writeUARTChar.exit.i72.5
                                        #   in Loop: Header=BB49_7 Depth=1
	addiu	$1, $zero, 109
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB49_100
	nop
$BB49_99:                               # %while.body.i.i69.6
                                        #   in Loop: Header=BB49_100 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $22, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB49_100:                              # %while.body.i.i69.6
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_99
	nop
# BB#101:                               # %writeUARTChar.exit.i72.6
                                        #   in Loop: Header=BB49_7 Depth=1
	daddiu	$1, $22, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 101
	sb	$1, 0($2)
	j	$BB49_103
	daddiu	$3, $2, 4
$BB49_102:                              # %while.body.i.i69.7
                                        #   in Loop: Header=BB49_103 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB49_103:                              # %while.body.i.i69.7
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_102
	nop
# BB#104:                               # %writeUARTChar.exit.i72.7
                                        #   in Loop: Header=BB49_7 Depth=1
	sb	$18, 0($2)
	lw	$1, 0($3)
	j	$BB49_106
	nop
$BB49_105:                              # %while.body.i.i69.8
                                        #   in Loop: Header=BB49_106 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $22, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB49_106:                              # %while.body.i.i69.8
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_105
	nop
# BB#107:                               # %writeUARTChar.exit.i72.8
                                        #   in Loop: Header=BB49_7 Depth=1
	daddiu	$1, $22, 127
	dsll	$16, $1, 24
	sb	$19, 0($16)
	dsrl	$4, $21, 1
	ld	$25, 64($fp)            # 8-byte Folded Reload
	jalr	$25
	ld	$gp, 88($fp)
	j	$BB49_109
	daddiu	$2, $16, 4
$BB49_108:                              # %while.body.i.i53
                                        #   in Loop: Header=BB49_109 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB49_109:                              # %while.body.i.i53
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($2)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_108
	nop
# BB#110:                               # %writeUARTChar.exit.i56
                                        #   in Loop: Header=BB49_7 Depth=1
	sb	$19, 0($16)
	lw	$1, 0($2)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB49_112
	addiu	$4, $zero, 99
$BB49_111:                              # %while.body.i.i53.1
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $22, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_111
	nop
$BB49_112:                              # %writeUARTChar.exit.i56.1
                                        #   in Loop: Header=BB49_7 Depth=1
	daddiu	$1, $22, 127
	dsll	$2, $1, 24
	sb	$4, 0($2)
	j	$BB49_114
	daddiu	$3, $2, 4
$BB49_113:                              # %while.body.i.i53.2
                                        #   in Loop: Header=BB49_114 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB49_114:                              # %while.body.i.i53.2
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_113
	nop
# BB#115:                               # %writeUARTChar.exit.i56.2
                                        #   in Loop: Header=BB49_7 Depth=1
	addiu	$1, $zero, 121
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB49_117
	nop
$BB49_116:                              # %while.body.i.i53.3
                                        #   in Loop: Header=BB49_117 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $22, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB49_117:                              # %while.body.i.i53.3
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_116
	nop
# BB#118:                               # %writeUARTChar.exit.i56.3
                                        #   in Loop: Header=BB49_7 Depth=1
	daddiu	$1, $22, 127
	dsll	$2, $1, 24
	sb	$4, 0($2)
	j	$BB49_120
	daddiu	$3, $2, 4
$BB49_119:                              # %while.body.i.i53.4
                                        #   in Loop: Header=BB49_120 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB49_120:                              # %while.body.i.i53.4
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_119
	nop
# BB#121:                               # %writeUARTChar.exit.i56.4
                                        #   in Loop: Header=BB49_7 Depth=1
	addiu	$1, $zero, 108
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB49_123
	nop
$BB49_122:                              # %while.body.i.i53.5
                                        #   in Loop: Header=BB49_123 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $22, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB49_123:                              # %while.body.i.i53.5
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_122
	nop
# BB#124:                               # %writeUARTChar.exit.i56.5
                                        #   in Loop: Header=BB49_7 Depth=1
	daddiu	$1, $22, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 101
	sb	$1, 0($2)
	daddiu	$3, $2, 4
	lw	$1, 0($3)
	andi	$1, $1, 65535
	addiu	$18, $zero, 97
	bne	$1, $zero, $BB49_126
	ld	$4, 32($fp)
$BB49_125:                              # %while.body.i.i53.6
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_125
	nop
$BB49_126:                              # %writeUARTChar.exit.i56.6
                                        #   in Loop: Header=BB49_7 Depth=1
	addiu	$1, $zero, 115
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB49_128
	nop
$BB49_127:                              # %while.body.i.i53.7
                                        #   in Loop: Header=BB49_128 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $22, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB49_128:                              # %while.body.i.i53.7
                                        #   Parent Loop BB49_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB49_127
	nop
# BB#129:                               # %writeUARTChar.exit.i56.7
                                        #   in Loop: Header=BB49_7 Depth=1
	daddiu	$1, $22, 127
	dsll	$1, $1, 24
	addiu	$2, $zero, 10
	sb	$2, 0($1)
	sll	$20, $20, 1
	lw	$1, 4($fp)              # 4-byte Folded Reload
	slt	$1, $20, $1
	bne	$1, $zero, $BB49_7
	sll	$5, $20, 0
# BB#130:                               # %for.end20
	addiu	$2, $zero, 0
	move	$sp, $fp
	clc	$c16, $sp, 96($c0)      # 32-byte Folded Reload
	ld	$16, 136($sp)           # 8-byte Folded Reload
	ld	$17, 144($sp)           # 8-byte Folded Reload
	ld	$18, 152($sp)           # 8-byte Folded Reload
	ld	$19, 160($sp)           # 8-byte Folded Reload
	ld	$20, 168($sp)           # 8-byte Folded Reload
	ld	$21, 176($sp)           # 8-byte Folded Reload
	ld	$22, 184($sp)           # 8-byte Folded Reload
	ld	$23, 192($sp)           # 8-byte Folded Reload
	ld	$gp, 200($sp)           # 8-byte Folded Reload
	ld	$fp, 208($sp)           # 8-byte Folded Reload
	ld	$ra, 216($sp)           # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 224
	.set	at
	.set	macro
	.set	reorder
	.end	doQuicksort
$tmp199:
	.size	doQuicksort, ($tmp199)-doQuicksort

	.globl	main
	.align	3
	.type	main,@function
	.set	nomips16                # @main
	.ent	main
main:
	.frame	$fp,192,$ra
	.mask 	0x00000000,0
	.fmask	0xd0ff0000,-4
	.set	noreorder
	.set	nomacro
	.set	noat
# BB#0:                                 # %entry
	daddiu	$sp, $sp, -192
	sd	$ra, 184($sp)           # 8-byte Folded Spill
	sd	$fp, 176($sp)           # 8-byte Folded Spill
	sd	$gp, 168($sp)           # 8-byte Folded Spill
	sd	$23, 160($sp)           # 8-byte Folded Spill
	sd	$22, 152($sp)           # 8-byte Folded Spill
	sd	$21, 144($sp)           # 8-byte Folded Spill
	sd	$20, 136($sp)           # 8-byte Folded Spill
	sd	$19, 128($sp)           # 8-byte Folded Spill
	sd	$18, 120($sp)           # 8-byte Folded Spill
	sd	$17, 112($sp)           # 8-byte Folded Spill
	sd	$16, 104($sp)           # 8-byte Folded Spill
	move	$fp, $sp
	lui	$1, %hi(%neg(%gp_rel(main)))
	daddu	$1, $1, $25
	daddiu	$12, $1, %lo(%neg(%gp_rel(main)))
	ld	$1, %got_page($.str12)($12)
	daddiu	$2, $1, %got_ofst($.str12)
	addiu	$4, $zero, 85
	daddiu	$1, $zero, 9
	dsll	$3, $1, 36
	daddiu	$1, $3, 127
	dsll	$1, $1, 24
	daddiu	$6, $1, 4
	ld	$5, %got_page($.str13)($12)
$BB50_1:                                # %while.body.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_3 Depth 2
	lw	$1, 0($6)
	j	$BB50_3
	nop
$BB50_2:                                # %while.body.i.i
                                        #   in Loop: Header=BB50_3 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $3, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB50_3:                                # %while.body.i.i
                                        #   Parent Loop BB50_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_2
	nop
# BB#4:                                 # %writeUARTChar.exit.i
                                        #   in Loop: Header=BB50_1 Depth=1
	daddiu	$1, $3, 127
	dsll	$1, $1, 24
	sb	$4, 0($1)
	daddiu	$1, $2, 1
	lbu	$4, 1($2)
	bne	$4, $zero, $BB50_1
	move	$2, $1
# BB#5:
	daddiu	$2, $5, %got_ofst($.str13)
	addiu	$4, $zero, 32
	daddiu	$1, $zero, 9
	dsll	$3, $1, 36
	daddiu	$1, $3, 127
	dsll	$1, $1, 24
	daddiu	$5, $1, 4
$BB50_6:                                # %while.body.i287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_8 Depth 2
	lw	$1, 0($5)
	j	$BB50_8
	nop
$BB50_7:                                # %while.body.i.i290
                                        #   in Loop: Header=BB50_8 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $3, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB50_8:                                # %while.body.i.i290
                                        #   Parent Loop BB50_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_7
	nop
# BB#9:                                 # %writeUARTChar.exit.i293
                                        #   in Loop: Header=BB50_6 Depth=1
	daddiu	$1, $3, 127
	dsll	$1, $1, 24
	sb	$4, 0($1)
	daddiu	$1, $2, 1
	lbu	$4, 1($2)
	bne	$4, $zero, $BB50_6
	move	$2, $1
# BB#10:
	addiu	$1, $zero, 1
	sw	$1, 84($fp)             # 4-byte Folded Spill
	addiu	$1, $zero, 0
	sw	$1, 96($fp)             # 4-byte Folded Spill
	daddiu	$1, $zero, 9
	dsll	$19, $1, 36
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	sd	$1, 88($fp)             # 8-byte Folded Spill
	ld	$1, %got_page($.str26)($12)
	sd	$1, 72($fp)             # 8-byte Folded Spill
	ld	$1, %got_page($.str32)($12)
	sd	$1, 64($fp)             # 8-byte Folded Spill
	daddiu	$1, $zero, 5
	dsll	$23, $1, 61
	addiu	$20, $zero, 16
	addiu	$22, $zero, 32
	addiu	$18, $zero, 61
	lui	$1, 5
	ori	$1, $1, 35200
	sw	$1, 56($fp)             # 4-byte Folded Spill
	lui	$1, 32512
	daddiu	$1, $1, 12288
	sd	$1, 48($fp)             # 8-byte Folded Spill
	addiu	$21, $zero, 48
	lui	$1, 1
	ori	$1, $1, 54464
	sw	$1, 44($fp)             # 4-byte Folded Spill
	lui	$1, 6
	ori	$1, $1, 27284
	sw	$1, 40($fp)             # 4-byte Folded Spill
	lui	$1, 7
	ori	$1, $1, 21248
	sw	$1, 36($fp)             # 4-byte Folded Spill
	addiu	$1, $zero, 0
	sw	$1, 32($fp)             # 4-byte Folded Spill
                                        # implicit-def: S1
	j	$BB50_12
	addiu	$16, $zero, 0
$BB50_11:                               # %if.then211
                                        #   in Loop: Header=BB50_12 Depth=1
	ld	$25, %call16(doQuicksort)($12)
	move	$gp, $12
	jalr	$25
	move	$16, $12
	move	$12, $16
	addiu	$16, $zero, 113
$BB50_12:                               # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_287 Depth 2
                                        #     Child Loop BB50_290 Depth 2
                                        #     Child Loop BB50_293 Depth 2
                                        #     Child Loop BB50_296 Depth 2
                                        #     Child Loop BB50_299 Depth 2
                                        #     Child Loop BB50_302 Depth 2
                                        #     Child Loop BB50_305 Depth 2
                                        #     Child Loop BB50_307 Depth 2
                                        #     Child Loop BB50_309 Depth 2
                                        #       Child Loop BB50_311 Depth 3
                                        #     Child Loop BB50_314 Depth 2
                                        #       Child Loop BB50_316 Depth 3
                                        #     Child Loop BB50_319 Depth 2
                                        #       Child Loop BB50_321 Depth 3
                                        #     Child Loop BB50_324 Depth 2
                                        #       Child Loop BB50_326 Depth 3
                                        #     Child Loop BB50_329 Depth 2
                                        #       Child Loop BB50_331 Depth 3
                                        #     Child Loop BB50_334 Depth 2
                                        #       Child Loop BB50_336 Depth 3
                                        #     Child Loop BB50_339 Depth 2
                                        #       Child Loop BB50_341 Depth 3
                                        #     Child Loop BB50_344 Depth 2
                                        #       Child Loop BB50_346 Depth 3
                                        #     Child Loop BB50_349 Depth 2
                                        #       Child Loop BB50_351 Depth 3
                                        #     Child Loop BB50_354 Depth 2
                                        #       Child Loop BB50_356 Depth 3
                                        #     Child Loop BB50_359 Depth 2
                                        #       Child Loop BB50_361 Depth 3
                                        #     Child Loop BB50_13 Depth 2
                                        #     Child Loop BB50_16 Depth 2
                                        #     Child Loop BB50_18 Depth 2
                                        #     Child Loop BB50_123 Depth 2
                                        #     Child Loop BB50_126 Depth 2
                                        #     Child Loop BB50_128 Depth 2
                                        #       Child Loop BB50_130 Depth 3
                                        #     Child Loop BB50_134 Depth 2
                                        #     Child Loop BB50_137 Depth 2
                                        #     Child Loop BB50_140 Depth 2
                                        #     Child Loop BB50_143 Depth 2
                                        #     Child Loop BB50_146 Depth 2
                                        #     Child Loop BB50_148 Depth 2
                                        #       Child Loop BB50_150 Depth 3
                                        #     Child Loop BB50_153 Depth 2
                                        #     Child Loop BB50_156 Depth 2
                                        #     Child Loop BB50_158 Depth 2
                                        #     Child Loop BB50_161 Depth 2
                                        #     Child Loop BB50_164 Depth 2
                                        #     Child Loop BB50_167 Depth 2
                                        #     Child Loop BB50_170 Depth 2
                                        #     Child Loop BB50_173 Depth 2
                                        #     Child Loop BB50_175 Depth 2
                                        #       Child Loop BB50_177 Depth 3
                                        #     Child Loop BB50_181 Depth 2
                                        #     Child Loop BB50_22 Depth 2
                                        #       Child Loop BB50_24 Depth 3
                                        #     Child Loop BB50_27 Depth 2
                                        #       Child Loop BB50_29 Depth 3
                                        #     Child Loop BB50_32 Depth 2
                                        #       Child Loop BB50_34 Depth 3
                                        #     Child Loop BB50_38 Depth 2
                                        #       Child Loop BB50_40 Depth 3
                                        #     Child Loop BB50_43 Depth 2
                                        #       Child Loop BB50_44 Depth 3
                                        #         Child Loop BB50_46 Depth 4
                                        #       Child Loop BB50_50 Depth 3
                                        #       Child Loop BB50_53 Depth 3
                                        #       Child Loop BB50_56 Depth 3
                                        #       Child Loop BB50_58 Depth 3
                                        #         Child Loop BB50_60 Depth 4
                                        #       Child Loop BB50_64 Depth 3
                                        #       Child Loop BB50_67 Depth 3
                                        #       Child Loop BB50_70 Depth 3
                                        #       Child Loop BB50_72 Depth 3
                                        #         Child Loop BB50_74 Depth 4
                                        #       Child Loop BB50_78 Depth 3
                                        #       Child Loop BB50_80 Depth 3
                                        #         Child Loop BB50_82 Depth 4
                                        #       Child Loop BB50_86 Depth 3
                                        #       Child Loop BB50_89 Depth 3
                                        #       Child Loop BB50_92 Depth 3
                                        #       Child Loop BB50_94 Depth 3
                                        #         Child Loop BB50_96 Depth 4
                                        #       Child Loop BB50_100 Depth 3
                                        #       Child Loop BB50_103 Depth 3
                                        #       Child Loop BB50_106 Depth 3
                                        #       Child Loop BB50_108 Depth 3
                                        #         Child Loop BB50_110 Depth 4
                                        #       Child Loop BB50_114 Depth 3
                                        #       Child Loop BB50_117 Depth 3
                                        #     Child Loop BB50_188 Depth 2
                                        #       Child Loop BB50_190 Depth 3
                                        #     Child Loop BB50_193 Depth 2
                                        #       Child Loop BB50_195 Depth 3
                                        #     Child Loop BB50_216 Depth 2
                                        #     Child Loop BB50_218 Depth 2
                                        #       Child Loop BB50_220 Depth 3
                                        #     Child Loop BB50_223 Depth 2
                                        #       Child Loop BB50_225 Depth 3
                                        #     Child Loop BB50_232 Depth 2
                                        #     Child Loop BB50_198 Depth 2
                                        #       Child Loop BB50_200 Depth 3
                                        #     Child Loop BB50_202 Depth 2
                                        #       Child Loop BB50_203 Depth 3
                                        #         Child Loop BB50_205 Depth 4
                                        #       Child Loop BB50_209 Depth 3
                                        #       Child Loop BB50_212 Depth 3
                                        #     Child Loop BB50_229 Depth 2
                                        #     Child Loop BB50_258 Depth 2
                                        #       Child Loop BB50_259 Depth 3
                                        #       Child Loop BB50_260 Depth 3
                                        #       Child Loop BB50_261 Depth 3
                                        #         Child Loop BB50_262 Depth 4
                                        #       Child Loop BB50_264 Depth 3
                                        #       Child Loop BB50_265 Depth 3
                                        #       Child Loop BB50_266 Depth 3
                                        #         Child Loop BB50_267 Depth 4
                                        #       Child Loop BB50_269 Depth 3
                                        #       Child Loop BB50_270 Depth 3
                                        #       Child Loop BB50_271 Depth 3
                                        #         Child Loop BB50_272 Depth 4
                                        #     Child Loop BB50_276 Depth 2
                                        #     Child Loop BB50_278 Depth 2
                                        #     Child Loop BB50_280 Depth 2
                                        #       Child Loop BB50_281 Depth 3
                                        #     Child Loop BB50_240 Depth 2
                                        #       Child Loop BB50_242 Depth 3
                                        #     Child Loop BB50_245 Depth 2
                                        #       Child Loop BB50_247 Depth 3
                                        #     Child Loop BB50_250 Depth 2
                                        #       Child Loop BB50_252 Depth 3
	andi	$2, $16, 255
	addiu	$13, $zero, 10
	ld	$6, 88($fp)             # 8-byte Folded Reload
	bne	$2, $13, $BB50_284
	lui	$7, 128
$BB50_13:                               # %while.cond.i
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$2, 0($6)
	and	$1, $2, $7
	beq	$1, $zero, $BB50_13
	nop
# BB#14:                                # %readUARTChar.exit
                                        #   in Loop: Header=BB50_12 Depth=1
	sd	$6, 88($fp)             # 8-byte Folded Spill
	daddiu	$1, $19, 127
	dsll	$3, $1, 24
	j	$BB50_16
	daddiu	$4, $3, 4
$BB50_15:                               # %while.body.i429
                                        #   in Loop: Header=BB50_16 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_16:                               # %while.body.i429
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($4)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_15
	nop
# BB#17:                                # %writeUARTChar.exit
                                        #   in Loop: Header=BB50_12 Depth=1
	srl	$16, $2, 24
	sb	$16, 0($3)
	lw	$1, 0($4)
	andi	$1, $1, 65535
	addiu	$14, $zero, 42
	bne	$1, $zero, $BB50_19
	addiu	$15, $zero, 47
$BB50_18:                               # %while.body.i.i436
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_18
	nop
$BB50_19:                               # %writeUARTChar.exit.i439
                                        #   in Loop: Header=BB50_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 68
	beq	$16, $1, $BB50_37
	sb	$13, 0($2)
$BB50_20:                               # %writeUARTChar.exit.i439
                                        #   in Loop: Header=BB50_12 Depth=1
	addiu	$1, $zero, 76
	bne	$16, $1, $BB50_120
	nop
$BB50_21:                               #   in Loop: Header=BB50_12 Depth=1
	addiu	$2, $zero, 76
	ld	$1, 72($fp)             # 8-byte Folded Reload
	daddiu	$3, $1, %got_ofst($.str26)
	addiu	$8, $zero, 44
$BB50_22:                               # %while.body.i444
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_24 Depth 3
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB50_24
	daddiu	$5, $4, 4
$BB50_23:                               # %while.body.i.i447
                                        #   in Loop: Header=BB50_24 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_24:                               # %while.body.i.i447
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_23
	nop
# BB#25:                                # %writeUARTChar.exit.i450
                                        #   in Loop: Header=BB50_22 Depth=2
	sb	$2, 0($4)
	daddiu	$1, $3, 1
	lbu	$2, 1($3)
	bne	$2, $zero, $BB50_22
	move	$3, $1
# BB#26:                                # %writeString.exit451
                                        #   in Loop: Header=BB50_12 Depth=1
	#APP
	ll $v0, 0($a0)
	#NO_APP
	#APP
	sc $a1, 0($a0)
	#NO_APP
	#APP
	move $v0, $a1
	#NO_APP
	ld	$1, %got_page($.str27)($12)
	daddiu	$2, $1, %got_ofst($.str27)
	addiu	$3, $zero, 32
$BB50_27:                               # %while.body.i455
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_29 Depth 3
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB50_29
	daddiu	$5, $4, 4
$BB50_28:                               # %while.body.i.i458
                                        #   in Loop: Header=BB50_29 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_29:                               # %while.body.i.i458
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_28
	nop
# BB#30:                                # %writeUARTChar.exit.i461
                                        #   in Loop: Header=BB50_27 Depth=2
	sb	$3, 0($4)
	daddiu	$1, $2, 1
	lbu	$3, 1($2)
	bne	$3, $zero, $BB50_27
	move	$2, $1
# BB#31:                                # %writeString.exit462
                                        #   in Loop: Header=BB50_12 Depth=1
	#APP
	ll $v0, 0($a0)
	#NO_APP
	#APP
	sc $a1, 0($a0)
	#NO_APP
	#APP
	move $v0, $a1
	#NO_APP
	ld	$1, %got_page($.str28)($12)
	daddiu	$2, $1, %got_ofst($.str28)
	addiu	$3, $zero, 32
$BB50_32:                               # %while.body.i466
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_34 Depth 3
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB50_34
	daddiu	$5, $4, 4
$BB50_33:                               # %while.body.i.i469
                                        #   in Loop: Header=BB50_34 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_34:                               # %while.body.i.i469
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_32 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_33
	nop
# BB#35:                                # %writeUARTChar.exit.i472
                                        #   in Loop: Header=BB50_32 Depth=2
	sb	$3, 0($4)
	daddiu	$1, $2, 1
	lbu	$3, 1($2)
	bne	$3, $zero, $BB50_32
	move	$2, $1
# BB#36:                                # %writeUARTChar.exit.i472
                                        #   in Loop: Header=BB50_12 Depth=1
	j	$BB50_183
	nop
$BB50_37:                               #   in Loop: Header=BB50_12 Depth=1
	addiu	$3, $zero, 77
	ld	$1, 64($fp)             # 8-byte Folded Reload
	daddiu	$4, $1, %got_ofst($.str32)
$BB50_38:                               # %while.body.i565
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_40 Depth 3
	j	$BB50_40
	daddiu	$1, $2, 4
$BB50_39:                               # %while.body.i.i568
                                        #   in Loop: Header=BB50_40 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB50_40:                               # %while.body.i.i568
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_38 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_39
	nop
# BB#41:                                # %writeUARTChar.exit.i571
                                        #   in Loop: Header=BB50_38 Depth=2
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	sb	$3, 0($1)
	daddiu	$1, $4, 1
	lbu	$3, 1($4)
	bne	$3, $zero, $BB50_38
	move	$4, $1
# BB#42:                                #   in Loop: Header=BB50_12 Depth=1
	addiu	$2, $zero, -10
	addiu	$4, $zero, 1
$BB50_43:                               # %for.body
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_44 Depth 3
                                        #         Child Loop BB50_46 Depth 4
                                        #       Child Loop BB50_50 Depth 3
                                        #       Child Loop BB50_53 Depth 3
                                        #       Child Loop BB50_56 Depth 3
                                        #       Child Loop BB50_58 Depth 3
                                        #         Child Loop BB50_60 Depth 4
                                        #       Child Loop BB50_64 Depth 3
                                        #       Child Loop BB50_67 Depth 3
                                        #       Child Loop BB50_70 Depth 3
                                        #       Child Loop BB50_72 Depth 3
                                        #         Child Loop BB50_74 Depth 4
                                        #       Child Loop BB50_78 Depth 3
                                        #       Child Loop BB50_80 Depth 3
                                        #         Child Loop BB50_82 Depth 4
                                        #       Child Loop BB50_86 Depth 3
                                        #       Child Loop BB50_89 Depth 3
                                        #       Child Loop BB50_92 Depth 3
                                        #       Child Loop BB50_94 Depth 3
                                        #         Child Loop BB50_96 Depth 4
                                        #       Child Loop BB50_100 Depth 3
                                        #       Child Loop BB50_103 Depth 3
                                        #       Child Loop BB50_106 Depth 3
                                        #       Child Loop BB50_108 Depth 3
                                        #         Child Loop BB50_110 Depth 4
                                        #       Child Loop BB50_114 Depth 3
                                        #       Child Loop BB50_117 Depth 3
	move	$3, $17
	move	$17, $4
	sll	$4, $17, 0
	addiu	$5, $zero, 0
$BB50_44:                               # %for.body.i583
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_46 Depth 4
	daddiu	$1, $19, 127
	dsll	$6, $1, 24
	j	$BB50_46
	daddiu	$7, $6, 4
$BB50_45:                               # %while.body.i.i586
                                        #   in Loop: Header=BB50_46 Depth=4
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_46:                               # %while.body.i.i586
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        #       Parent Loop BB50_44 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	lw	$1, 0($7)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_45
	nop
# BB#47:                                # %writeUARTChar.exit.i590
                                        #   in Loop: Header=BB50_44 Depth=3
	sltu	$1, $4, $23
	dsrl	$8, $4, 60
	daddiu	$7, $8, 55
	ori	$8, $8, 48
	movn	$7, $8, $1
	sll	$1, $7, 0
	sb	$1, 0($6)
	addiu	$5, $5, 1
	bne	$5, $20, $BB50_44
	dsll	$4, $4, 4
# BB#48:                                # %while.body.i595.loopexit
                                        #   in Loop: Header=BB50_43 Depth=2
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB50_50
	daddiu	$5, $4, 4
$BB50_49:                               # %while.body.i.i598
                                        #   in Loop: Header=BB50_50 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_50:                               # %while.body.i.i598
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_49
	nop
# BB#51:                                # %writeUARTChar.exit.i601
                                        #   in Loop: Header=BB50_43 Depth=2
	sb	$22, 0($4)
	lw	$1, 0($5)
	j	$BB50_53
	nop
$BB50_52:                               # %while.body.i.i598.1
                                        #   in Loop: Header=BB50_53 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB50_53:                               # %while.body.i.i598.1
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_52
	nop
# BB#54:                                # %writeUARTChar.exit.i601.1
                                        #   in Loop: Header=BB50_43 Depth=2
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	sb	$14, 0($4)
	j	$BB50_56
	daddiu	$5, $4, 4
$BB50_55:                               # %while.body.i.i598.2
                                        #   in Loop: Header=BB50_56 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_56:                               # %while.body.i.i598.2
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_55
	nop
# BB#57:                                # %writeUARTChar.exit.i601.2
                                        #   in Loop: Header=BB50_43 Depth=2
	sb	$22, 0($4)
	sll	$5, $2, 0
	addiu	$4, $zero, 0
	move	$6, $5
$BB50_58:                               # %for.body.i613
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_60 Depth 4
	daddiu	$1, $19, 127
	dsll	$7, $1, 24
	j	$BB50_60
	daddiu	$8, $7, 4
$BB50_59:                               # %while.body.i.i616
                                        #   in Loop: Header=BB50_60 Depth=4
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_60:                               # %while.body.i.i616
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        #       Parent Loop BB50_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	lw	$1, 0($8)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_59
	nop
# BB#61:                                # %writeUARTChar.exit.i620
                                        #   in Loop: Header=BB50_58 Depth=3
	sltu	$1, $6, $23
	dsrl	$9, $6, 60
	daddiu	$8, $9, 55
	ori	$9, $9, 48
	movn	$8, $9, $1
	sll	$1, $8, 0
	sb	$1, 0($7)
	addiu	$4, $4, 1
	bne	$4, $20, $BB50_58
	dsll	$6, $6, 4
# BB#62:                                # %while.body.i625.loopexit
                                        #   in Loop: Header=BB50_43 Depth=2
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB50_64
	daddiu	$6, $4, 4
$BB50_63:                               # %while.body.i.i628
                                        #   in Loop: Header=BB50_64 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_64:                               # %while.body.i.i628
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($6)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_63
	nop
# BB#65:                                # %writeUARTChar.exit.i631
                                        #   in Loop: Header=BB50_43 Depth=2
	sb	$22, 0($4)
	lw	$1, 0($6)
	j	$BB50_67
	nop
$BB50_66:                               # %while.body.i.i628.1
                                        #   in Loop: Header=BB50_67 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB50_67:                               # %while.body.i.i628.1
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_66
	nop
# BB#68:                                # %writeUARTChar.exit.i631.1
                                        #   in Loop: Header=BB50_43 Depth=2
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	sb	$18, 0($4)
	j	$BB50_70
	daddiu	$6, $4, 4
$BB50_69:                               # %while.body.i.i628.2
                                        #   in Loop: Header=BB50_70 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_70:                               # %while.body.i.i628.2
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($6)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_69
	nop
# BB#71:                                # %writeUARTChar.exit.i631.2
                                        #   in Loop: Header=BB50_43 Depth=2
	sb	$22, 0($4)
	mul	$4, $2, $17
	sll	$6, $4, 0
	addiu	$7, $zero, 0
	move	$8, $6
$BB50_72:                               # %for.body.i643
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_74 Depth 4
	daddiu	$1, $19, 127
	dsll	$9, $1, 24
	j	$BB50_74
	daddiu	$10, $9, 4
$BB50_73:                               # %while.body.i.i646
                                        #   in Loop: Header=BB50_74 Depth=4
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_74:                               # %while.body.i.i646
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        #       Parent Loop BB50_72 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	lw	$1, 0($10)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_73
	nop
# BB#75:                                # %writeUARTChar.exit.i650
                                        #   in Loop: Header=BB50_72 Depth=3
	sltu	$1, $8, $23
	dsrl	$11, $8, 60
	daddiu	$10, $11, 55
	ori	$11, $11, 48
	movn	$10, $11, $1
	sll	$1, $10, 0
	sb	$1, 0($9)
	addiu	$7, $7, 1
	bne	$7, $20, $BB50_72
	dsll	$8, $8, 4
# BB#76:                                # %while.body.i655.loopexit
                                        #   in Loop: Header=BB50_43 Depth=2
	daddiu	$1, $19, 127
	dsll	$7, $1, 24
	j	$BB50_78
	daddiu	$8, $7, 4
$BB50_77:                               # %while.body.i.i658
                                        #   in Loop: Header=BB50_78 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_78:                               # %while.body.i.i658
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($8)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_77
	nop
# BB#79:                                # %writeUARTChar.exit.i661
                                        #   in Loop: Header=BB50_43 Depth=2
	sb	$13, 0($7)
	addiu	$7, $zero, 0
$BB50_80:                               # %for.body.i673
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_82 Depth 4
	daddiu	$1, $19, 127
	dsll	$8, $1, 24
	j	$BB50_82
	daddiu	$9, $8, 4
$BB50_81:                               # %while.body.i.i676
                                        #   in Loop: Header=BB50_82 Depth=4
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_82:                               # %while.body.i.i676
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        #       Parent Loop BB50_80 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	lw	$1, 0($9)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_81
	nop
# BB#83:                                # %writeUARTChar.exit.i680
                                        #   in Loop: Header=BB50_80 Depth=3
	sltu	$1, $6, $23
	dsrl	$10, $6, 60
	daddiu	$9, $10, 55
	ori	$10, $10, 48
	movn	$9, $10, $1
	sll	$1, $9, 0
	sb	$1, 0($8)
	addiu	$7, $7, 1
	bne	$7, $20, $BB50_80
	dsll	$6, $6, 4
# BB#84:                                # %while.body.i685.loopexit
                                        #   in Loop: Header=BB50_43 Depth=2
	daddiu	$1, $19, 127
	dsll	$6, $1, 24
	j	$BB50_86
	daddiu	$7, $6, 4
$BB50_85:                               # %while.body.i.i688
                                        #   in Loop: Header=BB50_86 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_86:                               # %while.body.i.i688
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($7)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_85
	nop
# BB#87:                                # %writeUARTChar.exit.i691
                                        #   in Loop: Header=BB50_43 Depth=2
	sb	$22, 0($6)
	lw	$1, 0($7)
	j	$BB50_89
	nop
$BB50_88:                               # %while.body.i.i688.1
                                        #   in Loop: Header=BB50_89 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB50_89:                               # %while.body.i.i688.1
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_88
	nop
# BB#90:                                # %writeUARTChar.exit.i691.1
                                        #   in Loop: Header=BB50_43 Depth=2
	daddiu	$1, $19, 127
	dsll	$6, $1, 24
	sb	$15, 0($6)
	j	$BB50_92
	daddiu	$7, $6, 4
$BB50_91:                               # %while.body.i.i688.2
                                        #   in Loop: Header=BB50_92 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_92:                               # %while.body.i.i688.2
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($7)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_91
	nop
# BB#93:                                # %writeUARTChar.exit.i691.2
                                        #   in Loop: Header=BB50_43 Depth=2
	sb	$22, 0($6)
	addiu	$6, $zero, 0
$BB50_94:                               # %for.body.i703
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_96 Depth 4
	daddiu	$1, $19, 127
	dsll	$7, $1, 24
	j	$BB50_96
	daddiu	$8, $7, 4
$BB50_95:                               # %while.body.i.i706
                                        #   in Loop: Header=BB50_96 Depth=4
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_96:                               # %while.body.i.i706
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        #       Parent Loop BB50_94 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	lw	$1, 0($8)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_95
	nop
# BB#97:                                # %writeUARTChar.exit.i710
                                        #   in Loop: Header=BB50_94 Depth=3
	sltu	$1, $5, $23
	dsrl	$9, $5, 60
	daddiu	$8, $9, 55
	ori	$9, $9, 48
	movn	$8, $9, $1
	sll	$1, $8, 0
	sb	$1, 0($7)
	addiu	$6, $6, 1
	bne	$6, $20, $BB50_94
	dsll	$5, $5, 4
# BB#98:                                # %while.body.i715.loopexit
                                        #   in Loop: Header=BB50_43 Depth=2
	daddiu	$1, $19, 127
	dsll	$5, $1, 24
	j	$BB50_100
	daddiu	$6, $5, 4
$BB50_99:                               # %while.body.i.i718
                                        #   in Loop: Header=BB50_100 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_100:                              # %while.body.i.i718
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($6)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_99
	nop
# BB#101:                               # %writeUARTChar.exit.i721
                                        #   in Loop: Header=BB50_43 Depth=2
	sb	$22, 0($5)
	lw	$1, 0($6)
	j	$BB50_103
	nop
$BB50_102:                              # %while.body.i.i718.1
                                        #   in Loop: Header=BB50_103 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB50_103:                              # %while.body.i.i718.1
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_102
	nop
# BB#104:                               # %writeUARTChar.exit.i721.1
                                        #   in Loop: Header=BB50_43 Depth=2
	daddiu	$1, $19, 127
	dsll	$5, $1, 24
	sb	$18, 0($5)
	j	$BB50_106
	daddiu	$6, $5, 4
$BB50_105:                              # %while.body.i.i718.2
                                        #   in Loop: Header=BB50_106 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_106:                              # %while.body.i.i718.2
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($6)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_105
	nop
# BB#107:                               # %writeUARTChar.exit.i721.2
                                        #   in Loop: Header=BB50_43 Depth=2
	sb	$22, 0($5)
	movz	$17, $3, $2
	sll	$3, $17, 0
	addiu	$5, $zero, 0
$BB50_108:                              # %for.body.i733
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_110 Depth 4
	daddiu	$1, $19, 127
	dsll	$6, $1, 24
	j	$BB50_110
	daddiu	$7, $6, 4
$BB50_109:                              # %while.body.i.i736
                                        #   in Loop: Header=BB50_110 Depth=4
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_110:                              # %while.body.i.i736
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        #       Parent Loop BB50_108 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	lw	$1, 0($7)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_109
	nop
# BB#111:                               # %writeUARTChar.exit.i740
                                        #   in Loop: Header=BB50_108 Depth=3
	sltu	$1, $3, $23
	dsrl	$8, $3, 60
	daddiu	$7, $8, 55
	ori	$8, $8, 48
	movn	$7, $8, $1
	sll	$1, $7, 0
	sb	$1, 0($6)
	addiu	$5, $5, 1
	bne	$5, $20, $BB50_108
	dsll	$3, $3, 4
# BB#112:                               # %while.body.i745.loopexit
                                        #   in Loop: Header=BB50_43 Depth=2
	daddiu	$1, $19, 127
	dsll	$3, $1, 24
	j	$BB50_114
	daddiu	$5, $3, 4
$BB50_113:                              # %while.body.i.i748
                                        #   in Loop: Header=BB50_114 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_114:                              # %while.body.i.i748
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_113
	nop
# BB#115:                               # %writeUARTChar.exit.i751
                                        #   in Loop: Header=BB50_43 Depth=2
	sb	$13, 0($3)
	lw	$1, 0($5)
	j	$BB50_117
	nop
$BB50_116:                              # %while.body.i.i759
                                        #   in Loop: Header=BB50_117 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB50_117:                              # %while.body.i.i759
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_116
	nop
# BB#118:                               # %writeUARTChar.exit.i762
                                        #   in Loop: Header=BB50_43 Depth=2
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	sb	$13, 0($1)
	addiu	$1, $zero, 1
	addiu	$2, $2, 1
	bne	$2, $13, $BB50_43
	movz	$4, $1, $4
# BB#119:                               #   in Loop: Header=BB50_12 Depth=1
	lw	$1, 56($fp)             # 4-byte Folded Reload
	sw	$1, 84($fp)             # 4-byte Folded Spill
	j	$BB50_183
	addiu	$8, $zero, 44
$BB50_120:                              # %writeUARTChar.exit.i439
                                        #   in Loop: Header=BB50_12 Depth=1
	addiu	$1, $zero, 84
	bne	$16, $1, $BB50_183
	addiu	$8, $zero, 44
$BB50_121:                              # %while.body.i477.preheader
                                        #   in Loop: Header=BB50_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	j	$BB50_123
	daddiu	$3, $2, 4
$BB50_122:                              # %while.body.i.i480
                                        #   in Loop: Header=BB50_123 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_123:                              # %while.body.i.i480
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_122
	nop
# BB#124:                               # %writeUARTChar.exit.i483
                                        #   in Loop: Header=BB50_12 Depth=1
	addiu	$1, $zero, 88
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB50_126
	nop
$BB50_125:                              # %while.body.i.i480.1
                                        #   in Loop: Header=BB50_126 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB50_126:                              # %while.body.i.i480.1
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_125
	nop
# BB#127:                               # %writeUARTChar.exit.i483.1
                                        #   in Loop: Header=BB50_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 58
	sb	$1, 0($2)
	daddiu	$1, $19, 5
	dsll	$1, $1, 24
	lw	$3, 0($1)
	addiu	$4, $zero, 0
$BB50_128:                              # %for.body.i
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_130 Depth 3
	j	$BB50_130
	daddiu	$1, $2, 4
$BB50_129:                              # %while.body.i.i489
                                        #   in Loop: Header=BB50_130 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB50_130:                              # %while.body.i.i489
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_128 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_129
	nop
# BB#131:                               # %writeUARTChar.exit.i490
                                        #   in Loop: Header=BB50_128 Depth=2
	sltu	$1, $3, $23
	dsrl	$6, $3, 60
	daddiu	$5, $6, 55
	ori	$6, $6, 48
	movn	$5, $6, $1
	sll	$1, $5, 0
	daddiu	$5, $19, 127
	dsll	$5, $5, 24
	sb	$1, 0($5)
	addiu	$4, $4, 1
	bne	$4, $20, $BB50_128
	dsll	$3, $3, 4
# BB#132:                               # %while.body.i494.loopexit
                                        #   in Loop: Header=BB50_12 Depth=1
	j	$BB50_134
	daddiu	$1, $5, 4
$BB50_133:                              # %while.body.i.i497
                                        #   in Loop: Header=BB50_134 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB50_134:                              # %while.body.i.i497
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_133
	nop
# BB#135:                               # %writeUARTChar.exit.i500
                                        #   in Loop: Header=BB50_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	sb	$22, 0($2)
	j	$BB50_137
	daddiu	$3, $2, 4
$BB50_136:                              # %while.body.i.i497.1
                                        #   in Loop: Header=BB50_137 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_137:                              # %while.body.i.i497.1
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_136
	nop
# BB#138:                               # %writeUARTChar.exit.i500.1
                                        #   in Loop: Header=BB50_12 Depth=1
	sb	$22, 0($2)
	lw	$1, 0($3)
	j	$BB50_140
	nop
$BB50_139:                              # %while.body.i.i497.2
                                        #   in Loop: Header=BB50_140 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB50_140:                              # %while.body.i.i497.2
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_139
	nop
# BB#141:                               # %writeUARTChar.exit.i500.2
                                        #   in Loop: Header=BB50_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	sb	$22, 0($2)
	j	$BB50_143
	daddiu	$3, $2, 4
$BB50_142:                              # %while.body.i.i497.3
                                        #   in Loop: Header=BB50_143 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_143:                              # %while.body.i.i497.3
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_142
	nop
# BB#144:                               # %writeUARTChar.exit.i500.3
                                        #   in Loop: Header=BB50_12 Depth=1
	addiu	$1, $zero, 89
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB50_146
	nop
$BB50_145:                              # %while.body.i.i497.4
                                        #   in Loop: Header=BB50_146 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB50_146:                              # %while.body.i.i497.4
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_145
	nop
# BB#147:                               # %writeUARTChar.exit.i500.4
                                        #   in Loop: Header=BB50_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 58
	sb	$1, 0($2)
	daddiu	$1, $19, 5
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$3, 0($1)
	addiu	$4, $zero, 0
$BB50_148:                              # %for.body.i512
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_150 Depth 3
	j	$BB50_150
	daddiu	$1, $2, 4
$BB50_149:                              # %while.body.i.i515
                                        #   in Loop: Header=BB50_150 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB50_150:                              # %while.body.i.i515
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_149
	nop
# BB#151:                               # %writeUARTChar.exit.i519
                                        #   in Loop: Header=BB50_148 Depth=2
	sltu	$1, $3, $23
	dsrl	$6, $3, 60
	daddiu	$5, $6, 55
	ori	$6, $6, 48
	movn	$5, $6, $1
	sll	$1, $5, 0
	daddiu	$5, $19, 127
	dsll	$5, $5, 24
	sb	$1, 0($5)
	addiu	$4, $4, 1
	bne	$4, $20, $BB50_148
	dsll	$3, $3, 4
# BB#152:                               # %while.body.i524.loopexit
                                        #   in Loop: Header=BB50_12 Depth=1
	daddiu	$1, $5, 4
	lw	$1, 0($1)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB50_154
	addiu	$13, $zero, 10
$BB50_153:                              # %while.body.i.i527
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_153
	nop
$BB50_154:                              # %writeUARTChar.exit.i530
                                        #   in Loop: Header=BB50_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	sb	$22, 0($2)
	j	$BB50_156
	daddiu	$3, $2, 4
$BB50_155:                              # %while.body.i.i527.1
                                        #   in Loop: Header=BB50_156 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_156:                              # %while.body.i.i527.1
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_155
	nop
# BB#157:                               # %writeUARTChar.exit.i530.1
                                        #   in Loop: Header=BB50_12 Depth=1
	sb	$22, 0($2)
	lw	$1, 0($3)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB50_159
	addiu	$18, $zero, 61
$BB50_158:                              # %while.body.i.i527.2
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_158
	nop
$BB50_159:                              # %writeUARTChar.exit.i530.2
                                        #   in Loop: Header=BB50_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	sb	$22, 0($2)
	j	$BB50_161
	daddiu	$3, $2, 4
$BB50_160:                              # %while.body.i.i527.3
                                        #   in Loop: Header=BB50_161 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_161:                              # %while.body.i.i527.3
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_160
	nop
# BB#162:                               # %writeUARTChar.exit.i530.3
                                        #   in Loop: Header=BB50_12 Depth=1
	addiu	$1, $zero, 68
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB50_164
	nop
$BB50_163:                              # %while.body.i.i527.4
                                        #   in Loop: Header=BB50_164 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB50_164:                              # %while.body.i.i527.4
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_163
	nop
# BB#165:                               # %writeUARTChar.exit.i530.4
                                        #   in Loop: Header=BB50_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 111
	sb	$1, 0($2)
	j	$BB50_167
	daddiu	$3, $2, 4
$BB50_166:                              # %while.body.i.i527.5
                                        #   in Loop: Header=BB50_167 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_167:                              # %while.body.i.i527.5
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_166
	nop
# BB#168:                               # %writeUARTChar.exit.i530.5
                                        #   in Loop: Header=BB50_12 Depth=1
	addiu	$1, $zero, 119
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB50_170
	nop
$BB50_169:                              # %while.body.i.i527.6
                                        #   in Loop: Header=BB50_170 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB50_170:                              # %while.body.i.i527.6
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_169
	nop
# BB#171:                               # %writeUARTChar.exit.i530.6
                                        #   in Loop: Header=BB50_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 110
	sb	$1, 0($2)
	j	$BB50_173
	daddiu	$3, $2, 4
$BB50_172:                              # %while.body.i.i527.7
                                        #   in Loop: Header=BB50_173 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_173:                              # %while.body.i.i527.7
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_172
	nop
# BB#174:                               # %writeUARTChar.exit.i530.7
                                        #   in Loop: Header=BB50_12 Depth=1
	addiu	$1, $zero, 58
	sb	$1, 0($2)
	daddiu	$1, $19, 5
	dsll	$1, $1, 24
	daddiu	$1, $1, 8
	lw	$2, 0($1)
	addiu	$3, $zero, 0
$BB50_175:                              # %for.body.i542
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_177 Depth 3
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB50_177
	daddiu	$5, $4, 4
$BB50_176:                              # %while.body.i.i545
                                        #   in Loop: Header=BB50_177 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_177:                              # %while.body.i.i545
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_175 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_176
	nop
# BB#178:                               # %writeUARTChar.exit.i549
                                        #   in Loop: Header=BB50_175 Depth=2
	sltu	$1, $2, $23
	dsrl	$6, $2, 60
	daddiu	$5, $6, 55
	ori	$6, $6, 48
	movn	$5, $6, $1
	sll	$1, $5, 0
	sb	$1, 0($4)
	addiu	$3, $3, 1
	bne	$3, $20, $BB50_175
	dsll	$2, $2, 4
# BB#179:                               # %while.body.i554.loopexit
                                        #   in Loop: Header=BB50_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	j	$BB50_181
	daddiu	$3, $2, 4
$BB50_180:                              # %while.body.i.i557
                                        #   in Loop: Header=BB50_181 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_181:                              # %while.body.i.i557
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_180
	nop
# BB#182:                               # %writeUARTChar.exit.i560
                                        #   in Loop: Header=BB50_12 Depth=1
	sb	$13, 0($2)
$BB50_183:                              # %if.end41
                                        #   in Loop: Header=BB50_12 Depth=1
	ld	$1, %got_page($.str41)($12)
	addiu	$3, $zero, 67
	beq	$16, $3, $BB50_198
	daddiu	$4, $1, %got_ofst($.str41)
$BB50_184:                              # %if.end41
                                        #   in Loop: Header=BB50_12 Depth=1
	addiu	$1, $zero, 75
	bne	$16, $1, $BB50_364
	nop
$BB50_185:                              # %if.then115
                                        #   in Loop: Header=BB50_12 Depth=1
	lw	$1, 96($fp)             # 4-byte Folded Reload
	andi	$1, $1, 255
	bne	$1, $zero, $BB50_187
	nop
# BB#186:                               # %if.then119
                                        #   in Loop: Header=BB50_12 Depth=1
	#APP
	CIncBase $c4, $c4, $a0
	#NO_APP
	#APP
	CGetLen $v0, $c4
	#NO_APP
	#APP
	CSetLen $c4, $c4, $a0
	#NO_APP
	addiu	$1, $zero, 1
	sw	$1, 96($fp)             # 4-byte Folded Spill
$BB50_187:                              # %if.end122
                                        #   in Loop: Header=BB50_12 Depth=1
	ld	$1, %got_page($.str43)($12)
	daddiu	$2, $1, %got_ofst($.str43)
	addiu	$3, $zero, 67
$BB50_188:                              # %while.body.i953
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_190 Depth 3
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB50_190
	daddiu	$5, $4, 4
$BB50_189:                              # %while.body.i.i956
                                        #   in Loop: Header=BB50_190 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_190:                              # %while.body.i.i956
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_188 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_189
	nop
# BB#191:                               # %writeUARTChar.exit.i959
                                        #   in Loop: Header=BB50_188 Depth=2
	sb	$3, 0($4)
	daddiu	$1, $2, 1
	lbu	$3, 1($2)
	bne	$3, $zero, $BB50_188
	move	$2, $1
# BB#192:                               # %writeString.exit960
                                        #   in Loop: Header=BB50_12 Depth=1
	#APP
	CGetBase $v0, $c4
	#NO_APP
	addiu	$2, $zero, 0
                                        # implicit-def: V1_64
$BB50_193:                              # %for.body.i971
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_195 Depth 3
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB50_195
	daddiu	$5, $4, 4
$BB50_194:                              # %while.body.i.i974
                                        #   in Loop: Header=BB50_195 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_195:                              # %while.body.i.i974
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_193 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_194
	nop
# BB#196:                               # %writeUARTChar.exit.i978
                                        #   in Loop: Header=BB50_193 Depth=2
	sltu	$1, $3, $23
	dsrl	$6, $3, 60
	daddiu	$5, $6, 55
	ori	$6, $6, 48
	movn	$5, $6, $1
	sll	$1, $5, 0
	sb	$1, 0($4)
	addiu	$2, $2, 1
	bne	$2, $20, $BB50_193
	dsll	$3, $3, 4
# BB#197:                               # %while.body.i983.loopexit
                                        #   in Loop: Header=BB50_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	j	$BB50_216
	daddiu	$3, $2, 4
$BB50_198:                              # %while.body.i901
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_200 Depth 3
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	j	$BB50_200
	daddiu	$5, $2, 4
$BB50_199:                              # %while.body.i.i904
                                        #   in Loop: Header=BB50_200 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_200:                              # %while.body.i.i904
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_198 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_199
	nop
# BB#201:                               # %writeUARTChar.exit.i907
                                        #   in Loop: Header=BB50_198 Depth=2
	sb	$3, 0($2)
	daddiu	$1, $4, 1
	lbu	$3, 1($4)
	addiu	$2, $zero, 0
	bne	$3, $zero, $BB50_198
	move	$4, $1
$BB50_202:                              # %for.body106
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_203 Depth 3
                                        #         Child Loop BB50_205 Depth 4
                                        #       Child Loop BB50_209 Depth 3
                                        #       Child Loop BB50_212 Depth 3
	daddiu	$1, $zero, 9
	dsll	$1, $1, 37
	daddiu	$1, $1, 255
	dsll	$1, $1, 23
	lw	$1, 0($1)
	sll	$3, $1, 0
	addiu	$4, $zero, 0
$BB50_203:                              # %for.body.i919
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_202 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_205 Depth 4
	daddiu	$1, $19, 127
	dsll	$5, $1, 24
	j	$BB50_205
	daddiu	$6, $5, 4
$BB50_204:                              # %while.body.i.i922
                                        #   in Loop: Header=BB50_205 Depth=4
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_205:                              # %while.body.i.i922
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_202 Depth=2
                                        #       Parent Loop BB50_203 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	lw	$1, 0($6)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_204
	nop
# BB#206:                               # %writeUARTChar.exit.i926
                                        #   in Loop: Header=BB50_203 Depth=3
	sltu	$1, $3, $23
	dsrl	$7, $3, 60
	daddiu	$6, $7, 55
	ori	$7, $7, 48
	movn	$6, $7, $1
	sll	$1, $6, 0
	sb	$1, 0($5)
	addiu	$4, $4, 1
	bne	$4, $20, $BB50_203
	dsll	$3, $3, 4
# BB#207:                               # %while.body.i931.loopexit
                                        #   in Loop: Header=BB50_202 Depth=2
	daddiu	$1, $19, 127
	dsll	$3, $1, 24
	j	$BB50_209
	daddiu	$4, $3, 4
$BB50_208:                              # %while.body.i.i934
                                        #   in Loop: Header=BB50_209 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_209:                              # %while.body.i.i934
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($4)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_208
	nop
# BB#210:                               # %writeUARTChar.exit.i937
                                        #   in Loop: Header=BB50_202 Depth=2
	sb	$8, 0($3)
	lw	$1, 0($4)
	j	$BB50_212
	nop
$BB50_211:                              # %while.body.i.i934.1
                                        #   in Loop: Header=BB50_212 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB50_212:                              # %while.body.i.i934.1
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_211
	nop
# BB#213:                               # %writeUARTChar.exit.i937.1
                                        #   in Loop: Header=BB50_202 Depth=2
	daddiu	$1, $19, 127
	dsll	$3, $1, 24
	addiu	$2, $2, 1
	bne	$2, $13, $BB50_202
	sb	$22, 0($3)
# BB#214:                               # %while.body.i942.loopexit
                                        #   in Loop: Header=BB50_12 Depth=1
	j	$BB50_229
	daddiu	$1, $3, 4
$BB50_215:                              # %while.body.i.i986
                                        #   in Loop: Header=BB50_216 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_216:                              # %while.body.i.i986
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_215
	nop
# BB#217:                               # %writeUARTChar.exit.i989
                                        #   in Loop: Header=BB50_12 Depth=1
	sb	$13, 0($2)
	ld	$1, %got_page($.str44)($12)
	daddiu	$2, $1, %got_ofst($.str44)
	addiu	$3, $zero, 67
$BB50_218:                              # %while.body.i994
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_220 Depth 3
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB50_220
	daddiu	$5, $4, 4
$BB50_219:                              # %while.body.i.i997
                                        #   in Loop: Header=BB50_220 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_220:                              # %while.body.i.i997
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_218 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_219
	nop
# BB#221:                               # %writeUARTChar.exit.i1000
                                        #   in Loop: Header=BB50_218 Depth=2
	sb	$3, 0($4)
	daddiu	$1, $2, 1
	lbu	$3, 1($2)
	bne	$3, $zero, $BB50_218
	move	$2, $1
# BB#222:                               # %writeString.exit1001
                                        #   in Loop: Header=BB50_12 Depth=1
	#APP
	CGetLen $v0, $c4
	#NO_APP
	addiu	$2, $zero, 0
                                        # implicit-def: V1_64
$BB50_223:                              # %for.body.i1012
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_225 Depth 3
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB50_225
	daddiu	$5, $4, 4
$BB50_224:                              # %while.body.i.i1015
                                        #   in Loop: Header=BB50_225 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_225:                              # %while.body.i.i1015
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_223 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_224
	nop
# BB#226:                               # %writeUARTChar.exit.i1019
                                        #   in Loop: Header=BB50_223 Depth=2
	sltu	$1, $3, $23
	dsrl	$6, $3, 60
	daddiu	$5, $6, 55
	ori	$6, $6, 48
	movn	$5, $6, $1
	sll	$1, $5, 0
	sb	$1, 0($4)
	addiu	$2, $2, 1
	bne	$2, $20, $BB50_223
	dsll	$3, $3, 4
# BB#227:                               # %while.body.i1024.loopexit
                                        #   in Loop: Header=BB50_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	j	$BB50_232
	daddiu	$3, $2, 4
$BB50_228:                              # %while.body.i.i945
                                        #   in Loop: Header=BB50_229 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB50_229:                              # %while.body.i.i945
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_228
	nop
# BB#230:                               # %writeUARTChar.exit.i948
                                        #   in Loop: Header=BB50_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	j	$BB50_234
	sb	$13, 0($1)
$BB50_231:                              # %while.body.i.i1027
                                        #   in Loop: Header=BB50_232 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_232:                              # %while.body.i.i1027
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_231
	nop
# BB#233:                               # %writeUARTChar.exit.i1030
                                        #   in Loop: Header=BB50_12 Depth=1
	sb	$13, 0($2)
	#APP
	MFC2 $0, $0, 4
	#NO_APP
$BB50_234:                              # %if.end126
                                        #   in Loop: Header=BB50_12 Depth=1
	addiu	$1, $zero, 77
	sltu	$1, $1, $16
	bne	$1, $zero, $BB50_237
	nop
$BB50_235:                              # %if.end126
                                        #   in Loop: Header=BB50_12 Depth=1
	addiu	$1, $zero, 66
	bne	$16, $1, $BB50_12
	nop
$BB50_236:                              # %if.then205
                                        #   in Loop: Header=BB50_12 Depth=1
	ld	$25, %call16(arrayBench)($12)
	move	$gp, $12
	jalr	$25
	move	$16, $12
	move	$12, $16
	j	$BB50_12
	addiu	$16, $zero, 66
$BB50_237:                              # %if.end126
                                        #   in Loop: Header=BB50_12 Depth=1
	addiu	$1, $zero, 85
	sltu	$1, $1, $16
	bne	$1, $zero, $BB50_255
	nop
$BB50_238:                              # %if.end126
                                        #   in Loop: Header=BB50_12 Depth=1
	addiu	$1, $zero, 78
	bne	$16, $1, $BB50_12
	nop
$BB50_239:                              # %if.then199
                                        #   in Loop: Header=BB50_12 Depth=1
	ld	$1, %got_page($.str45)($12)
	daddiu	$3, $1, %got_ofst($.str45)
	ld	$1, 48($fp)             # 8-byte Folded Reload
	lw	$2, 0($1)
	addiu	$4, $zero, 65
$BB50_240:                              # %while.body.i1035
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_242 Depth 3
	daddiu	$1, $19, 127
	dsll	$5, $1, 24
	j	$BB50_242
	daddiu	$6, $5, 4
$BB50_241:                              # %while.body.i.i1038
                                        #   in Loop: Header=BB50_242 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_242:                              # %while.body.i.i1038
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_240 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($6)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_241
	nop
# BB#243:                               # %writeUARTChar.exit.i1041
                                        #   in Loop: Header=BB50_240 Depth=2
	sb	$4, 0($5)
	daddiu	$1, $3, 1
	lbu	$4, 1($3)
	bne	$4, $zero, $BB50_240
	move	$3, $1
# BB#244:                               # %writeString.exit1042
                                        #   in Loop: Header=BB50_12 Depth=1
	sll	$4, $2, 0
	ld	$25, %call16(writeDigit)($12)
	move	$gp, $12
	jalr	$25
	move	$18, $12
	move	$12, $18
	ld	$1, %got_page($.str46)($12)
	daddiu	$2, $1, %got_ofst($.str46)
	addiu	$3, $zero, 66
$BB50_245:                              # %while.body.i1046
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_247 Depth 3
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB50_247
	daddiu	$5, $4, 4
$BB50_246:                              # %while.body.i.i1049
                                        #   in Loop: Header=BB50_247 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_247:                              # %while.body.i.i1049
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_245 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_246
	nop
# BB#248:                               # %writeUARTChar.exit.i1052
                                        #   in Loop: Header=BB50_245 Depth=2
	sb	$3, 0($4)
	daddiu	$1, $2, 1
	lbu	$3, 1($2)
	bne	$3, $zero, $BB50_245
	move	$2, $1
# BB#249:                               # %writeString.exit1053
                                        #   in Loop: Header=BB50_12 Depth=1
	lui	$1, 32512
	daddiu	$1, $1, 8192
	ori	$2, $zero, 43981
	sw	$2, 0($1)
	ld	$1, %got_page($.str47)($12)
	daddiu	$3, $1, %got_ofst($.str47)
	addiu	$2, $zero, 65
	addiu	$18, $zero, 61
$BB50_250:                              # %while.body.i1057
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_252 Depth 3
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	j	$BB50_252
	daddiu	$5, $4, 4
$BB50_251:                              # %while.body.i.i1060
                                        #   in Loop: Header=BB50_252 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_252:                              # %while.body.i.i1060
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_250 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_251
	nop
# BB#253:                               # %writeUARTChar.exit.i1063
                                        #   in Loop: Header=BB50_250 Depth=2
	sb	$2, 0($4)
	daddiu	$1, $3, 1
	lbu	$2, 1($3)
	bne	$2, $zero, $BB50_250
	move	$3, $1
# BB#254:                               # %writeUARTChar.exit.i1063
                                        #   in Loop: Header=BB50_12 Depth=1
	j	$BB50_12
	nop
$BB50_255:                              # %if.end126
                                        #   in Loop: Header=BB50_12 Depth=1
	addiu	$1, $zero, 108
	beq	$16, $1, $BB50_366
	nop
$BB50_256:                              # %if.end126
                                        #   in Loop: Header=BB50_12 Depth=1
	addiu	$1, $zero, 113
	beq	$16, $1, $BB50_11
	nop
$BB50_257:                              # %if.end126
                                        #   in Loop: Header=BB50_12 Depth=1
	addiu	$1, $zero, 86
	bne	$16, $1, $BB50_12
	addiu	$2, $zero, 200
$BB50_258:                              # %for.cond136.preheader
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_259 Depth 3
                                        #       Child Loop BB50_260 Depth 3
                                        #       Child Loop BB50_261 Depth 3
                                        #         Child Loop BB50_262 Depth 4
                                        #       Child Loop BB50_264 Depth 3
                                        #       Child Loop BB50_265 Depth 3
                                        #       Child Loop BB50_266 Depth 3
                                        #         Child Loop BB50_267 Depth 4
                                        #       Child Loop BB50_269 Depth 3
                                        #       Child Loop BB50_270 Depth 3
                                        #       Child Loop BB50_271 Depth 3
                                        #         Child Loop BB50_272 Depth 4
	addiu	$3, $zero, 73
$BB50_259:                              # %for.body5.i.i
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_258 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	addiu	$3, $3, -1
	bne	$3, $zero, $BB50_259
	addiu	$4, $zero, 48
$BB50_260:                              # %for.cond2.preheader.i33.i
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_258 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	addiu	$4, $4, -1
	bne	$4, $zero, $BB50_260
	addiu	$3, $zero, 0
$BB50_261:                              # %for.cond2.preheader.i46.i
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_258 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_262 Depth 4
	addiu	$4, $zero, 73
$BB50_262:                              # %for.body5.i50.i
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_258 Depth=2
                                        #       Parent Loop BB50_261 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	addiu	$4, $4, -1
	bne	$4, $zero, $BB50_262
	nop
# BB#263:                               # %for.inc11.i53.i
                                        #   in Loop: Header=BB50_261 Depth=3
	addiu	$3, $3, 1
	bne	$3, $21, $BB50_261
	addiu	$4, $zero, 73
$BB50_264:                              # %for.body5.i.i.1
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_258 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	addiu	$4, $4, -1
	bne	$4, $zero, $BB50_264
	addiu	$5, $zero, 48
$BB50_265:                              # %for.cond2.preheader.i33.i.1
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_258 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	addiu	$5, $5, -1
	bne	$5, $zero, $BB50_265
	addiu	$3, $zero, 0
$BB50_266:                              # %for.cond2.preheader.i46.i.1
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_258 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_267 Depth 4
	addiu	$4, $zero, 73
$BB50_267:                              # %for.body5.i50.i.1
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_258 Depth=2
                                        #       Parent Loop BB50_266 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	addiu	$4, $4, -1
	bne	$4, $zero, $BB50_267
	nop
# BB#268:                               # %for.inc11.i53.i.1
                                        #   in Loop: Header=BB50_266 Depth=3
	addiu	$3, $3, 1
	bne	$3, $21, $BB50_266
	addiu	$4, $zero, 73
$BB50_269:                              # %for.body5.i.i.2
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_258 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	addiu	$4, $4, -1
	bne	$4, $zero, $BB50_269
	addiu	$5, $zero, 48
$BB50_270:                              # %for.cond2.preheader.i33.i.2
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_258 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	addiu	$5, $5, -1
	bne	$5, $zero, $BB50_270
	addiu	$3, $zero, 0
$BB50_271:                              # %for.cond2.preheader.i46.i.2
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_258 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_272 Depth 4
	addiu	$4, $zero, 73
$BB50_272:                              # %for.body5.i50.i.2
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_258 Depth=2
                                        #       Parent Loop BB50_271 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	#APP
	CSWR $a0, $a1($c4)
	#NO_APP
	addiu	$4, $4, -1
	bne	$4, $zero, $BB50_272
	nop
# BB#273:                               # %for.inc11.i53.i.2
                                        #   in Loop: Header=BB50_271 Depth=3
	addiu	$3, $3, 1
	bne	$3, $21, $BB50_271
	nop
# BB#274:                               # %draw3DRect.exit.2
                                        #   in Loop: Header=BB50_258 Depth=2
	addiu	$2, $2, 100
	slti	$1, $2, 500
	bne	$1, $zero, $BB50_258
	nop
# BB#275:                               #   in Loop: Header=BB50_12 Depth=1
	lw	$3, 44($fp)             # 4-byte Folded Reload
$BB50_276:                              # %for.body149
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#APP
	CSDR $a0, $a1($c4)
	#NO_APP
	addiu	$3, $3, -1
	bne	$3, $zero, $BB50_276
	addiu	$2, $zero, 0
# BB#277:                               #   in Loop: Header=BB50_12 Depth=1
	addiu	$4, $zero, 0
	daddiu	$6, $zero, 9
	lw	$7, 36($fp)             # 4-byte Folded Reload
	ori	$8, $zero, 34952
	addiu	$9, $zero, 50
$BB50_278:                              # %for.body160
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	sll	$1, $4, 0
	dsll	$1, $1, 1
	dsll	$3, $6, 34
	daddiu	$5, $3, 1
	dsll	$5, $5, 26
	daddu	$1, $1, $5
	sh	$4, 0($1)
	addiu	$4, $4, 1
	bne	$4, $7, $BB50_278
	nop
# BB#279:                               #   in Loop: Header=BB50_12 Depth=1
	lw	$4, 40($fp)             # 4-byte Folded Reload
$BB50_280:                              # %for.cond171.preheader
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_281 Depth 3
	addiu	$5, $zero, 75
	move	$6, $4
$BB50_281:                              # %for.body174
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_280 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	sll	$1, $6, 0
	dsll	$1, $1, 1
	daddiu	$7, $3, 1
	dsll	$7, $7, 26
	daddu	$1, $1, $7
	sh	$8, 0($1)
	addiu	$5, $5, -1
	bne	$5, $zero, $BB50_281
	addiu	$6, $6, 1
# BB#282:                               # %for.inc184
                                        #   in Loop: Header=BB50_280 Depth=2
	addiu	$4, $4, 800
	addiu	$2, $2, 1
	bne	$2, $9, $BB50_280
	addiu	$16, $zero, 86
# BB#283:                               # %for.inc184
                                        #   in Loop: Header=BB50_12 Depth=1
	j	$BB50_12
	nop
$BB50_284:                              # %while.cond
                                        #   in Loop: Header=BB50_12 Depth=1
	addiu	$1, $zero, 81
	beq	$2, $1, $BB50_443
	nop
$BB50_285:                              # %while.body.i298.preheader
                                        #   in Loop: Header=BB50_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	j	$BB50_287
	daddiu	$3, $2, 4
$BB50_286:                              # %while.body.i.i301
                                        #   in Loop: Header=BB50_287 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_287:                              # %while.body.i.i301
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_286
	nop
# BB#288:                               # %writeUARTChar.exit.i304
                                        #   in Loop: Header=BB50_12 Depth=1
	sb	$13, 0($2)
	lw	$1, 0($3)
	j	$BB50_290
	nop
$BB50_289:                              # %while.body.i.i301.1
                                        #   in Loop: Header=BB50_290 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB50_290:                              # %while.body.i.i301.1
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_289
	nop
# BB#291:                               # %writeUARTChar.exit.i304.1
                                        #   in Loop: Header=BB50_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	sb	$22, 0($2)
	j	$BB50_293
	daddiu	$3, $2, 4
$BB50_292:                              # %while.body.i.i301.2
                                        #   in Loop: Header=BB50_293 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_293:                              # %while.body.i.i301.2
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_292
	nop
# BB#294:                               # %writeUARTChar.exit.i304.2
                                        #   in Loop: Header=BB50_12 Depth=1
	addiu	$1, $zero, 77
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB50_296
	nop
$BB50_295:                              # %while.body.i.i301.3
                                        #   in Loop: Header=BB50_296 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB50_296:                              # %while.body.i.i301.3
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_295
	nop
# BB#297:                               # %writeUARTChar.exit.i304.3
                                        #   in Loop: Header=BB50_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 101
	sb	$1, 0($2)
	j	$BB50_299
	daddiu	$3, $2, 4
$BB50_298:                              # %while.body.i.i301.4
                                        #   in Loop: Header=BB50_299 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_299:                              # %while.body.i.i301.4
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_298
	nop
# BB#300:                               # %writeUARTChar.exit.i304.4
                                        #   in Loop: Header=BB50_12 Depth=1
	addiu	$1, $zero, 110
	sb	$1, 0($2)
	lw	$1, 0($3)
	j	$BB50_302
	nop
$BB50_301:                              # %while.body.i.i301.5
                                        #   in Loop: Header=BB50_302 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB50_302:                              # %while.body.i.i301.5
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_301
	nop
# BB#303:                               # %writeUARTChar.exit.i304.5
                                        #   in Loop: Header=BB50_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	addiu	$1, $zero, 117
	sb	$1, 0($2)
	j	$BB50_305
	daddiu	$3, $2, 4
$BB50_304:                              # %while.body.i.i301.6
                                        #   in Loop: Header=BB50_305 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_305:                              # %while.body.i.i301.6
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($3)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_304
	nop
# BB#306:                               # %writeUARTChar.exit.i304.6
                                        #   in Loop: Header=BB50_12 Depth=1
	addiu	$1, $zero, 58
	sb	$1, 0($2)
	lw	$1, 0($3)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB50_308
	lui	$7, 128
$BB50_307:                              # %while.body.i.i301.7
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_307
	nop
$BB50_308:                              # %writeUARTChar.exit.i304.7
                                        #   in Loop: Header=BB50_12 Depth=1
	daddiu	$1, $19, 127
	dsll	$3, $1, 24
	sb	$13, 0($3)
	ld	$1, %got_page($.str15)($12)
	daddiu	$4, $1, %got_ofst($.str15)
	addiu	$5, $zero, 32
$BB50_309:                              # %while.body.i309
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_311 Depth 3
	j	$BB50_311
	daddiu	$1, $3, 4
$BB50_310:                              # %while.body.i.i312
                                        #   in Loop: Header=BB50_311 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB50_311:                              # %while.body.i.i312
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_309 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_310
	nop
# BB#312:                               # %writeUARTChar.exit.i315
                                        #   in Loop: Header=BB50_309 Depth=2
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	sb	$5, 0($2)
	daddiu	$1, $4, 1
	lbu	$5, 1($4)
	bne	$5, $zero, $BB50_309
	move	$4, $1
# BB#313:                               #   in Loop: Header=BB50_12 Depth=1
	addiu	$4, $zero, 32
	ld	$1, %got_page($.str16)($12)
	daddiu	$5, $1, %got_ofst($.str16)
$BB50_314:                              # %while.body.i320
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_316 Depth 3
	j	$BB50_316
	daddiu	$1, $2, 4
$BB50_315:                              # %while.body.i.i323
                                        #   in Loop: Header=BB50_316 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB50_316:                              # %while.body.i.i323
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_314 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_315
	nop
# BB#317:                               # %writeUARTChar.exit.i326
                                        #   in Loop: Header=BB50_314 Depth=2
	daddiu	$1, $19, 127
	dsll	$3, $1, 24
	sb	$4, 0($3)
	daddiu	$1, $5, 1
	lbu	$4, 1($5)
	bne	$4, $zero, $BB50_314
	move	$5, $1
# BB#318:                               #   in Loop: Header=BB50_12 Depth=1
	addiu	$4, $zero, 32
	ld	$1, %got_page($.str17)($12)
	daddiu	$5, $1, %got_ofst($.str17)
$BB50_319:                              # %while.body.i331
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_321 Depth 3
	j	$BB50_321
	daddiu	$1, $3, 4
$BB50_320:                              # %while.body.i.i334
                                        #   in Loop: Header=BB50_321 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB50_321:                              # %while.body.i.i334
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_319 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_320
	nop
# BB#322:                               # %writeUARTChar.exit.i337
                                        #   in Loop: Header=BB50_319 Depth=2
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	sb	$4, 0($2)
	daddiu	$1, $5, 1
	lbu	$4, 1($5)
	bne	$4, $zero, $BB50_319
	move	$5, $1
# BB#323:                               #   in Loop: Header=BB50_12 Depth=1
	addiu	$4, $zero, 32
	ld	$1, %got_page($.str18)($12)
	daddiu	$5, $1, %got_ofst($.str18)
$BB50_324:                              # %while.body.i342
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_326 Depth 3
	j	$BB50_326
	daddiu	$1, $2, 4
$BB50_325:                              # %while.body.i.i345
                                        #   in Loop: Header=BB50_326 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB50_326:                              # %while.body.i.i345
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_324 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_325
	nop
# BB#327:                               # %writeUARTChar.exit.i348
                                        #   in Loop: Header=BB50_324 Depth=2
	daddiu	$1, $19, 127
	dsll	$3, $1, 24
	sb	$4, 0($3)
	daddiu	$1, $5, 1
	lbu	$4, 1($5)
	bne	$4, $zero, $BB50_324
	move	$5, $1
# BB#328:                               #   in Loop: Header=BB50_12 Depth=1
	addiu	$4, $zero, 32
	ld	$1, %got_page($.str19)($12)
	daddiu	$5, $1, %got_ofst($.str19)
$BB50_329:                              # %while.body.i353
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_331 Depth 3
	j	$BB50_331
	daddiu	$1, $3, 4
$BB50_330:                              # %while.body.i.i356
                                        #   in Loop: Header=BB50_331 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB50_331:                              # %while.body.i.i356
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_329 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_330
	nop
# BB#332:                               # %writeUARTChar.exit.i359
                                        #   in Loop: Header=BB50_329 Depth=2
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	sb	$4, 0($2)
	daddiu	$1, $5, 1
	lbu	$4, 1($5)
	bne	$4, $zero, $BB50_329
	move	$5, $1
# BB#333:                               #   in Loop: Header=BB50_12 Depth=1
	addiu	$4, $zero, 32
	ld	$1, %got_page($.str20)($12)
	daddiu	$5, $1, %got_ofst($.str20)
$BB50_334:                              # %while.body.i364
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_336 Depth 3
	j	$BB50_336
	daddiu	$1, $2, 4
$BB50_335:                              # %while.body.i.i367
                                        #   in Loop: Header=BB50_336 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB50_336:                              # %while.body.i.i367
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_334 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_335
	nop
# BB#337:                               # %writeUARTChar.exit.i370
                                        #   in Loop: Header=BB50_334 Depth=2
	daddiu	$1, $19, 127
	dsll	$3, $1, 24
	sb	$4, 0($3)
	daddiu	$1, $5, 1
	lbu	$4, 1($5)
	bne	$4, $zero, $BB50_334
	move	$5, $1
# BB#338:                               #   in Loop: Header=BB50_12 Depth=1
	addiu	$4, $zero, 32
	ld	$1, %got_page($.str21)($12)
	daddiu	$5, $1, %got_ofst($.str21)
$BB50_339:                              # %while.body.i375
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_341 Depth 3
	j	$BB50_341
	daddiu	$1, $3, 4
$BB50_340:                              # %while.body.i.i378
                                        #   in Loop: Header=BB50_341 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB50_341:                              # %while.body.i.i378
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_339 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_340
	nop
# BB#342:                               # %writeUARTChar.exit.i381
                                        #   in Loop: Header=BB50_339 Depth=2
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	sb	$4, 0($2)
	daddiu	$1, $5, 1
	lbu	$4, 1($5)
	bne	$4, $zero, $BB50_339
	move	$5, $1
# BB#343:                               #   in Loop: Header=BB50_12 Depth=1
	addiu	$4, $zero, 32
	ld	$1, %got_page($.str22)($12)
	daddiu	$5, $1, %got_ofst($.str22)
$BB50_344:                              # %while.body.i386
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_346 Depth 3
	j	$BB50_346
	daddiu	$1, $2, 4
$BB50_345:                              # %while.body.i.i389
                                        #   in Loop: Header=BB50_346 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB50_346:                              # %while.body.i.i389
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_344 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_345
	nop
# BB#347:                               # %writeUARTChar.exit.i392
                                        #   in Loop: Header=BB50_344 Depth=2
	daddiu	$1, $19, 127
	dsll	$3, $1, 24
	sb	$4, 0($3)
	daddiu	$1, $5, 1
	lbu	$4, 1($5)
	bne	$4, $zero, $BB50_344
	move	$5, $1
# BB#348:                               #   in Loop: Header=BB50_12 Depth=1
	addiu	$2, $zero, 32
	ld	$1, %got_page($.str23)($12)
	daddiu	$5, $1, %got_ofst($.str23)
$BB50_349:                              # %while.body.i397
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_351 Depth 3
	j	$BB50_351
	daddiu	$1, $3, 4
$BB50_350:                              # %while.body.i.i400
                                        #   in Loop: Header=BB50_351 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB50_351:                              # %while.body.i.i400
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_349 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_350
	nop
# BB#352:                               # %writeUARTChar.exit.i403
                                        #   in Loop: Header=BB50_349 Depth=2
	daddiu	$1, $19, 127
	dsll	$4, $1, 24
	sb	$2, 0($4)
	daddiu	$1, $5, 1
	lbu	$2, 1($5)
	bne	$2, $zero, $BB50_349
	move	$5, $1
# BB#353:                               #   in Loop: Header=BB50_12 Depth=1
	addiu	$3, $zero, 32
	ld	$1, %got_page($.str24)($12)
	daddiu	$5, $1, %got_ofst($.str24)
$BB50_354:                              # %while.body.i408
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_356 Depth 3
	j	$BB50_356
	daddiu	$1, $4, 4
$BB50_355:                              # %while.body.i.i411
                                        #   in Loop: Header=BB50_356 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB50_356:                              # %while.body.i.i411
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_354 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_355
	nop
# BB#357:                               # %writeUARTChar.exit.i414
                                        #   in Loop: Header=BB50_354 Depth=2
	daddiu	$1, $19, 127
	dsll	$2, $1, 24
	sb	$3, 0($2)
	daddiu	$1, $5, 1
	lbu	$3, 1($5)
	bne	$3, $zero, $BB50_354
	move	$5, $1
# BB#358:                               #   in Loop: Header=BB50_12 Depth=1
	addiu	$3, $zero, 32
	ld	$1, %got_page($.str25)($12)
	daddiu	$4, $1, %got_ofst($.str25)
$BB50_359:                              # %while.body.i419
                                        #   Parent Loop BB50_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_361 Depth 3
	j	$BB50_361
	daddiu	$1, $2, 4
$BB50_360:                              # %while.body.i.i422
                                        #   in Loop: Header=BB50_361 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB50_361:                              # %while.body.i.i422
                                        #   Parent Loop BB50_12 Depth=1
                                        #     Parent Loop BB50_359 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_360
	nop
# BB#362:                               # %writeUARTChar.exit.i425
                                        #   in Loop: Header=BB50_359 Depth=2
	daddiu	$1, $19, 127
	dsll	$1, $1, 24
	sb	$3, 0($1)
	daddiu	$1, $4, 1
	lbu	$3, 1($4)
	bne	$3, $zero, $BB50_359
	move	$4, $1
# BB#363:                               # %writeUARTChar.exit.i425
                                        #   in Loop: Header=BB50_12 Depth=1
	j	$BB50_13
	nop
$BB50_364:                              # %if.end41
                                        #   in Loop: Header=BB50_12 Depth=1
	addiu	$1, $zero, 77
	bne	$16, $1, $BB50_234
	nop
$BB50_365:                              # %if.end41
	j	$BB50_367
	nop
$BB50_366:                              # %if.end195.thread
                                        #   in Loop: Header=BB50_12 Depth=1
	lui	$1, 32512
	daddiu	$1, $1, 24576
	lw	$2, 32($fp)             # 4-byte Folded Reload
	andi	$2, $2, 65535
	xori	$2, $2, 65535
	sw	$2, 32($fp)             # 4-byte Folded Spill
	sll	$2, $2, 0
	dsll	$2, $2, 48
	dsra	$2, $2, 48
	sd	$2, 0($1)
	j	$BB50_12
	addiu	$16, $zero, 108
$BB50_367:
	ld	$1, %got_page($.str36)($12)
	daddiu	$2, $1, %got_ofst($.str36)
	addiu	$4, $zero, 77
	daddiu	$1, $zero, 9
	dsll	$3, $1, 36
	daddiu	$1, $3, 127
	dsll	$1, $1, 24
	daddiu	$5, $1, 4
$BB50_368:                              # %while.body.i767
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_370 Depth 2
	lw	$1, 0($5)
	j	$BB50_370
	nop
$BB50_369:                              # %while.body.i.i770
                                        #   in Loop: Header=BB50_370 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $3, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB50_370:                              # %while.body.i.i770
                                        #   Parent Loop BB50_368 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_369
	nop
# BB#371:                               # %writeUARTChar.exit.i773
                                        #   in Loop: Header=BB50_368 Depth=1
	daddiu	$1, $3, 127
	dsll	$1, $1, 24
	sb	$4, 0($1)
	daddiu	$1, $2, 1
	lbu	$4, 1($2)
	bne	$4, $zero, $BB50_368
	move	$2, $1
# BB#372:
	addiu	$17, $zero, 0
	lui	$6, 256
	daddiu	$1, $zero, 19
	dsll	$19, $1, 35
	daddiu	$1, $19, 1
	dsll	$20, $1, 24
	addiu	$7, $zero, 16384
	ori	$1, $6, 65532
	sw	$1, 88($fp)             # 4-byte Folded Spill
	daddiu	$1, $zero, 5
	dsll	$23, $1, 61
	daddiu	$1, $zero, 9
	dsll	$18, $1, 36
	daddiu	$1, $18, 127
	dsll	$1, $1, 24
	daddiu	$22, $1, 4
	addiu	$16, $zero, 16
	ld	$1, %got_page($.str38)($12)
	sd	$1, 72($fp)             # 8-byte Folded Spill
	addiu	$10, $zero, 10
	lui	$1, 11916
	daddiu	$1, $1, -23831
	dsll	$1, $1, 16
	daddiu	$1, $1, -17873
	dsll	$1, $1, 16
	daddiu	$1, $1, -29789
	sd	$1, 64($fp)             # 8-byte Folded Spill
	ld	$1, %call16(writeDigit)($12)
	sd	$1, 56($fp)             # 8-byte Folded Spill
	ld	$1, %got_page($.str39)($12)
	sd	$1, 48($fp)             # 8-byte Folded Spill
	sd	$12, 96($fp)            # 8-byte Folded Spill
	j	$BB50_374
	lw	$8, 84($fp)
$BB50_373:                              # %writeUARTChar.exit.i896
                                        #   in Loop: Header=BB50_374 Depth=1
	daddiu	$1, $18, 127
	dsll	$1, $1, 24
	addiu	$10, $zero, 10
	sb	$10, 0($1)
	addiu	$17, $17, 16384
	lui	$1, 1792
	slt	$1, $1, $17
	addiu	$8, $zero, 0
	movn	$17, $zero, $1
	lui	$6, 256
	addiu	$7, $zero, 16384
$BB50_374:                              # %while.body47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_375 Depth 2
                                        #     Child Loop BB50_377 Depth 2
                                        #     Child Loop BB50_379 Depth 2
                                        #       Child Loop BB50_381 Depth 3
                                        #     Child Loop BB50_385 Depth 2
                                        #     Child Loop BB50_388 Depth 2
                                        #     Child Loop BB50_390 Depth 2
                                        #     Child Loop BB50_392 Depth 2
                                        #       Child Loop BB50_394 Depth 3
                                        #     Child Loop BB50_398 Depth 2
                                        #     Child Loop BB50_400 Depth 2
                                        #     Child Loop BB50_409 Depth 2
                                        #       Child Loop BB50_411 Depth 3
                                        #     Child Loop BB50_414 Depth 2
                                        #       Child Loop BB50_416 Depth 3
                                        #     Child Loop BB50_403 Depth 2
                                        #       Child Loop BB50_405 Depth 3
                                        #     Child Loop BB50_420 Depth 2
                                        #     Child Loop BB50_423 Depth 2
                                        #     Child Loop BB50_426 Depth 2
                                        #     Child Loop BB50_429 Depth 2
                                        #     Child Loop BB50_432 Depth 2
                                        #     Child Loop BB50_435 Depth 2
                                        #     Child Loop BB50_438 Depth 2
                                        #     Child Loop BB50_441 Depth 2
	sll	$4, $17, 2
	addu	$3, $4, $6
	addiu	$5, $zero, 0
	#APP
	mfc0 $2, $9
	#NO_APP
$BB50_375:                              # %for.body52
                                        #   Parent Loop BB50_374 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addu	$1, $17, $5
	sll	$1, $1, 0
	dsll	$1, $1, 2
	daddu	$1, $1, $20
	sw	$3, 0($1)
	addiu	$5, $5, 1
	bne	$5, $7, $BB50_375
	addiu	$3, $3, 4
# BB#376:                               # %for.body62.loopexit
                                        #   in Loop: Header=BB50_374 Depth=1
	addu	$5, $4, $6
	addiu	$6, $zero, 0
$BB50_377:                              # %for.body62
                                        #   Parent Loop BB50_374 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addu	$1, $17, $6
	sll	$1, $1, 0
	dsll	$1, $1, 2
	daddiu	$3, $19, 1
	dsll	$3, $3, 24
	daddu	$1, $1, $3
	lw	$3, 0($1)
	xor	$1, $5, $3
	addiu	$5, $5, 4
	addiu	$6, $6, 1
	sltu	$1, $zero, $1
	bne	$6, $7, $BB50_377
	addu	$8, $1, $8
# BB#378:                               # %for.end77
                                        #   in Loop: Header=BB50_374 Depth=1
	#APP
	mfc0 $1, $9
	#NO_APP
	subu	$2, $1, $2
	lw	$1, 88($fp)             # 4-byte Folded Reload
	addu	$1, $4, $1
	sll	$4, $1, 0
	addiu	$5, $zero, 0
$BB50_379:                              # %for.body.i785
                                        #   Parent Loop BB50_374 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_381 Depth 3
	lw	$1, 0($22)
	j	$BB50_381
	nop
$BB50_380:                              # %while.body.i.i788
                                        #   in Loop: Header=BB50_381 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $18, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB50_381:                              # %while.body.i.i788
                                        #   Parent Loop BB50_374 Depth=1
                                        #     Parent Loop BB50_379 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_380
	nop
# BB#382:                               # %writeUARTChar.exit.i792
                                        #   in Loop: Header=BB50_379 Depth=2
	sltu	$1, $4, $23
	dsrl	$7, $4, 60
	daddiu	$6, $7, 55
	ori	$7, $7, 48
	movn	$6, $7, $1
	sll	$1, $6, 0
	daddiu	$6, $18, 127
	dsll	$6, $6, 24
	sb	$1, 0($6)
	addiu	$5, $5, 1
	bne	$5, $16, $BB50_379
	dsll	$4, $4, 4
# BB#383:                               # %while.body.i797.loopexit
                                        #   in Loop: Header=BB50_374 Depth=1
	j	$BB50_385
	daddiu	$1, $6, 4
$BB50_384:                              # %while.body.i.i800
                                        #   in Loop: Header=BB50_385 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $18, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB50_385:                              # %while.body.i.i800
                                        #   Parent Loop BB50_374 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_384
	nop
# BB#386:                               # %writeUARTChar.exit.i803
                                        #   in Loop: Header=BB50_374 Depth=1
	daddiu	$1, $18, 127
	dsll	$4, $1, 24
	addiu	$1, $zero, 32
	sb	$1, 0($4)
	j	$BB50_388
	daddiu	$5, $4, 4
$BB50_387:                              # %while.body.i.i800.1
                                        #   in Loop: Header=BB50_388 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_388:                              # %while.body.i.i800.1
                                        #   Parent Loop BB50_374 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($5)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_387
	nop
# BB#389:                               # %writeUARTChar.exit.i803.1
                                        #   in Loop: Header=BB50_374 Depth=1
	addiu	$1, $zero, 61
	sb	$1, 0($4)
	lw	$1, 0($5)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB50_391
	move	$9, $8
$BB50_390:                              # %while.body.i.i800.2
                                        #   Parent Loop BB50_374 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $18, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_390
	nop
$BB50_391:                              # %writeUARTChar.exit.i803.2
                                        #   in Loop: Header=BB50_374 Depth=1
	daddiu	$1, $18, 127
	dsll	$4, $1, 24
	addiu	$1, $zero, 32
	sb	$1, 0($4)
	sll	$3, $3, 0
	addiu	$5, $zero, 0
$BB50_392:                              # %for.body.i815
                                        #   Parent Loop BB50_374 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_394 Depth 3
	j	$BB50_394
	daddiu	$1, $4, 4
$BB50_393:                              # %while.body.i.i818
                                        #   in Loop: Header=BB50_394 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $18, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB50_394:                              # %while.body.i.i818
                                        #   Parent Loop BB50_374 Depth=1
                                        #     Parent Loop BB50_392 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_393
	nop
# BB#395:                               # %writeUARTChar.exit.i822
                                        #   in Loop: Header=BB50_392 Depth=2
	sltu	$1, $3, $23
	dsrl	$7, $3, 60
	daddiu	$6, $7, 55
	ori	$7, $7, 48
	movn	$6, $7, $1
	sll	$1, $6, 0
	daddiu	$6, $18, 127
	dsll	$6, $6, 24
	sb	$1, 0($6)
	addiu	$5, $5, 1
	bne	$5, $16, $BB50_392
	dsll	$3, $3, 4
# BB#396:                               # %while.body.i827.loopexit
                                        #   in Loop: Header=BB50_374 Depth=1
	j	$BB50_398
	daddiu	$1, $6, 4
$BB50_397:                              # %while.body.i.i830
                                        #   in Loop: Header=BB50_398 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $18, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
$BB50_398:                              # %while.body.i.i830
                                        #   Parent Loop BB50_374 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($1)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_397
	nop
# BB#399:                               # %writeUARTChar.exit.i833
                                        #   in Loop: Header=BB50_374 Depth=1
	daddiu	$1, $18, 127
	dsll	$3, $1, 24
	addiu	$1, $zero, 63
	sb	$1, 0($3)
	daddiu	$4, $3, 4
	lw	$1, 0($4)
	andi	$1, $1, 65535
	bne	$1, $zero, $BB50_401
	ld	$8, 96($fp)
$BB50_400:                              # %while.body.i.i830.1
                                        #   Parent Loop BB50_374 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	lw	$1, 0($4)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_400
	nop
$BB50_401:                              # %writeUARTChar.exit.i833.1
                                        #   in Loop: Header=BB50_374 Depth=1
	sb	$10, 0($3)
	bne	$9, $zero, $BB50_408
	sll	$2, $2, 0
# BB#402:                               #   in Loop: Header=BB50_374 Depth=1
	addiu	$3, $zero, 65
	ld	$1, 72($fp)             # 8-byte Folded Reload
	daddiu	$4, $1, %got_ofst($.str38)
$BB50_403:                              # %while.body.i838
                                        #   Parent Loop BB50_374 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_405 Depth 3
	daddiu	$1, $18, 127
	dsll	$5, $1, 24
	j	$BB50_405
	daddiu	$6, $5, 4
$BB50_404:                              # %while.body.i.i841
                                        #   in Loop: Header=BB50_405 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_405:                              # %while.body.i.i841
                                        #   Parent Loop BB50_374 Depth=1
                                        #     Parent Loop BB50_403 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($6)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_404
	nop
# BB#406:                               # %writeUARTChar.exit.i844
                                        #   in Loop: Header=BB50_403 Depth=2
	sb	$3, 0($5)
	daddiu	$1, $4, 1
	lbu	$3, 1($4)
	beq	$3, $zero, $BB50_418
	move	$4, $1
# BB#407:                               # %writeUARTChar.exit.i844
                                        #   in Loop: Header=BB50_403 Depth=2
	j	$BB50_403
	nop
$BB50_408:                              # %if.else
                                        #   in Loop: Header=BB50_374 Depth=1
	sll	$3, $9, 0
	addiu	$4, $zero, 0
$BB50_409:                              # %for.body.i856
                                        #   Parent Loop BB50_374 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_411 Depth 3
	daddiu	$1, $18, 127
	dsll	$5, $1, 24
	j	$BB50_411
	daddiu	$6, $5, 4
$BB50_410:                              # %while.body.i.i859
                                        #   in Loop: Header=BB50_411 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_411:                              # %while.body.i.i859
                                        #   Parent Loop BB50_374 Depth=1
                                        #     Parent Loop BB50_409 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($6)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_410
	nop
# BB#412:                               # %writeUARTChar.exit.i863
                                        #   in Loop: Header=BB50_409 Depth=2
	sltu	$1, $3, $23
	dsrl	$7, $3, 60
	daddiu	$6, $7, 55
	ori	$7, $7, 48
	movn	$6, $7, $1
	sll	$1, $6, 0
	sb	$1, 0($5)
	addiu	$4, $4, 1
	bne	$4, $16, $BB50_409
	dsll	$3, $3, 4
# BB#413:                               #   in Loop: Header=BB50_374 Depth=1
	addiu	$3, $zero, 32
	ld	$1, 48($fp)             # 8-byte Folded Reload
	daddiu	$4, $1, %got_ofst($.str39)
$BB50_414:                              # %while.body.i868
                                        #   Parent Loop BB50_374 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_416 Depth 3
	daddiu	$1, $18, 127
	dsll	$5, $1, 24
	j	$BB50_416
	daddiu	$6, $5, 4
$BB50_415:                              # %while.body.i.i871
                                        #   in Loop: Header=BB50_416 Depth=3
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_416:                              # %while.body.i.i871
                                        #   Parent Loop BB50_374 Depth=1
                                        #     Parent Loop BB50_414 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	lw	$1, 0($6)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_415
	nop
# BB#417:                               # %writeUARTChar.exit.i874
                                        #   in Loop: Header=BB50_414 Depth=2
	sb	$3, 0($5)
	daddiu	$1, $4, 1
	lbu	$3, 1($4)
	bne	$3, $zero, $BB50_414
	move	$4, $1
$BB50_418:                              # %if.end90
                                        #   in Loop: Header=BB50_374 Depth=1
	daddiu	$1, $18, 127
	dsll	$3, $1, 24
	j	$BB50_420
	daddiu	$4, $3, 4
$BB50_419:                              # %while.body.i.i882
                                        #   in Loop: Header=BB50_420 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_420:                              # %while.body.i.i882
                                        #   Parent Loop BB50_374 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($4)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_419
	nop
# BB#421:                               # %writeUARTChar.exit.i885
                                        #   in Loop: Header=BB50_374 Depth=1
	addiu	$1, $zero, 67
	sb	$1, 0($3)
	lw	$1, 0($4)
	j	$BB50_423
	nop
$BB50_422:                              # %while.body.i.i882.1
                                        #   in Loop: Header=BB50_423 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $18, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB50_423:                              # %while.body.i.i882.1
                                        #   Parent Loop BB50_374 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_422
	nop
# BB#424:                               # %writeUARTChar.exit.i885.1
                                        #   in Loop: Header=BB50_374 Depth=1
	daddiu	$1, $18, 127
	dsll	$3, $1, 24
	addiu	$1, $zero, 80
	sb	$1, 0($3)
	j	$BB50_426
	daddiu	$4, $3, 4
$BB50_425:                              # %while.body.i.i882.2
                                        #   in Loop: Header=BB50_426 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_426:                              # %while.body.i.i882.2
                                        #   Parent Loop BB50_374 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($4)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_425
	nop
# BB#427:                               # %writeUARTChar.exit.i885.2
                                        #   in Loop: Header=BB50_374 Depth=1
	addiu	$1, $zero, 73
	sb	$1, 0($3)
	lw	$1, 0($4)
	j	$BB50_429
	nop
$BB50_428:                              # %while.body.i.i882.3
                                        #   in Loop: Header=BB50_429 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $18, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB50_429:                              # %while.body.i.i882.3
                                        #   Parent Loop BB50_374 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_428
	nop
# BB#430:                               # %writeUARTChar.exit.i885.3
                                        #   in Loop: Header=BB50_374 Depth=1
	daddiu	$1, $18, 127
	dsll	$3, $1, 24
	addiu	$1, $zero, 32
	sb	$1, 0($3)
	j	$BB50_432
	daddiu	$4, $3, 4
$BB50_431:                              # %while.body.i.i882.4
                                        #   in Loop: Header=BB50_432 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_432:                              # %while.body.i.i882.4
                                        #   Parent Loop BB50_374 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($4)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_431
	nop
# BB#433:                               # %writeUARTChar.exit.i885.4
                                        #   in Loop: Header=BB50_374 Depth=1
	addiu	$1, $zero, 111
	sb	$1, 0($3)
	lw	$1, 0($4)
	j	$BB50_435
	nop
$BB50_434:                              # %while.body.i.i882.5
                                        #   in Loop: Header=BB50_435 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $18, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB50_435:                              # %while.body.i.i882.5
                                        #   Parent Loop BB50_374 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_434
	nop
# BB#436:                               # %writeUARTChar.exit.i885.5
                                        #   in Loop: Header=BB50_374 Depth=1
	daddiu	$1, $18, 127
	dsll	$3, $1, 24
	addiu	$1, $zero, 102
	sb	$1, 0($3)
	j	$BB50_438
	daddiu	$21, $3, 4
$BB50_437:                              # %while.body.i.i882.6
                                        #   in Loop: Header=BB50_438 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
$BB50_438:                              # %while.body.i.i882.6
                                        #   Parent Loop BB50_374 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lw	$1, 0($21)
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_437
	nop
# BB#439:                               # %writeUARTChar.exit.i885.6
                                        #   in Loop: Header=BB50_374 Depth=1
	daddiu	$1, $zero, 1000
	dmult	$2, $1
	mflo	$1
	ld	$2, 64($fp)             # 8-byte Folded Reload
	dmult	$1, $2
	mfhi	$1
	addiu	$2, $zero, 32
	sb	$2, 0($3)
	dsrl	$2, $1, 63
	dsra	$1, $1, 16
	daddu	$4, $1, $2
	ld	$25, 56($fp)            # 8-byte Folded Reload
	jalr	$25
	move	$gp, $8
	lw	$1, 0($21)
	j	$BB50_441
	nop
$BB50_440:                              # %while.body.i.i893
                                        #   in Loop: Header=BB50_441 Depth=2
	#APP
	add $v0, $v0, $0
	#NO_APP
	daddiu	$1, $18, 127
	dsll	$1, $1, 24
	daddiu	$1, $1, 4
	lw	$1, 0($1)
$BB50_441:                              # %while.body.i.i893
                                        #   Parent Loop BB50_374 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andi	$1, $1, 65535
	beq	$1, $zero, $BB50_440
	nop
# BB#442:                               # %while.body.i.i893
                                        #   in Loop: Header=BB50_374 Depth=1
	j	$BB50_373
	nop
$BB50_443:                              # %while.end
	addiu	$2, $zero, 0
	move	$sp, $fp
	ld	$16, 104($sp)           # 8-byte Folded Reload
	ld	$17, 112($sp)           # 8-byte Folded Reload
	ld	$18, 120($sp)           # 8-byte Folded Reload
	ld	$19, 128($sp)           # 8-byte Folded Reload
	ld	$20, 136($sp)           # 8-byte Folded Reload
	ld	$21, 144($sp)           # 8-byte Folded Reload
	ld	$22, 152($sp)           # 8-byte Folded Reload
	ld	$23, 160($sp)           # 8-byte Folded Reload
	ld	$gp, 168($sp)           # 8-byte Folded Reload
	ld	$fp, 176($sp)           # 8-byte Folded Reload
	ld	$ra, 184($sp)           # 8-byte Folded Reload
	jr	$ra
	daddiu	$sp, $sp, 192
	.set	at
	.set	macro
	.set	reorder
	.end	main
$tmp203:
	.size	main, ($tmp203)-main

	.type	contextDone,@object     # @contextDone
	.section	.sbss,"aw",@nobits
	.globl	contextDone
	.align	2
contextDone:
	.4byte	0                       # 0x0
	.size	contextDone, 4

	.type	makeBss,@object         # @makeBss
	.section	.sdata,"aw",@progbits
	.globl	makeBss
	.align	2
makeBss:
	.4byte	1                       # 0x1
	.size	makeBss, 4

	.type	heap,@object            # @heap
	.globl	heap
	.align	3
heap:
	.8byte	-7493989779927728128
	.size	heap, 8

	.type	$.str6,@object          # @.str6
	.section	.rodata.str1.1,"aMS",@progbits,1
$.str6:
	.asciz	 " nanoseconds\n"
	.size	$.str6, 14

	.type	$.str12,@object         # @.str12
$.str12:
	.asciz	 "UART serial interface TLB entry setup.\n"
	.size	$.str12, 40

	.type	$.str13,@object         # @.str13
$.str13:
	.asciz	 "  MMU setup.\n"
	.size	$.str13, 14

	.type	$.str15,@object         # @.str15
$.str15:
	.asciz	 "   \"L\" for load-linked and store-conditional test.\n"
	.size	$.str15, 52

	.type	$.str16,@object         # @.str16
$.str16:
	.asciz	 "   \"B\" array bounds checking benchmark.\n"
	.size	$.str16, 41

	.type	$.str17,@object         # @.str17
$.str17:
	.asciz	 "   \"D\" for multiply and divide test.\n"
	.size	$.str17, 38

	.type	$.str18,@object         # @.str18
$.str18:
	.asciz	 "   \"C\" for Count register test.\n"
	.size	$.str18, 33

	.type	$.str19,@object         # @.str19
$.str19:
	.asciz	 "   \"M\" for eternal memory test.\n"
	.size	$.str19, 33

	.type	$.str20,@object         # @.str20
$.str20:
	.asciz	 "   \"V\" for framebuffer test.\n"
	.size	$.str20, 30

	.type	$.str21,@object         # @.str21
$.str21:
	.asciz	 "   \"K\" for Capability initialization.\n"
	.size	$.str21, 39

	.type	$.str22,@object         # @.str22
$.str22:
	.asciz	 "   \"l\" to invert LEDs.\n"
	.size	$.str22, 24

	.type	$.str23,@object         # @.str23
$.str23:
	.asciz	 "   \"T\" for touchscreen test.\n"
	.size	$.str23, 30

	.type	$.str24,@object         # @.str24
$.str24:
	.asciz	 "   \"q\" for quicksort boundschecking test.\n"
	.size	$.str24, 43

	.type	$.str25,@object         # @.str25
$.str25:
	.asciz	 "   \"Q\" to quit.\n"
	.size	$.str25, 17

	.type	$.str26,@object         # @.str26
$.str26:
	.asciz	 "Load-linked and store-conditional test:\n"
	.size	$.str26, 41

	.type	$.str27,@object         # @.str27
$.str27:
	.asciz	 " < load-linked and store-conditional result (0)\n"
	.size	$.str27, 49

	.type	$.str28,@object         # @.str28
$.str28:
	.asciz	 " < test and set result (1)\n"
	.size	$.str28, 28

	.type	$.str32,@object         # @.str32
$.str32:
	.asciz	 "Multiply and divide test.\n"
	.size	$.str32, 27

	.type	$.str36,@object         # @.str36
$.str36:
	.asciz	 "Memory test:\n"
	.size	$.str36, 14

	.type	$.str38,@object         # @.str38
$.str38:
	.asciz	 "All good! \n"
	.size	$.str38, 12

	.type	$.str39,@object         # @.str39
$.str39:
	.asciz	 " were bad :(\n"
	.size	$.str39, 14

	.type	$.str41,@object         # @.str41
$.str41:
	.asciz	 "Count Register Test:\n"
	.size	$.str41, 22

	.type	$.str43,@object         # @.str43
$.str43:
	.asciz	 "C4.base=    "
	.size	$.str43, 13

	.type	$.str44,@object         # @.str44
$.str44:
	.asciz	 "C4.length=  "
	.size	$.str44, 13

	.type	$.str45,@object         # @.str45
$.str45:
	.asciz	 "After accessing CHERI_NET_RX, read:\n"
	.size	$.str45, 37

	.type	$.str46,@object         # @.str46
$.str46:
	.asciz	 "Before writing 123 to CHERI_NET_TX\n"
	.size	$.str46, 36

	.type	$.str47,@object         # @.str47
$.str47:
	.asciz	 "After writing 123 to CHERI_NET_TX\n"
	.size	$.str47, 35


